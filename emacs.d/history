;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(grep-files-history grep-regexp-history grep-history setenv-history read-envvar-name-history sgml-tag-history Man-topic-history info-lookup-history shell-command-history w3m-weather-input-history read-expression-history org-refile-history org-table-formula-history minibuffer-history-search-history org-tags-history org-read-date-history string-rectangle-history input-method-history query-replace-history tmphist set-variable-value-history w3m-search-engine-history ido-file-history ido-buffer-history iswitchb-history w3m-bookmark-title-history imenu--history-list bookmark-history search-ring command-history regexp-history w3m-input-url-history face-name-history Info-search-history w3m-bookmark-section-history extended-command-history file-name-history minibuffer-history buffer-name-history yes-or-no-p-history))
(setq grep-files-history '("all"))
(setq grep-regexp-history '("\"Session\"" "\"function (key,value)\"" "\"function(key,value)\"" "\"Session.set\"" "server"))
(setq grep-history '("grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo  -nH -e \\\"Session.set\\\" * .*" "grep -nH -e \"Session.set\" *" "grep -nH -e \"Session.set\" ./" "grep -nH -e \"Session.set\"" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e server hapi.js" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e --color server" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e server * .*" "grep -nH --color -e server hapi.js" "grep -nH -e \"server\" hapi.js" "grep -nH -e 'arf'" "grep -nH -e \"hapi*\"" "grep -nH -e \"hapi\"" "grep -nH -e hapi*" "grep -nH -e hapi" "grep -nH -e "))
(setq setenv-history '("/usr/local/opt/coreutils/libexec/gnubin:/Users/anand/.rbenv/shims:/usr/local/bin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin" "(shell-command-to-string \"source /Users/anand/.bashrc && printf /usr/bin:/bin:/usr/sbin:/sbin\")" "(shell-command-to-string \"source $HOME/.bashrc && printf $PATH\")" "/usr/bin:/bin:/usr/sbin:/sbin" "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:"))
(setq read-envvar-name-history '("PATH" "LS_COLORS"))
(setq sgml-tag-history '("header" "aside" "div" "body"))
(setq Man-topic-history '("git-add" "git" "npm" "ls"))
(setq info-lookup-history '("C-h"))
(setq shell-command-history '("grep -r -e \"function (key,value)\" .meteor/*" "grep -r -e \"Session\" .meteor/*" "grep -r -e \"Session\" ./*" "grep -r -e \"Session\" ../*" "ls --color=auto --group-directories-first -Gp" "ls --color=auto --group-directories-first" "ls"))
(setq read-expression-history '("(setq nrepl-popup-stacktraces nil)" "(setq scroll-margin 2)" "(setq scroll-margin 5)" "(autoload 'w3m-browse-url \"w3m\" \"arf\" t)" "(autoload 'w3m-load)" "(require 'centered-cursor-mode)" "(require 'color-theme-actress)" "(require 'blink-colored-cursor)" "(require 'blink-colored-cursorarf)" "(directory-files my-stuff t)" "load-path" "(add-to-list 'foo 'wrum)" "(add-to-list 'foo 'ruf)" "(add-to-list foo 'ruf)" "(defvar foo '(arf bark))" "(add-to-list '(arf bark) 'ruf)" "(list 'arf 'bark)" "(add-to-list '(list 'arf 'bark) 'ruf)" "(add-to-list (list 'arf 'bark) 'ruf)" "(directory-files dotfiles-dir t \"\\\\w+\")" "(directory-files dotfiles-dir t)" "(directory-files dotfiles-dir)" "(directory-files)" "(concat dotfiles-dir \"my-stuff/\")" "(expand-file-name \"my-stufffsd\" dotfiles-dir)" "(expand-file-name \"my-stuff\" dotfiles-dir)" "(concat dotfiles-dir \"my-stuff\")" "(kbd \"C-c q\")" "(kbd \"C-c\")" "(command-execute \"q\")" "(command-execute)" "(insert-char (string-to-char \"q\") 1)" "(string-to-char \"q\")" "(insert-char \\`q\\` 1)" "(insert-char q 1)" "(self-insert-command <q>)" "(self-insert-command \\064)" "(self-insert-command \"q\")" "(insert-char \\q 1)" "(insert-char 'q 1)" "(insert-char 'q' 1)" "(insert-char \"q\" 1)" "(insert-char \"q\")" "brar" "(concat dotfiles-dir \"arf\")" "dotfiles-dir" "(stringp 21)" "(stringp \"21\")" "(stringp \"/Users/anand/.emacs.d/color-themes/\")" "(stringp \"/Users/anand/.emacs.d/\")" "(stringp \"/Users/anand\")" "(stringp \"Arf\")" "(pp load-path)" "(require 'smooth-scroll)" "(setq auto-window-vscroll nil)" "(pp blink-cursor-colors)" "(point)" "(point-at-eol)" "(point)" "file-name-directory"))
(setq org-refile-history '("My own running app"))
(setq org-table-formula-history '("$3/$4;%.1f" ";%.1f" "\"\"" "$3/$4;%.1f" "$3/$4"))
(setq minibuffer-history-search-history '("lotr" "erpa" "ls -p" "arf"))
(setq org-read-date-history '("   " "+1    "))
(setq string-rectangle-history '("blerg" "arf" ";" ";arf" "arg"))
(setq query-replace-history '("altered" "changed"))
(setq set-variable-value-history '("99" "1" "10000" "9999" "1" "99" "5"))
(setq ido-file-history '("leaderboard.css" "custom.el" "init.el" "bashrc.sh" ".bashrc" "emacs.el" "emacs-todo.org" "Elevated|SEO.html" "hapi.js" "arf.rb" "notes.org" "org.org" "cyberpunk-theme.el" "cover-letter2.txt" "financial1-propsosal.txt" "index.html" "." "OutlineforAndrewsOnlineMarketingWindow.rtf" "she-proposal.txt" "jeff-bio.txt" "responsive.css" "responsive-child.css" "style.css" "new-notes.org" "Elevated|SEO.org" nil "proposals.org" "elevatedseo.html" "animal.rb" "accounts.dat" "iy-goto-char.el" "scratch-emacs.el" "snippets-notes.clj" "conways-game-of-life.clj" ".clj_completions-long-list" "automata.org" "stylesheet.css" "literate-example.org" "emacs-todo.html" "blink-colored-cursor.el" ".notes" "metar-report.el" "arf.html" "colors.html" "cursor-chg.el" ".emacs" ".emacs" "emacs" "arf.pl" ".emacs" "lein-tarsier-0.9.1.jar" ".emacs"))
(setq ido-buffer-history '("*eshell*" "*Customize Group: The Emacs shell*" "*scratch*" "*Messages*" "*Customize Group: Environment*" "custom.el" "*Customize Group: Ns*" "init.el" "*Customize Group: Emacs*" ".meteor" "*ansi-term*" "org-mode" ".saves-*" ".saves-61616-anands-mbp.local~" "*Packages*" "*Man grep*" "*grep*" "hapi.js" "emacs.el" "emacs-todo.org" "NEWS" "alias" "*shell*" "*Customize Group: Ansi Colors*" "arf" "*Customize Group: Shell*" "*terminal*" "*Shell Command Output*" ".bash_history" "*Customize Group: Dired*" "Elevated|SEO.html" "arf.rb" "org.org" "*info*" "*Apropos*" "work" "cover-letter2.txt" "financial1-propsosal.txt" "*Help*" "*Customize Option: Dired Listing Switches*" "public" "index.html" "new-notes.org" "responsive-child.css" "notes.org" "Elevated|SEO.org" "responsive.css" "Elevated|SEO.org<2>" "proposals.org" "elevatedseo.html" "Sites" "TUTORIAL" "accounts.dat" "scratch-emacs.el" "iy-go-to-char.el" "iy-goto-char.el" "*nrepl*" "electric.el.gz" "*GNU Emacs*" "snippets-notes.clj" "conways-game-of-life.clj" "*ielm*" ".clj_completions-long-list" "*Customize Option: Org Capture Templates*" "*Customize Face: Default*" "stylesheet.css" "*Customize Group: Auto Save*" "emacs-todo.html" "blink-colored-cursor.el" "*Customize Apropos*" "*w3m*" ".notes" "*Customize Option: Ido Ignore Buffers*" "metar-report.el" "weather.el" "*Color Theme Selection*" "*Custom Themes*"))
(setq iswitchb-history '("w3m" "scr" "buffer " "term"))
(setq w3m-bookmark-title-history '("ADDS - METARS form results" "keyboard - What are good custom keybindings in emacs? - Stack Overflow" "Google Reader" "EmacsWiki: Jabber El" "The Emacs Wiki" "Duck Duck Go"))
(setq imenu--history-list '("my-scroll"))
(setq bookmark-history '("gls" "org-refile-last-stored"))
(setq search-ring '("rebind" "reb" "erpa" "ns-" "command" "server" "client" "prefer" "function (" "set" "selectedse " "selected" "C-c" "M-" "key" "windmove"))
(setq command-history '((switch-to-buffer "*eshell*") (describe-key "" 1 nil) (describe-key "" 1 nil) (eshell-previous-matching-input "lotr" 1) (switch-to-buffer "*eshell*") (apropos-command '("rebind") nil) (switch-to-buffer "*Customize Group: The Emacs shell*") (customize-group "eshell") (package-list-packages-no-fetch) (eshell-insert-buffer-name "*Help*") (eshell-next-matching-input "erpa" 1) (switch-to-buffer "*scratch*") (switch-to-buffer "*eshell*") (eshell nil) (switch-to-buffer "*Messages*") (color-theme-comidia) (find-file "/Users/anand/Dropbox/work/src/leaderboard/leaderboard.css") (switch-to-buffer "*Customize Group: Environment*") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Group: Ns*") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el") (switch-to-buffer "init.el") (describe-key [67108896] 1 nil) (describe-key " " 1 nil) (switch-to-buffer "*Customize Group: Emacs*") (apropos-command '("customize") nil) (iy-go-to-char 1 101) (switch-to-buffer "init.el") (apropos-command '("alt-modifier") nil) (switch-to-buffer "init.el") (apropos-command '("alt") nil) (apropos-command '("ns-") nil) (apropos-command '("option") nil) (switch-to-buffer "init.el") (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/init.el") (describe-key "\361" 1 nil) (apropos-command '("prefer") nil) (switch-to-buffer "*Customize Group: The Emacs shell*") (switch-to-buffer ".meteor") (man "git-add") (man "git") (shell-command "grep -r -e \"function (key,value)\" .meteor/*" nil nil) (shell-command "grep -r -e \"Session\" .meteor/*" nil nil) (shell-command "grep -r -e \"Session\" ./*" nil nil) (shell-command "grep -r -e \"Session\" ../*" nil nil) (describe-function 'rgrep) (rgrep "\"Session\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"function (key,value)\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"function(key,value)\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"Session.set\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (lgrep "\"Session.set\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (grep "grep -nH -e \"Session.set\" *") (grep "grep -nH -e \"Session.set\" ./") (grep "grep -nH -e \"Session.set\"") (web-mode) (manual-entry "npm") (kill-buffer "*ansi-term*") (switch-to-buffer "*ansi-term*") (color-theme-gruber-darker) (switch-to-buffer "org-mode") (ansi-term "/bin/bash") (find-file "/Users/anand/Dropbox/work/org-mode/") (cd "~/Dropbox/work/org-mode/") (getenv "PATH") (kill-buffer ".saves-*") (kill-buffer ".saves-61616-anands-mbp.local~") (recover-session) (find-file "/Users/anand/Dropbox/work/org-mode/bashrc.sh") (switch-to-buffer "*Packages*") (apropos-command '("color") nil) (apropos-command '("syntax") nil) (shell-mode) (find-file "/Users/anand/.bashrc") (switch-to-buffer "*Packages*") (describe-key "b" 1 nil) (describe-bindings) (describe-function 'describe-bindings) (disable-paredit-mode) (switch-to-buffer "*eshell*") (Info-goto-emacs-key-command-node "") (Info-goto-emacs-key-command-node "") (where-is 'grep nil) (apropos-command '("keybinding") nil) (apropos-documentation '("define-key") nil) (apropos-command '("define" "key") nil) (apropos-command '("definekey") nil) (apropos-command '("bind" "key") nil) (apropos-command '("keybinds") nil) (apropos-command '("keybindings") nil) (describe-key-briefly "\347a" nil 1) (describe-key "\347	" 1 nil) (lgrep "server" "* .*" "~/Dropbox/work/org-mode/" nil) (describe-function 'windmove-default-keybindings) (apropos-command '("windmove") nil) (kill-buffer "*Man grep*") (kill-buffer "*grep*") (grep "grep -nH --color -e server hapi.js") (grep "grep -nH -e \"server\" hapi.js") (kill-buffer "*grep*") (switch-to-buffer "*grep*") (grep "grep -nH -e 'arf'") (grep "grep -nH -e \"hapi*\"") (grep "grep -nH -e \"hapi\"") (grep "grep -nH -e hapi*") (grep "grep -nH -e hapi") (grep "grep -nH -e ") (switch-to-buffer "*eshell*") (switch-to-buffer "*Packages*") (switch-to-buffer "hapi.js") (paredit-mode 'toggle) (kill-buffer "emacs.el") (switch-to-buffer "emacs.el") (eldoc-mode 'toggle) (switch-to-buffer "*eshell*") (delete-char 1 nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (switch-to-buffer "hapi.js") (switch-to-buffer "hapi.js") (switch-to-buffer "emacs-todo.org") (color-theme-solarized-dark) (color-theme-charcoal-black) (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (load-theme 'cyberpunk nil nil) (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (command-history) (apropos-command '("command") nil) (apropos-command '("commands") nil) (apropos-command '("narrow") nil) (switch-to-buffer "*eshell*") (describe-key "nn" 1 nil) (ns-toggle-fullscreen) (switch-to-buffer "*eshell*") (kill-buffer "NEWS") (switch-to-buffer "NEWS") (view-emacs-news nil) (emacs-uptime) (eshell-previous-matching-input "ls -p" 1) (eshell-next-matching-input "arf" 1) (switch-to-buffer "*eshell*") (switch-to-buffer "*Customize Group: The Emacs shell*") (describe-variable 'dired-listing-switches) (switch-to-buffer "*eshell*") (eshell nil) (switch-to-buffer "*eshell*") (apropos-command '("alias") nil) (apropos-command '("eshell") nil) (customize-group-other-window "eshell-alias") (customize-group-other-window "eshell-mode") (switch-to-buffer "*Customize Group: The Emacs shell*") (customize-group-other-window "eshell") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (load-theme 'zenburn nil nil) (load-theme 'ze nil nil) (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (eshell nil) (eshell-command) (testx "arf") (testx "arf") (testx "blerg") (testx "arf") (testx) (switch-to-buffer "*eshell*") (switch-to-buffer "*Messages*") (describe-variable 'font-lock-maximum-decoration) (describe-function 'ansi-color-make-color-map) (switch-to-buffer "*eshell*") (describe-variable 'ansi-color-map) (describe-variable 'ansi-color-names-vector) (switch-to-buffer "*eshell*") (kill-buffer "alias") (find-file-at-point) (describe-function 'find-file-at-point) (describe-variable 'eshell-aliases-file) (goto-last-change nil) (switch-to-buffer "hapi.js") (goto-last-change nil) (goto-last-change nil) (align-current) (switch-to-buffer "emacs-todo.org") (package-list-packages nil) (describe-key "" 1 nil) (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*shell*") (customize-group "ansi-colors") (ansi-color-for-comint-mode-on) (ansi-color-for-comint-mode-filter) (switch-to-buffer "*shell*") (ansi-color-for-comint-mode-off) (switch-to-buffer "*eshell*") (apropos-command '("ty-color-mode") nil) (switch-to-buffer "*eshell*") (eshell-insert-buffer-name "*shell*") (kill-buffer "arf") (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (eshell nil) (switch-to-buffer "*shell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*shell*") (customize-group "comint") (switch-to-buffer "*shell*") (dirs) (switch-to-buffer "*shell*") (switch-to-buffer "*scratch*") (lisp-eval-defun) (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Shell*") (customize-group "shell") (switch-to-buffer "*shell*") (shell nil) (switch-to-buffer "emacs-todo.org") (describe-variable 'explicit-shell-file-name) (kill-buffer "*terminal*") (terminal-emulator "*terminal*" "/bin/bash" nil) (kill-buffer "*Shell Command Output*") (shell-command "ls --color=auto --group-directories-first -Gp" nil nil) (kill-buffer "*Shell Command Output*") (shell-command "ls --color=auto --group-directories-first" nil nil) (kill-buffer "*Shell Command Output*") (shell-command "ls" nil nil) (kill-buffer ".bash_history") (kill-buffer "*shell*") (kill-buffer "*terminal*") (switch-to-buffer "org-mode") (describe-function 'setenv) (switch-to-buffer "*Customize Group: Dired*") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "Elevated|SEO.html") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html") (switch-to-buffer "*Customize Group: Dired*") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (describe-variable 'exec-path) (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (customize-group "dired") (describe-variable 'tab-width) (find-file "/Users/anand/Dropbox/work/org-mode/") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (kill-buffer "arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (kill-buffer "org.org") (find-file "/Users/anand/Dropbox/work/org-mode/org.org") (describe-key [f2] 1 nil) (describe-key [f1] 1 nil) (switch-to-buffer "emacs-todo.org") (load-theme 'c nil nil) (apropos-command '("theme") nil) (color-theme-initialize) (find-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (org-src-fontify-buffer) (kill-buffer "*info*") (Info-goto-node "(org)" nil) (info-emacs-manual) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "*Apropos*") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (setenv "PATH" "/usr/local/opt/coreutils/libexec/gnubin:/Users/anand/.rbenv/shims:/usr/local/bin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin" t) (setenv "PATH" "(shell-command-to-string \"source $HOME/.bashrc && printf $PATH\")" t) (clipboard-yank) (getenv "LS_COLORS") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (switch-to-buffer "org-mode") (setenv "LS_COLORS" "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:" t) (getenv "") (apropos-command '("env") nil) (clipboard-yank) (switch-to-buffer "*Customize Group: Dired*") (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "*Customize Group: Dired*") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "work") (kill-buffer "org-mode") (switch-to-buffer "work") (switch-to-buffer "*Customize Group: Dired*") (find-file "/Users/anand/Dropbox/work/org-mode/") (eval-buffer) (find-file "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el") (apropos-command '("emacs") nil) (apropos-command '("reload") nil) (apropos-command '("restart") nil) (apropos-command '("reset") nil) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (switch-to-buffer "*Customize Group: Dired*") (describe-function 'dired-do-load) (dired-do-load nil) (switch-to-buffer "org-mode") (kill-buffer "cover-letter2.txt") (ispell-buffer) (check-ispell-version 1) (switch-to-buffer "cover-letter2.txt") (describe-variable 'ispell-program-name) (check-ispell-version 1) (apropos-command '("ispell") nil) (clipboard-kill-region (region-beginning) (region-end)) (visual-line-mode 'toggle) (clipboard-kill-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/cover-letter2.txt") (kill-buffer "financial1-propsosal.txt") (find-file "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt") (kill-buffer "*info*") (switch-to-buffer "*Help*") (Info-index "visual-line-mode") (switch-to-buffer "emacs-todo.org") (describe-function 'visual-line-mode) (apropos-command '("visual-line-mode") nil) (describe-key "" 1 nil) (switch-to-buffer "emacs-todo.org") (hippie-expand nil) (hippie-expand nil) (hippie-expand nil) (hippie-expand nil) (apropos-command '("hippie") nil) (describe-key "\257" 1 nil) (switch-to-buffer "hapi.js") (bookmark-jump "gls") (find-file "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "*Customize Group: Dired*") (clipboard-yank) (clipboard-yank) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Customize Option: Dired Listing Switches*") (find-file "/Users/anand/") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "Elevated|SEO.html") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html") (kill-buffer "public") (kill-buffer "work") (kill-buffer "org-mode") (switch-to-buffer "*Customize Option: Dired Listing Switches*") (kill-buffer "org-mode") (clipboard-yank) (switch-to-buffer "arf") (switch-to-buffer "org-mode") (rename-buffer "arf" nil) (switch-to-buffer "*Help*") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/") (bookmark-bmenu-list) (describe-key "rb" 1 nil) (clipboard-yank) (switch-to-buffer "index.html") (switch-to-buffer "hapi.js") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/public/index.html") (apropos-command '("split") nil) (comment-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (comment-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "new-notes.org") (switch-to-buffer "responsive-child.css") (switch-to-buffer "notes.org") (switch-to-buffer "Elevated|SEO.org") (switch-to-buffer "notes.org") (eval-buffer) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el") (dired "/Users/anand/Dropbox/work/org-mode/") (clipboard-yank) (kill-buffer "OutlineforAndrewsOnlineMarketingWindow.rtf") (find-file "/Users/anand/Downloads/OutlineforAndrewsOnlineMarketingWindow.rtf") (switch-to-buffer "notes.org") (color-theme-actress) (color-theme-infodoc) (color-theme-high-contrast) (color-theme-simple-1) (color-theme-railscasts) (color-theme-sanityinc-solarized-dark) (apropos-command '("history") nil) (switch-to-buffer "Elevated|SEO.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/she-proposal.txt") (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-yank) (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "Elevated|SEO.org") (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/elevated/jeff-bio.txt") (switch-to-buffer "Elevated|SEO.org") (switch-to-buffer "responsive.css") (switch-to-buffer "responsive-child.css") (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "responsive.css") (clipboard-yank) (switch-to-buffer "responsive-child.css") (clipboard-kill-region (region-beginning) (region-end)) (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "responsive.css") (switch-to-buffer "responsive-child.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/responsive.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/responsive-child.css") (revert-buffer t) (find-file "/Users/anand/Downloads/lh_wordpress_blank_theme/style.css") (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.org") (switch-to-buffer "Elevated|SEO.org<2>") (linum-mode 'toggle) (find-file "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt") (clipboard-kill-region (region-beginning) (region-end)) (org-export-as-html-and-open nil) (flyspell-buffer) (apropos-command '("spell") nil) (checkdoc-ispell) (org-occur "lind" nil) (describe-key-briefly "/" nil 1) (org-narrow-to-subtree) (describe-function 'narrow-to-region) (describe-function 'org-outline-level) (describe-key-briefly "" nil 1) (describe-key-briefly "n" nil 1) (describe-variable 'org-startup-indented) (describe-variable 'ns-control-modifier) (describe-variable 'mac-command-modifier) (describe-variable 'ns-command-modifier) (describe-variable 'ns-option-modifier) (describe-variable 'ns-function-modifier) (recover-file "~/Dropbox/work/org-mode/Elevated|SEO.org") (recover-file "~/Dropbox/work/org-mode/#Elevated|SEO.org#") (org-mode-restart) (clipboard-yank) (clipboard-yank) (switch-to-buffer "Elevated|SEO.org") (dired-other-window "~/Dropbox/work/org-mode/" nil) (describe-key "" 1 nil) (describe-key "e" 1 nil) (clipboard-kill-region (region-beginning) (region-end)) (describe-key "h" 1 nil) (find-file "/Users/anand/Dropbox/work/org-mode/proposals.org") (org-reload nil) (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/proposals.org") (switch-to-buffer "notes.org") (web-mode-indent-line) (switch-to-buffer "index.html") (web-mode-indent-buffer) (switch-to-buffer "elevatedseo.html") (package-list-packages nil) (clipboard-yank) (html-mode) (switch-to-buffer "index.html") (nxml-mode) (comment-region (region-beginning) (region-end) nil) (switch-to-buffer "index.html") (describe-function 'linum-mode) (line-number-mode 'toggle) (apropos-command '("line") nil) (apropos-command '("numbers") nil) (sgml-tag-help "header") (sgml-tag-help "aside") (sgml-tag-help "div") (sgml-tag-help "body") (switch-to-buffer "Sites") (dired-other-window "~/Sites/" nil) (apropos-command '("dired") nil) (apropos-command '("file") nil) (switch-to-buffer "elevatedseo.html") (switch-to-buffer "index.html") (describe-function 'push-mark) (describe-function 'set-mark) (describe-key-briefly [67108896] nil 1) (switch-to-buffer "TUTORIAL") (switch-to-buffer "elevatedseo.html") (apropos-command '("mark") nil) (switch-to-buffer "TUTORIAL") (switch-to-buffer "*Help*") (replace-string "changed" "altered" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (switch-to-buffer "TUTORIAL") (switch-to-buffer "elevatedseo.html") (describe-key "" 1 nil) (apropos-command '("move") nil) (apropos-command '("jump") nil) (apropos-command '("top") nil) (clipboard-yank) (find-file "/Users/anand/Sites/elevatedseo.html") (clipboard-yank) (clipboard-yank) (apropos-command '("search") nil) (describe-key [67108906] 1 nil) (find-file "/Users/anand/Sites/index.html") (eshell nil) (rot13-region (region-beginning) (region-end)) (switch-to-buffer "notes.org") (describe-key "$" 1 nil) (find-file "/Users/anand/Dropbox/work/animal.rb") (kill-buffer "arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/arf.rb") (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (indent-region (region-beginning) (region-end) nil) (clipboard-yank) (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "*Help*") (describe-key "" 1 nil) (switch-to-buffer "accounts.dat") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/accounts.dat") (describe-key [C-down] 1 nil) (describe-key [S-down] 1 nil) (clipboard-yank) (clipboard-yank) (describe-function 'org-display-outline-path) (describe-function 'find-grep) (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "notes.org") (describe-variable 'ido-enable-flex-matching) (apropos-documentation '("flex") nil) (apropos-command '("flex") nil) (redraw-display) (occur "defun" nil) (apropos-command '("occur") nil) (customize-themes) (switch-to-buffer "scratch-emacs.el") (describe-function 'mark-defun) (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (switch-to-buffer "notes.org") (switch-to-buffer "init.el") (iy-go-to-char-backward 1 99) (eval-region (region-beginning) (region-end)) (switch-to-buffer "iy-go-to-char.el") (describe-key "," 1 nil) (describe-key ";" 1 nil) (describe-key "f" 1 nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "iy-go-to-char.el") (dired "~/.emacs.d/my-stuff/" nil) (switch-to-buffer "iy-goto-char.el") (iy-go-to-char 1 99) (describe-key "\355" 1 nil) (switch-to-buffer "scratch-emacs.el") (clipboard-yank) (find-file "/Users/anand/.emacs.d/my-stuff/iy-goto-char.el") (describe-function 'goto-char) (describe-key "rj" 1 nil) (describe-key "k" 1 nil) (describe-key "x" 1 nil) (apropos-command '("rectangle") nil) (rot13-region (region-beginning) (region-end)) (string-rectangle (region-beginning) (region-end) "blerg") (string-rectangle (region-beginning) (region-end) "arf") (switch-to-buffer "notes.org") (switch-to-buffer "*nrepl*") (apropos-command '("encrypt") nil) (apropos-command '("sha") nil) (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (apropos-command '("rot13") nil) (redraw-display) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "*nrepl*") (describe-function 'setq-default) (kill-buffer "electric.el.gz") (customize-group "electricity") (describe-function 'electric-pair-mode) (apropos-command '("electric") nil) (describe-variable 'electric-pair-mode) (describe-key "\360" 1 nil) (describe-key "\356" 1 nil) (switch-to-buffer "scratch-emacs.el") (manual-entry "ls") (apropos-command '("man") nil) (clipboard-yank) (clipboard-yank) (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "init.el") (describe-variable 'nrepl-popup-stacktraces) (eval-expression '(setq nrepl-popup-stacktraces nil) nil) (switch-to-buffer "init.el") (rainbow-delimiters-mode 'toggle) (clipboard-yank) (nrepl-jack-in nil) (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*GNU Emacs*") (switch-to-buffer "*Messages*") (package-list-packages nil) (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (locate-library "color-theme" nil nil t) (switch-to-buffer "snippets-notes.clj") (eval-expression '(setq scroll-margin 2) nil) (nrepl-jack-in nil) (find-file "/Users/anand/Dropbox/work/snippets-notes.clj") (clipboard-yank) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Packages*") (customize-variable 'scroll-margin) (eval-buffer) (switch-to-buffer "init.el") (package-list-packages nil) (package-refresh-contents) (describe-function 'package-refresh-contents) (describe-variable 'load-path) (describe-function 'setcdr) (switch-to-buffer "*Help*") (switch-to-buffer "init.el") (describe-variable 'default-directory) (describe-function 'normal-top-level-add-to-load-path) (switch-to-buffer "conways-game-of-life.clj") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/conways-game-of-life.clj") (kill-buffer "*ielm*") (switch-to-buffer "scratch-emacs.el") (ielm) (clipboard-yank) (redraw-display) (zap-to-char 1 116) (eval-expression '(setq scroll-margin 5) nil) (describe-variable 'scroll-margin) (redraw-display) (indent-rigidly (region-beginning) (region-end) 1) (indent-for-tab-command nil) (describe-function 'indent-for-tab-command) (find-file "/Users/anand/.emacs.d/init.el") (kill-buffer ".clj_completions-long-list") (find-file "/Users/anand/.clj_completions-long-list") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (describe-function 'delete-window) (describe-key "1" 1 nil) (switch-to-buffer "emacs-todo.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (align-regexp 115 115 "\\(\\s-*\\)" 1 1 nil) (spook) (switch-to-buffer "emacs-todo.org") (bookmark-jump "notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (find-file "/Users/anand/.emacs.d/custom.el") (find-file "/Users/anand/.emacs.d/init.el") (customize-variable 'bookmark-save-flag) (customize-variable 'bookmark-default-file) (bookmark-jump "org-refile-last-stored") (describe-key "rm" 1 nil) (describe-key "r " 1 nil) (jump-to-register 97 nil) (switch-to-buffer "emacs-todo.org") (point-to-register 97 nil) (describe-key "" 1 nil) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (vc-dir "/Users/anand/Dropbox/work/org-mode/" nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (describe-function 'imenu) (describe-key "" 1 nil) (describe-key [C-M-down] 1 nil) (describe-key "\225" 1 nil) (describe-key "\230" 1 nil) (describe-function 'process-status) (w3m-browse-url "http://duckduckgo.com" nil) (eval-expression '(autoload 'w3m-browse-url "w3m" "arf" t) nil) (eval-expression '(autoload 'w3m-load) nil) (describe-function 'autoload) (switch-to-buffer "init.el") (switch-to-buffer "new-notes.org") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "new-notes.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "new-notes.org") (switch-to-buffer "custom.el") (customize-variable 'org-default-notes-file) (find-file "/Users/anand/.emacs.d/custom.el") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (switch-to-buffer "*Customize Option: Org Capture Templates*") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "new-notes.org") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Customize Option: Org Capture Templates*") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "*Customize Option: Org Capture Templates*") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "emacs-todo.org") (clipboard-yank) (find-file "/Users/anand/.emacs.d/init.el") (describe-key "c" 1 nil) (switch-to-buffer "emacs-todo.org") (describe-function 'org-capture) (describe-variable 'org-version) (describe-variable 'org-default-notes-file) (describe-variable 'org-drawers) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/init.el") (info-lookup-symbol "C-h" 'help-mode) (describe-input-method nil) (switch-to-buffer "*Help*") (ns-popup-color-panel) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/.emacs.d/init.el") (describe-function 'org-ctrl-c-star) (describe-key "*" 1 nil) (describe-key "" 1 nil) (describe-key [228] 1 nil) (describe-key [160] 1 nil) (switch-to-buffer "emacs-todo.org") (describe-key-briefly "" nil 1) (switch-to-buffer "emacs-todo.org") (Info-goto-emacs-key-command-node "") (describe-key "a" 1 nil) (describe-variable 'org-mode-map) (describe-variable 'mode-specific-map) (describe-function 'ESC-prefix) (describe-function 'Control-X-prefix) (describe-key "" 1 nil) (apropos-command '("keymap") nil) (describe-function 'define-prefix-command) (describe-function 'define-key) (describe-variable 'org-agenda-keymap) (describe-key "" 1 nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (describe-variable 'ctl-x-map) (describe-function 'global-set-key) (describe-variable 'global-map) (apropos-command '("key-map") nil) (describe-function 'define-key-after) (customize-group "org") (redraw-display) (find-file "/Users/anand/.emacs.d/init.el") (global-centered-cursor-mode 'toggle) (eval-expression '(require 'centered-cursor-mode) nil) (find-file "/Users/anand/.emacs.d/init.el") (eval-buffer) (find-file "/Users/anand/.emacs.d/init.el" t) (find-file "/Users/anand/.emacs.d/custom.el") (centered-cursor-mode 'toggle) (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (switch-to-buffer "*Messages*") (eval-buffer) (indent-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (describe-function 'add-hook) (describe-variable 'after-init-hook) (global-visual-line-mode 'toggle) (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/custom.el") (describe-variable 'initial-frame-alist) (describe-function 'frame-notice-user-settings) (describe-variable 'frame-notice-user-settings) (describe-function 'ns-initialize-window-system) (describe-variable 'window-system-initialization-alist) (customize-variable 'package-load-list) (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (find-file "/Users/anand/.emacs.d/init.el") (eval-expression '(require 'color-theme-actress) nil) (switch-to-buffer "*Messages*") (find-file "~/.emacs.d/custom.el" t) (find-file "~/.emacs.d/init.el" t) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "custom.el") (switch-to-buffer "emacs-todo.org") (customize-variable 'default-frame-alist) (customize-apropos '("cursor-color") nil) (customize-apropos-faces "background-color") (customize-apropos '("background-color") nil) (switch-to-buffer "custom.el") (customize-apropos '("background") nil) (describe-function 'ns-font-name) (describe-key [24 67108907] 1 nil) (describe-function 'custom-set-faces) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Face: Default*") (switch-to-buffer "*Messages*") (describe-variable 'default-frame-alist) (switch-to-buffer "*Messages*") (list-faces-display nil) (apropos-command '("height") nil) (apropos-command '("pixels") nil) (apropos-command '("fontsize") nil) (apropos-command '("size") nil) (apropos-command '("(font" "size)") nil) (apropos-command '("font" "size") nil) (apropos-command '("font") nil) (switch-to-buffer "*Messages*") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/automata.org") (org-indent-mode 'toggle) (kill-buffer "stylesheet.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/stylesheet.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/literate-example.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.org") (switch-to-buffer "*Messages*") (switch-to-buffer "*Customize Group: Auto Save*") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (switch-to-buffer "*Messages*") (switch-to-buffer "*Customize Group: Auto Save*") (redraw-display) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.html") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.html") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (customize-group-other-window "auto-save") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Messages*") (eval-buffer) (eval-buffer) (eval-expression '(require 'blink-colored-cursor) nil) (eval-expression '(require 'blink-colored-cursorarf) nil) (eval-buffer) (eval-expression '(directory-files my-stuff t) nil) (describe-function 'add-to-list) (eval-expression 'load-path nil) (eval-expression '(add-to-list 'foo 'wrum) nil) (eval-expression '(add-to-list 'foo 'ruf) nil) (eval-expression '(add-to-list foo 'ruf) nil) (eval-expression '(defvar foo '(arf bark)) nil) (eval-expression '(add-to-list '(arf bark) 'ruf) nil) (eval-expression '(list 'arf 'bark) nil) (eval-expression '(add-to-list '(list 'arf 'bark) 'ruf) nil) (eval-expression '(add-to-list (list 'arf 'bark) 'ruf) nil) (describe-key "0" 1 nil) (describe-key "" 1 nil) (kill-buffer "blink-colored-cursor.el") (clipboard-yank) (eval-expression '(directory-files dotfiles-dir t "\\w+") nil) (eval-expression '(directory-files dotfiles-dir t) nil) (eval-expression '(directory-files dotfiles-dir) nil) (eval-expression '(directory-files) nil) (describe-function 'directory-files) (describe-variable 'directory-files-no-dot-files-regexp) (describe-function 'dolist) (describe-variable 'user-emacs-directory) (describe-function 'menu-bar-mode) (describe-function 'fboundp) (describe-function 'provide) (find-file "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el") (write-region (region-beginning) (region-end) "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el" nil nil nil 1) (describe-function 'write-region) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Customize Apropos*") (comment-region (region-beginning) (region-end) nil) (describe-variable 'ring-bell-function) (customize-variable-other-window 'kill-read-only-ok) (eval-expression '(concat dotfiles-dir "my-stuff/") nil) (eval-expression '(expand-file-name "my-stufffsd" dotfiles-dir) nil) (eval-expression '(expand-file-name "my-stuff" dotfiles-dir) nil) (eval-expression '(concat dotfiles-dir "my-stuff") nil) (set-fill-column 0) (set-fill-column 95) (describe-variable 'fill-column) (describe-function 'global-linum-mode) (switch-to-buffer "scratch-emacs.el") (describe-key "" 1 nil) (switch-to-buffer "init.el") (redraw-display) (toggle-word-wrap nil) (redraw-display) (toggle-word-wrap nil) (toggle-word-wrap nil) (toggle-word-wrap nil) (toggle-word-wrap nil) (describe-function 'toggle-word-wrap) (toggle-word-wrap nil) (redraw-display) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "init.el") (describe-key "q" 1 nil) (switch-to-buffer "emacs-todo.org") (eval-expression '(kbd "C-c q") nil) (eval-expression '(kbd "C-c") nil) (describe-function 'kbd) (switch-to-buffer "init.el") (quit-other-window) (describe-key "" 1 nil) (describe-key "q" 1 nil) (eval-expression '(command-execute "q") nil) (eval-expression '(command-execute) nil) (eval-expression '(insert-char (string-to-char "q") 1) nil) (eval-expression '(string-to-char "q") nil) (eval-expression '(insert-char \`q\` 1) nil) (eval-expression '(insert-char q 1) nil) (eval-expression '(self-insert-command <q>) nil) (eval-expression '(self-insert-command \064) nil) (eval-expression '(self-insert-command "q") nil) (self-insert-command 1) (self-insert-command 1) (self-insert-command 1) (describe-key "q" 1 nil) (eval-expression '(insert-char 'q 1) nil) (eval-expression '(insert-char 'q '1) nil) (eval-expression '(insert-char "q" 1) nil) (eval-expression '(insert-char "q") nil) (describe-function 'insert-char) (eval-expression 'brar nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "scratch-emacs.el") (other-window 1) (other-window 1) (other-window 0) (describe-function 'other-window) (describe-function 'expand-file-name) (redraw-display) (switch-to-buffer "init.el") (redraw-display) (w3m-goto-url "http://www.accuweather.com/en/us/omaha-ne/68124/weather-forecast/349291" nil nil) (w3m-browse-url "wunderground.com" nil) (w3m-goto-url "http://www.google.com/search?btnI=I%27m+Feeling+Lucky&ie=UTF-8&oe=UTF-8&q=duckduckgo.com" nil nil) (w3m-goto-url "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" nil nil) (w3m-goto-url "http://wunderground.com" nil nil) (switch-to-buffer "*w3m*") (apropos-command '("scroll") nil) (apropos-command '("margin") nil) (describe-key "" 1 nil) (describe-function 'overwrite-mode) (overwrite-mode 'toggle) (describe-variable 'overwrite-mode) (apropos-command '("overstrike") nil) (mouse-avoidance-mode 'exile) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (kill-buffer "emacs.el") (apropos-command '("redraw") nil) (apropos-command '("refresh") nil) (switch-to-buffer "*w3m*") (recover-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (switch-to-buffer "notes.org") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Apropos*") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (kill-buffer ".notes") (find-file "/Users/anand/.notes") (switch-to-buffer "emacs-todo.org") (org-remember nil) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (customize-apropos '("history") nil) (switch-to-buffer "init.el") (switch-to-buffer "*w3m*") (w3m "duckduckgo.com" nil t) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Help*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (describe-key [f4] 1 nil) (switch-to-buffer "*Customize Option: Ido Ignore Buffers*") (describe-function 'ido-switch-buffer) (switch-to-buffer "init.el") (describe-key "b" 1 nil) (switch-to-buffer "emacs-todo.org") (eval-expression '(concat dotfiles-dir "arf") nil) (eval-expression 'dotfiles-dir nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (color-theme-monokai) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org")))
(setq regexp-history '("defun" "clojure"))
(setq w3m-input-url-history '("http://www.accuweather.com/en/us/omaha-ne/68124/weather-forecast/349291" "duckduckgo.com" "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "http://wunderground.com" "http://www.aviationweather.gov/adds/metars/?station_ids=koma&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "http://stackoverflow.com/questions/892378/how-do-i-fix-the-cursor-to-the-middle-of-the-screen-in-emacs-so-that-the-page-m" "http://www.50ply.com/blog/2012/08/13/introducing-impatient-mode/" "http://50ply.com" "http://bing.com" "http://adamspiers.org/computing/elisp/smooth-scrolling.el" "http://www.emacswiki.org/emacs/SiteMap" "http://ukmac.net/2010/12/08/reeder-for-osx-draft-3/" "http://madeatgloria.com/brewery/silvio/reeder" "#" "http://#www.google.com/reader/m/view/" "http://www.google.com/reader" "http://google.com" "http://www.google.com/reader/m/view" "https://m.pinboard.in/u:madgnome/" "http://pinboard.in" "http://lifehacker.com/" "HOME" "Home" "about:" "http://www.emacswiki.org/emacs/download/ring%2b.el" "http://www.emacswiki.org/cgi-bin/wiki/ring+.el" "http://www.google.com/cse?cx=004774160799092323420:6-ff2s0o6yi&q=ring%2B&sa=Search" "http://emacswiki.org" "http://duckduckgo.com/lite" "http://duckduckgo.com" "http://www.emacswiki.org/emacs/Icicles_-_Libraries" "http://www.emacswiki.org/emacs/icicles-install.el"))
(setq face-name-history '("hl-line"))
(setq Info-search-history '("bookm" "ido" "session" "icicles" "ido" "switching" "vip" "prefix" "keymap" "cookie" "w3m" "keymap" "completion" "icicles"))
(setq w3m-bookmark-section-history '("Weather" "Emacs" "a"))
(setq extended-command-history '("customize-group" "package-list-packages-no-fetch" "eshell" "color-theme-comidia" "man" "shell-command" "rgrep" "lgrep" "grep" "web-mode" "manual-entry" "color-theme-gruber-darker" "ansi-term" "cd" "getenv" "recover-session" "shell-mode" "describe-bindings" "disable-paredit-mode" "paredit-mode" "eldoc-mode" "delete-char" "color-theme-solarized-dark" "color-theme-charcoal-black" "load-theme" "command-history" "ns-toggle-fullscreen" "view-emacs-news" "emacs-uptime" "customize-group-other-window" "eshell-command" "testx" "find-file-at-point" "goto-last-change" "align-current" "package-list-packages" "ansi-color-for-comint-mode-on" "ansi-color-for-comint-mode-filter" "ansi-color-for-comint-mode-off" "dirs" "lisp-eval-defun" "shell" "terminal-emulator" "setenv" "color-theme-initialize" "org-src-fontify-buffer" "info-emacs-manual" "clipboard-yank" "eval-buffer" "dired-do-load" "ispell-buffer" "check-ispell-version" "clipboard-kill-region" "visual-line-mode" "info-lookup-file" "info-lookup-symbol" "hippie-expand" "rename-buffer" "bookmark-bmenu-list" "comment-region" "kill-buffer" "narrow-to-region" "color-theme-actress" "color-theme-infodoc" "color-theme-high-contrast" "color-theme-simple-1" "color-theme-railscasts" "color-theme-sanityinc-solarized-dark" "revert-buffer" "rot13-region" "linum-mode" "org-export-as-html-and-open" "flyspell-buffer" "checkdoc-ispell" "org-narrow-to-subtree" "recover-file" "org-mode-restart" "dired-other-window" "org-reload" "web-mode-indent-line" "web-mode-indent-buffer" "html-mode" "nxml-mode" "line-number-mode" "replace-string" "tags-search" "indent-region" "ping" "redraw-display" "customize-themes" "eval-region" "dired" "rainbow-delimiters-mode" "nrepl-jack-in" "locate-library" "customize-variable" "package-refresh-contents" "ielm" "indent-rigidly" "indent-for-tab-command" "align-regexp" "spook" "imenu" "w3m-browse-url" "ns-popup-color-panel" "global-centered-cursor-mode" "centered-cursor-mode" "global-visual-line-mode" "customize-apropos" "customize-apropos-faces" "set-default-font" "list-faces-display" "org-indent-mode" "write-region" "customize-variable-other-window" "toggle-word-wrap" "customize-face-other-window" "quit-other-window" "self-insert-command" "other-window" "overwrite-mode" "mouse-avoidance-mode" "org-remember" "w3m" "color-theme-monokai" "switch-to-buffer" "metar-report" "weather-report" "color-theme-monokai"))
(setq file-name-history '("/Users/anand/Dropbox/work/src/leaderboard/leaderboard.js" "/Users/anand/Dropbox/work/src/leaderboard/leaderboard.css" "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el" "/Users/anand/.emacs.d/init.el" "~/Dropbox/work/src/leaderboard/" "/Users/anand/Dropbox/work/org-mode/" "~/Dropbox/work/org-mode/" "/Users/anand/Dropbox/work/org-mode/bashrc.sh" "/Users/anand/.bashrc" "/Users/anand/Dropbox/work/org-mode/emacs.el" "/Users/anand/Dropbox/work/org-mode/emacs-todo.org" "~/.emacs.d/eshell/alias" "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html" "/Users/anand/Dropbox/work/org-mode/hapi.js" "/Users/anand/Dropbox/work/org-mode/arf.rb" "/Users/anand/Dropbox/work/org-mode/notes.org" "/Users/anand/Dropbox/work/org-mode/org.org" "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el" "/Users/anand/Dropbox/work/cover-letter2.txt" "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt" "/Users/anand/" "/Users/anand/Dropbox/work/org-mode/public/index.html" "/Users/anand/Downloads/OutlineforAndrewsOnlineMarketingWindow.rtf" "~/Dropbox/work/elevated/jeff-bio.txt" "~/Dropbox/work/elevated/she-proposal.txt" "/Users/anand/Dropbox/work/elevated/she-proposal.txt" "/Users/anand/Dropbox/work/elevated/jeff-bio.txt" "/Users/anand/Dropbox/work/elevated/responsive.css" "/Users/anand/Dropbox/work/elevated/responsive-child.css" "/Users/anand/Downloads/lh_wordpress_blank_theme/style.css" "/Users/anand/Dropbox/work/org-mode/new-notes.org" "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.org" "~/Dropbox/work/org-mode/Elevated|SEO.org" "~/Dropbox/work/org-mode/#Elevated|SEO.org#" "/Users/anand/Dropbox/work/org-mode/proposals.org" "~/Sites/" "/Users/anand/Sites/elevatedseo.html" "/Users/anand/Sites/index.html" "/Users/anand/Dropbox/work/animal.rb" "/Users/anand/Dropbox/work/org-mode/accounts.dat" "~/.emacs.d/my-stuff/iy-go-to-char.el" "~/.emacs.d/my-stuff/" "/Users/anand/.emacs.d/my-stuff/iy-goto-char.el" "/Users/anand/Dropbox/work/scratch-emacs.el" "/Users/anand/Dropbox/work/snippets-notes.clj" "/Users/anand/Dropbox/work/conways-game-of-life.clj" "/Users/anand/.clj_completions-long-list" "/Users/anand/.emacs.d/custom.el" "~/.emacs.d/custom.el" "~/.emacs.d/init.el" "/Users/anand/Dropbox/work/org-mode/automata.org" "/Users/anand/Dropbox/work/org-mode/stylesheet.css" "/Users/anand/Dropbox/work/org-mode/literate-example.org" "/Users/anand/Dropbox/work/org-mode/emacs-todo.html" "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el" "/Users/anand/.notes" "/Users/anand/.emacs.d/metar-report.el" "/Users/anand/Dropbox/work/org-mode/arf.html" "/Users/anand/Dropbox/work/cursor-chg.el" "/Users/anand/.emacs" "/Users/anand/.emacs" "/Users/anand/Dropbox/work/org-mode/emacs" "/Users/anand/Dropbox/work/org-mode/arf.pl" "/Users/anand/.emacs" "/Users/anand/.lein/plugins/lein-tarsier-0.9.1.jar" "~/.emacs.d/anand/rainbow-delimiters.el" "/Users/anand/.emacs"))
(setq minibuffer-history '("rebind" "eshell" "customize" "alt-modifier" "alt" "ns-" "option" "prefer" "rgrep" "/bin/bash" "color" "syntax" "describe-bindings" "grep" "keybinding" "define-key" "define key" "definekey" "bind key" "keybinds" "keybindings" "windmove-default-keybindings" "windmove" ";" "cyberpunk" "command" "commands" "narrow" "24.2" "dired-listing-switches" "alias" "eshell-alias" "eshell-mode" "zenburn" "ze" "arf" "blerg" "font-lock-maximum-decoration" "ansi-color-make-color-map" "ansi-color-map" "ansi-color-names-vector" "find-file-at-point" "eshell-aliases-file" "ansi-colors" "ty-color-mode" "comint" "shell" "explicit-shell-file-name" "setenv" "exec-path" "dired" "tab-width" "c" "theme" "(org)" "env" "emacs" "reload" "restart" "reset" "dired-do-load" "meditation" "meditiation" "telematics" "javascript" "ispell-program-name" "ispell" "visual-line-mode" "hippie" "gls" "split" "history" "Jeff Fox Bio" "simple health exchange proposal" "spell" "Regarding Elevated|SEO" "lind" "narrow-to-region" "org-outline-level" "org-startup-indented" "ns-control-modifier" "mac-command-modifier" "ns-command-modifier" "ns-option-modifier" "ns-function-modifier" "linum-mode" "line" "numbers" "file" "push-mark" "set-mark" "mark" "move" "jump" "top" "search" "org-display-outline-path" "find-grep" "ido-enable-flex-matching" "flex" "occur" "mark-defun" "goto-char" "rectangle" "encrypt" "sha" "rot13" "setq-default" "electricity" "electric-pair-mode" "electric" "man" "nrepl-popup-stacktraces" "color-theme" "scroll-margin" "package-refresh-contents" "load-path" "setcdr" "default-directory" "normal-top-level-add-to-load-path" "indent-for-tab-command" "delete-window" "emacs-todo" "notes.org" "custom.el" "init.el" "bookmark-save-flag" "bookmark-default-file" "imenu" "process-status" "http://duckduckgo.com" "autoload" "org-default-notes-file" "org-capture" "org-version" "org-drawers" "org-ctrl-c-star" "org-mode-map" "mode-specific-map" "ESC-prefix" "Control-X-prefix" "keymap" "define-prefix-command" "org-agenda-keymap" "ctl-x-map" "global-set-key" "global-map" "key-map" "define-key-after" "org" "add-hook" "after-init-hook" "initial-frame-alist" "frame-notice-user-settings" "ns-initialize-window-system" "window-system-initialization-alist" "package-load-list" "default-frame-alist" "cursor-color" "background-color" "background" "ns-font-name" "custom-set-faces" "height" "pixels" "fontsize" "size" "(font size)" "font size" "font" "auto-save" "add-to-list" "directory-files" "directory-files-no-dot-files-regexp" "dolist" "user-emacs-directory" "menu-bar-mode" "fboundp" "provide" "write-region" "ring-bell-function" "kill-read-only-ok" "0" "95" "fill-column" "global-linum-mode" "toggle-word-wrap" "kbd" "insert-char" "other-window" "expand-file-name" "weather in omaha" "wunderground.com" "wunderground" "scroll" "margin" "overwrite-mode" "overstrike" "exile" "redraw" "refresh" "ido-switch-buffer" "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "KMLE" "klme" "kmle" "indent-to-left-margin" "Omaha, NE" "omaha ne" "omaha" "weather-report" "68114" "load-file" "data-directory" "stringp" "weather" "color-theme-directory" "mouse-avoidance-mode" "org-shiftright" "centered-cursor" "auto-window-vscroll" "wrap" "scroll-error-top-bottom" "banish"))
(setq buffer-name-history '("*eshell*" "*Customize Group: The Emacs shell*" "*Help*" "*scratch*" "*Messages*" "*Customize Group: Environment*" "custom.el" "*Customize Group: Ns*" "init.el" "*Customize Group: Emacs*" ".meteor" "*ansi-term*" "org-mode" ".saves-*" ".saves-61616-anands-mbp.local~" "*Packages*" "*Man grep*" "*grep*" "hapi.js" "emacs.el" "emacs-todo.org" "NEWS" "alias" "*shell*" "*Customize Group: Ansi Colors*" "arf" "*Customize Group: Shell*" "*terminal*" "*Shell Command Output*" ".bash_history" "*Customize Group: Dired*" "Elevated|SEO.html" "arf.rb" "org.org" "*info*" "*Apropos*" "work" "cover-letter2.txt" "financial1-propsosal.txt" "*Customize Option: Dired Listing Switches*" "public" "index.html" "new-notes.org" "responsive-child.css" "notes.org" "Elevated|SEO.org" "OutlineforAndrewsOnlineMarketingWindow.rtf" "responsive.css" "Elevated|SEO.org<2>" "proposals.org" "elevatedseo.html" "Sites" "TUTORIAL" "accounts.dat" "scratch-emacs.el" "iy-go-to-char.el" "iy-goto-char.el" "*nrepl*" "electric.el.gz" "*GNU Emacs*" "snippets-notes.clj" "conways-game-of-life.clj" "*ielm*" ".clj_completions-long-list" "*Customize Option: Org Capture Templates*" "*Customize Face: Default*" "stylesheet.css" "*Customize Group: Auto Save*" "emacs-todo.html" "blink-colored-cursor.el" "*Customize Apropos*" "*w3m*" ".notes" "*Customize Option: Ido Ignore Buffers*" "metar-report.el" "weather.el" "*Color Theme Selection*" "*Custom Themes*"))
(setq yes-or-no-p-history '("yes" "y" "no" "no" "no"))
