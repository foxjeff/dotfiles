;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(markdown-reference-label-history calc-alg-entry-history history-list evil-ex-history woman-topic-history regexp-search-ring ert--selector-history dired-shell-command-history coding-system-history history grep-files-history grep-regexp-history grep-history setenv-history read-envvar-name-history sgml-tag-history Man-topic-history info-lookup-history shell-command-history w3m-weather-input-history read-expression-history org-refile-history org-table-formula-history minibuffer-history-search-history org-tags-history org-read-date-history string-rectangle-history input-method-history query-replace-history tmphist set-variable-value-history w3m-search-engine-history ido-file-history ido-buffer-history iswitchb-history w3m-bookmark-title-history imenu--history-list bookmark-history search-ring command-history regexp-history w3m-input-url-history face-name-history Info-search-history w3m-bookmark-section-history extended-command-history file-name-history minibuffer-history buffer-name-history yes-or-no-p-history))
(setq markdown-reference-label-history '("ilf"))
(setq calc-alg-entry-history '("12/9 =>" "$+$^2" "sqrt(2*4+1)" "$+1" "2*4" "3 4" "2+3*4*5/6*7^8-9" "2+3*4*5/8-9" "2+3"))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1)) #("help revert" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("revert" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("help" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4))))
(setq woman-topic-history '("ack" "textutil" "git-add" "git" "npm" "ls"))
(setq regexp-search-ring '("context" "nd" "of" "smart-" "interactive" "command" "-buffer" "^>" "^D" "cochin" "\\_<Lucida\\_>" "ital" "\\_<text-decoration\\_>" "decor" "yeoman" "ling"))
(setq ert--selector-history '("foo"))
(setq dired-shell-command-history '("open -a Skim" "ls -lu" "ls -l" "lotr"))
(setq coding-system-history '("utf-8-emacs-mac" "utf-8-mac" "utf-16"))
(setq grep-files-history '("all"))
(setq grep-regexp-history '("\"Session\"" "\"function (key,value)\"" "\"function(key,value)\"" "\"Session.set\"" "server"))
(setq grep-history '("grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo  -nH -e \\\"Session.set\\\" * .*" "grep -nH -e \"Session.set\" *" "grep -nH -e \"Session.set\" ./" "grep -nH -e \"Session.set\"" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e server hapi.js" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e --color server" "grep  --exclude=.\\#\\* --exclude=\\*.o --exclude=\\*\\~ --exclude=\\*.bin --exclude=\\*.lbin --exclude=\\*.so --exclude=\\*.a --exclude=\\*.ln --exclude=\\*.blg --exclude=\\*.bbl --exclude=\\*.elc --exclude=\\*.lof --exclude=\\*.glo --exclude=\\*.idx --exclude=\\*.lot --exclude=\\*.fmt --exclude=\\*.tfm --exclude=\\*.class --exclude=\\*.fas --exclude=\\*.lib --exclude=\\*.mem --exclude=\\*.x86f --exclude=\\*.sparcf --exclude=\\*.dfsl --exclude=\\*.pfsl --exclude=\\*.d64fsl --exclude=\\*.p64fsl --exclude=\\*.lx64fsl --exclude=\\*.lx32fsl --exclude=\\*.dx64fsl --exclude=\\*.dx32fsl --exclude=\\*.fx64fsl --exclude=\\*.fx32fsl --exclude=\\*.sx64fsl --exclude=\\*.sx32fsl --exclude=\\*.wx64fsl --exclude=\\*.wx32fsl --exclude=\\*.fasl --exclude=\\*.ufsl --exclude=\\*.fsl --exclude=\\*.dxl --exclude=\\*.lo --exclude=\\*.la --exclude=\\*.gmo --exclude=\\*.mo --exclude=\\*.toc --exclude=\\*.aux --exclude=\\*.cp --exclude=\\*.fn --exclude=\\*.ky --exclude=\\*.pg --exclude=\\*.tp --exclude=\\*.vr --exclude=\\*.cps --exclude=\\*.fns --exclude=\\*.kys --exclude=\\*.pgs --exclude=\\*.tps --exclude=\\*.vrs --exclude=\\*.pyc --exclude=\\*.pyo -i -nH -e server * .*" "grep -nH --color -e server hapi.js" "grep -nH -e \"server\" hapi.js" "grep -nH -e 'arf'" "grep -nH -e \"hapi*\"" "grep -nH -e \"hapi\"" "grep -nH -e hapi*" "grep -nH -e hapi" "grep -nH -e "))
(setq setenv-history '("/usr/local/opt/coreutils/libexec/gnubin:/Users/anand/.rbenv/shims:/usr/local/bin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin" "(shell-command-to-string \"source /Users/anand/.bashrc && printf /usr/bin:/bin:/usr/sbin:/sbin\")" "(shell-command-to-string \"source $HOME/.bashrc && printf $PATH\")" "/usr/bin:/bin:/usr/sbin:/sbin" "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:"))
(setq read-envvar-name-history '("PATH" "LS_COLORS"))
(setq sgml-tag-history '("header" "aside" "div" "body"))
(setq Man-topic-history '("ack" "textutil" "git-add" "git" "npm" "ls"))
(setq info-lookup-history '("C-h"))
(setq shell-command-history '("open -a Marked" "pwd" "uptime " "open -a Skim" "echo $PATH" "ls -l" "open" "ls --color=auto --group-directories-first -Gp" "ls" "lotr" "grep -r -e \"function (key,value)\" .meteor/*" "grep -r -e \"Session\" .meteor/*" "grep -r -e \"Session\" ./*" "grep -r -e \"Session\" ../*" "ls --color=auto --group-directories-first"))
(setq read-expression-history '("(require 'orgmode)" "(require 'org-mode)" "(require 'dash)" "(setq smooth-scroll-margin 13)" "(setq smooth-scroll-margin 27)" "(setq tab-width 4)" "(kill-buffer(window-buffer(next-window)))" "(buffer-live-p (get-buffer \"software-ideas-other.mdx\"))" "(buffer-live-p (get-buffer \"software-ideas-other.md\"))" "(buffer-live-p (get-buffer \"*Backtrace*\"))" "(buffer-live-p (get-buffer \"*Help*\"))" "(buffer-live-p (get-buffer '*Help*))" "(buffer-live-p (get-buffer *Help*))" "(buffer-live-p '*Help*)" "(message buffer-name)" "(message 'buffer-name)" "message buffer-name" "buffer-name" "(buffer-live-p 'software-ideas-other.md)" "(buffer-live-p 'software-ideas-other.md')" " (define-key isearch-mode-map [(control h)] 'isearch-mode-help)" "(setq tab-width 2)" "(require 'eshell)" "(eshell-kill-hook nil)" "eshell-resume-command" "(setq key-chord-two-keys-delay 0.5)" "(evil-leader/set-key \"e\" 'find-file)" "(evil-leader/set-key \"e\" 'file-file)" "(require 'evil-leader)" "(key-chord-define evil-insert-state-map \"jj\" 'evil-normal-state)" "(require 'key-chord)" "(key-chord-define-global evil-insert-state-map \"jj\" 'evil-normal-state)" "(or 'nil -1)" "(or 0 -1)" "(or 1 -1)" "(getenv \"PATH\")" "(require 'js2-mode)" "(el-get 'sync)" "(load \"el-get\")" "(require 'el-get)" "(set-face-attribute 'default nil :font \"DejaVu Sans Mono-13\")" "(set-cursor-color)" "(set-face-attribute 'default nil :font \"DejaVu Sans Mono-12\")" "(require 'hahahaha nil t)" "(join-line -1)" "(require 'hahahaha)" "(setq indent-tabs-mode nil)" "(require 'smooth-scrolling)" "(setq truncate-lines nil)" "(setq truncate-lines t)" "(set truncate-lines t)" "(prefer-coding-system 'utf-8)" "prefer-coding-system 'utf-8" "prefer" "major-mode" "(equal-major-mode 'org-mode)" "(concat \"huckleberry\" (expand-file-name \"arf\" user-emacs-directory))" "(concat \"huckleberry\" expand-file-name \"arf\" user-emacs-directory)" "(expand-file-name \"arf\" user-emacs-directory)" "(autoload 'js2-mode \"js2-mode\" nil t)" "(car (thing-at-point 'symbol))" "(thing-at-point 'symbol)" "(message arf)" "(message 'arf)" "(thing-at-point 'arf)" "(require 'web-mode)" "(require 'manoj-colors)" "(require 'color-theme-manoj)" "(require 'color-theme-leuven)" "(require 'color-theme)" "(require 'color-theme-leuven.el)" "(windmove-default-keybindings 'ctrl)" "(+ 1 2)" "(setq nrepl-popup-stacktraces nil)" "(setq scroll-margin 2)" "(setq scroll-margin 5)" "(autoload 'w3m-browse-url \"w3m\" \"arf\" t)" "(autoload 'w3m-load)" "(require 'centered-cursor-mode)" "(require 'color-theme-actress)" "(require 'blink-colored-cursor)" "(require 'blink-colored-cursorarf)" "(directory-files my-stuff t)" "load-path" "(add-to-list 'foo 'wrum)" "(add-to-list 'foo 'ruf)" "(add-to-list foo 'ruf)" "(defvar foo '(arf bark))" "(add-to-list '(arf bark) 'ruf)" "(list 'arf 'bark)" "(add-to-list '(list 'arf 'bark) 'ruf)" "(add-to-list (list 'arf 'bark) 'ruf)" "(directory-files dotfiles-dir t \"\\\\w+\")" "(directory-files dotfiles-dir t)" "(directory-files dotfiles-dir)" "(directory-files)" "(concat dotfiles-dir \"my-stuff/\")" "(expand-file-name \"my-stufffsd\" dotfiles-dir)" "(expand-file-name \"my-stuff\" dotfiles-dir)" "(concat dotfiles-dir \"my-stuff\")" "(kbd \"C-c q\")" "(kbd \"C-c\")" "(command-execute \"q\")" "(command-execute)" "(insert-char (string-to-char \"q\") 1)" "(string-to-char \"q\")" "(insert-char \\`q\\` 1)" "(insert-char q 1)" "(self-insert-command <q>)" "(self-insert-command \\064)" "(self-insert-command \"q\")" "(insert-char \\q 1)" "(insert-char 'q 1)" "(insert-char 'q' 1)" "(insert-char \"q\" 1)" "(insert-char \"q\")" "brar" "(concat dotfiles-dir \"arf\")" "dotfiles-dir" "(stringp 21)" "(stringp \"21\")" "(stringp \"/Users/anand/.emacs.d/color-themes/\")" "(stringp \"/Users/anand/.emacs.d/\")" "(stringp \"/Users/anand\")" "(stringp \"Arf\")" "(pp load-path)" "(require 'smooth-scroll)" "(setq auto-window-vscroll nil)" "(pp blink-cursor-colors)" "(point)" "(point-at-eol)" "(point)" "file-name-directory"))
(setq org-refile-history '("My own running app"))
(setq org-table-formula-history '("$3/$4;%.1f" ";%.1f" "\"\"" "$3/$4;%.1f" "$3/$4"))
(setq minibuffer-history-search-history '("lotr" "erpa" "ls -p" "arf"))
(setq org-read-date-history '("   " "    " "+1    "))
(setq string-rectangle-history '(";;" "!=" " " "  " "odd" ".0;" ".0" "blerg." "blerg" "arf" ";" ";arf" "arg"))
(setq query-replace-history '("altered" "changed"))
(setq set-variable-value-history '("99" "1" "10000" "9999" "1" "99" "5"))
(setq ido-file-history '("Typing Tones.txt" "Multi-Dimensional Composition.txt" "scratch-emacs.el" "." "whiteboard2-theme.el" "list.md" "fasd.sh" "a.txt" "info.php" "httpd.conf" "anand.conf" "php52.rb" "kevin-chat.txt" "sq.html" "github.css" "init.el" nil "custom.el" ".inputrc" "notes.org" "notes-old.org" "new-notes.org" "emacs-todo.org" "ng-stuff.js" "alias" "Seth Quotes.md" "bb-boilerplate.html" "software-ideas-other.md" "blerg.md" "everwatch2.rb" "Seth Quotes.txt" "readme.md" "README.md" "cover-letter-hayneedle.txt" "cover-letter-phenomblue.txt" "cover-letter-3.txt" "cover-letter.txt" "cover-letter-mindmixer.txt" "who-i-am.md" "new-resume.txt" "q1.js" "hard.js" "status.txt" "tcsh-history" "safari.css" ".bashrc" "main.js" "the-company-building-and-growing.json" "simplechat" "scratch2.el" "gnotify.sh" "316__debugging_with_xcode_4_and_lldb.pdf" "test.js" "app.test.js" "grunt.js" "require-config.js" "setup.js" "app.js" "package.json" "bb-tasks" "scratch.el" "hilltop-tree.jpg" "odd.coffee" "show.js" "#hello.coffee#" "hello.coffee" "dash-at-point.el" "erp.coffee" "ahoy.js" "ahoy.coffee" "me.coffee" "tennis_scorer.rb" "Dropbox 1.0.20.dmg" "org-" "stylesheet.css" "arf.html" "arf" "color-theme.el" "color-theme-leuven.el" "hapi.js" "cover-letter2.txt" "Actor Model of Computation- Scalable Robust Information Systems.pdf" "bashrc.sh" "org-mode/" "Concurrent Programming.pdf" "leaderboard.css" "emacs.el" "Elevated|SEO.html" "arf.rb" "org.org" "cyberpunk-theme.el" "financial1-propsosal.txt" "index.html" "OutlineforAndrewsOnlineMarketingWindow.rtf" "she-proposal.txt" "jeff-bio.txt" "responsive.css" "responsive-child.css" "style.css" "Elevated|SEO.org" "proposals.org" "elevatedseo.html" "animal.rb" "accounts.dat" "iy-goto-char.el" "snippets-notes.clj" "conways-game-of-life.clj" ".clj_completions-long-list" "automata.org" "literate-example.org" "emacs-todo.html" "blink-colored-cursor.el" ".notes" "metar-report.el" "colors.html" "cursor-chg.el" ".emacs" ".emacs" "emacs" "arf.pl" ".emacs" "lein-tarsier-0.9.1.jar" ".emacs"))
(setq ido-buffer-history '("custom.el" "init.el" "Seth Quotes.md" "software-ideas-other.md" "Multi-Dimensional Composition.txt" "Custom Example.css" "*Packages*" "*Help*" "scratch-emacs.el" "*Customize Group: Ido*" "*scratch*" #("emacs-todo.org" 0 14 (face ido-virtual)) "*Occur*" " *undo-tree*" "*Customize Option: Smooth Scroll Margin*" "core" "*info*" "*Customize Apropos*" "*Customize Group: Mouse*" "app" "themes" "*Customize Option: Scroll Preserve Screen Position*" "*Customize Group: Time Stamp*" "list.md" "*Customize Group: Windows*" "*Customize Option: Scroll Conservatively*" "*Customize Face: Show Paren Match*" "*Custom Theme*" #("solarized-light2-theme.el" 0 25 (face ido-virtual)) "*Command History*" "*Customize Option: Indent Tabs Mode*" "esh-groups.el" "a.txt" "kevin-chat.txt" "httpd.conf" "info.php" "php52.rb" "anand.conf" "sq.html" "*Messages*" "indent.el.gz" "github.css" nil "*Customize Face: Cursor*" "*Customize Face: Region*" "*Customize Face: Paren Face Match*" #("everwatch2.rb" 0 13 (face ido-virtual)) "*Customize Faces*" "*Customize Group: Paren Showing Faces*" "*Customize Face: Default*" "*Customize Group: Basic Faces*" "*Customize Group: Emacs*" "*Customize Group: Ns*" "*Customize Group: Environment*" "*Customize Group: Faces*" #(".bashrc" 0 7 (face ido-virtual)) "notes.org" "notes-old.org" ".inputrc" "new-notes.org" "*Calculator*" "*Calc Edit*" "*Customize Group: Isearch*" "*Customize Group: Lazy Highlight*" "*Customize Group: Markdown*" "*ansi-term*" "*eshell*" "*Customize Option: Tab Width*" "*Tab Stops*" "esh-mode.el.gz" "~" "*Customize Option: Eshell Kill Processes On Exit*" "*Backtrace*" "*Process List*" "alias" ".emacs.d" "work" "*Customize Group: Paren Showing*" "*Customize Option: Show Paren Style*" "*Customize Option: Evil Leader/In All States*" "*Customize Group: Evil Leader*" "bb-boilerplate.html" "*Customize Group: Evil Cjk*" "*WoMan 1 ack*" "*Customize Group: Evil*" "evil-core.el" #("blerg.md" 0 8 (face ido-virtual)) "readme.md" #("README.md" 0 9 (face ido-virtual)) "everwatch.rb" "Seth Quotes.txt" "cover-letter-3.txt" "*Apropos*" "*Customize Option: Frame Background Mode*" #("new-resume.txt" 0 14 (face ido-virtual)) "hard.js" "q1.js" "status.txt" "oldprojects" "bb-playground" "*RE-Builder*" "cover-letter-mindmixer.txt" "test.coffee" "login" "*Customize Option: Eshell Prompt Regexp*" "*Customize Option: Eshell Visual Commands*" "*Customize Option: Eshell Prompt Function*" "*Finder*" "em-alias.el.gz" "*Customize Option: Eshell Variable Aliases List*" #("main.js" 0 7 (face ido-virtual)) "*Customize Group: Eshell*" "the-company-building-and-growing.json" "scratch2.el" "memmeter.rb" "*Shell Command Output*" #("gnotify.sh" 0 10 (face ido-virtual)) "deconcentration-software-Letter.pdf" "bb-tasks" "*el-get packages*" "316__debugging_with_xcode_4_and_lldb.pdf" "*Customize Option: Exec Path*" "a.coffee" "package.json" "*CoffeeREPL*" "*Disabled Command*" "*Completions*" "test.js" "test" "app.test.js" "grunt.js<2>" "npm-debug.log" "grunt" "server.js" "index.html" "org-mode" "*Customize Group: Apropos*" "*Customize Option: Hl Line Face*" "*Customize Group: Hl Line*" "*Customize Group: Frames*" "*ert*" "odd.coffee" "menu-bar.el.gz" "mouse.el.gz" "webjump.el.gz" "net" "*Customize Option: Ido Setup Hook*" "tarpit.pdf" "pdfs" "*Directory*" "smooth-scrolling.el" "*Customize Option: Smooth Scroll Strict Margins*" "Pictures" "hilltop-tree.jpg" "*Customize Option: Custom Safe Themes*" "*Customize Group: Js2 Mode*" "*Customize Option: Menu Bar Mode*" "*Customize Option: Vc Follow Symlinks*" "*Customize Group: Recentf*" "*Customize Option: Ido Enable Last Directory History*" "*Customize Group: Save Place*" "*Customize Group: Dired Faces*" "*Customize Group: Dired X*" "*Customize Group: Dired Keys*" "*Customize Group: Dired*" "show.js" "coffee-mode.el" "#hello.coffee#" "hello.coffee" "*Ediff Control Panel*" "dash-at-point.el" "HELLO" "*Customize Group: Avoid*" "MORE.STUFF" "autotelicum-Smooth-CoffeeScript-5261e2e" "ahoy.js" "ahoy.coffee" "prelude.coffee" "prelude" "*GNU Emacs*" "*Customize Group: Comint*" "me.coffee" "*Colors*" "Contents" "doc" #("scratch.el" 0 10 (face ido-virtual)) "tennis_scorer.rb" "Downloads" "Dropbox" "routes.coffee" "1-HotPie-from-Screencast" "MyIOS" "index.js" " *code-conversion-work*" "arf.html" "org-" "arf.html.html" "emacs.el" "arf.html~" #("arf" 0 3 (face ido-virtual)) "stylesheet.css~" "stylesheet.css" "README" "dir" "org-7.9-3-ga986d3" "request-assign-future.txt" "*Org HTML Export*" "*Customize Option: Default Frame Alist*" #("color-theme-library.el" 0 22 (face ido-virtual)) "hapi.js" "cookies" "2C/init.el" "cover-letter2.txt" "cover-letter.txt" "Actor Model of Computation- Scalable Robust Information Systems.pdf" "bashrc.sh" "*Customize Group: The Emacs shell*" "Concurrent Programming.pdf" ".meteor" ".saves-*" ".saves-61616-anands-mbp.local~" "*Man grep*" "*grep*" "NEWS" "*shell*" "*Customize Group: Ansi Colors*" "*Customize Group: Shell*" "*terminal*" ".bash_history" "Elevated|SEO.html" "arf.rb" "org.org" "financial1-propsosal.txt" "*Customize Option: Dired Listing Switches*" "public" "responsive-child.css" "Elevated|SEO.org" "responsive.css" "Elevated|SEO.org<2>" "proposals.org" "elevatedseo.html" "Sites" "TUTORIAL" "accounts.dat" "iy-go-to-char.el" "iy-goto-char.el" "*nrepl*" "electric.el.gz" "snippets-notes.clj" "conways-game-of-life.clj" "*ielm*" ".clj_completions-long-list" "*Customize Option: Org Capture Templates*" "*Customize Group: Auto Save*" "emacs-todo.html" "blink-colored-cursor.el" "*w3m*" ".notes" "*Customize Option: Ido Ignore Buffers*" "metar-report.el" "weather.el" "*Color Theme Selection*" "*Custom Themes*"))
(setq iswitchb-history '("w3m" "scr" "buffer " "term"))
(setq w3m-bookmark-title-history '("ADDS - METARS form results" "keyboard - What are good custom keybindings in emacs? - Stack Overflow" "Google Reader" "EmacsWiki: Jabber El" "The Emacs Wiki" "Duck Duck Go"))
(setq imenu--history-list '("stuff.goes.here" "arf.mode" "Sections" "*Rescan*" "blreg" "freud" #("imenu-elisp-sections" 0 20 (fontified t)) "handler" "my-scroll"))
(setq bookmark-history '("org-refile-last-stored" "emacs-todo" "init.el" "gls" "org-refile-last-stored"))
(setq search-ring '("html" "span" "org-mode" "cursor" "arf" "book" "quot" "quite" "boo" "ag " "history" "litable" "dash" "log" "ital" "bo"))
(setq command-history '((switch-to-buffer "custom.el") (switch-to-buffer "init.el") (evil-change 1572 1574 'exclusive nil nil) (evil-change 1553 1555 'exclusive nil nil) (evil-delete 1534 1535 'line nil nil) (evil-replace 1529 1530 'exclusive 57) (evil-replace 1510 1511 'exclusive 57) (evil-find-char nil 56) (evil-find-char nil 57) (evil-change 1498 1505 'exclusive nil nil) (evil-delete 1490 1491 'line nil nil) (evil-change 1451 1457 'exclusive nil nil) (evil-delete 1444 1445 'line nil nil) (switch-to-buffer "Seth Quotes.md") (goto-line 23 nil) (switch-to-buffer "software-ideas-other.md") (goto-line 146 nil) (evil-replace 1439 1440 'exclusive 54) (evil-replace 1420 1421 'exclusive 55) (evil-change 1407 1415 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (customize-unsaved) (execute-extended-command nil "customize-unsaved") (emacs-uptime) (execute-extended-command nil "emacs-uptime") (evil-delete 1333 1342 'line nil nil) (evil-replace 1375 1376 'exclusive 45) (evil-delete 1372 1378 'line nil nil) (evil-delete 1372 1373 'line nil nil) (evil-replace 1217 1218 'exclusive 45) (evil-replace 814 1198 'block 45) (evil-replace 801 802 'exclusive 45) (evil-replace 784 785 'exclusive 45) (evil-replace 761 762 'exclusive 45) (evil-replace 748 749 'exclusive 45) (evil-change 1361 1370 'exclusive nil nil) (evil-replace 1330 1331 'exclusive 53) (evil-change 1314 1320 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (evil-change 410 442 'inclusive nil nil) (evil-find-char nil 98) (evil-change 410 415 'inclusive nil nil) (evil-find-char nil 115) (evil-change 411 411 'exclusive nil nil) (evil-change 358 409 'exclusive nil nil) (evil-change 338 357 'exclusive nil nil) (evil-change 337 351 'exclusive nil nil) (apropos-command '("uptime") nil) (org-time-stamp-inactive nil) (execute-extended-command nil "org-time-stamp-inactive") (org-time-stamp-inactive nil) (org-time-stamp-inactive nil) (switch-to-buffer "Multi-Dimensional Composition.txt") (find-file "/Users/anand/Dropbox/notesy/Typing Tones.txt") (find-file "/Users/anand/Dropbox/notesy/Multi-Dimensional Composition.txt") (evil-paste-from-register 18) (evil-delete 2683 2695 'line nil nil) (evil-delete 4919 4920 'line nil nil) (evil-delete 4919 4925 'line nil nil) (evil-delete 4891 4926 'line nil nil) (switch-to-buffer "Seth Quotes.md") (linum-mode 'toggle) (execute-extended-command nil "linum-mode") (zap-to-char 1 67108911) (visual-line-mode 'toggle) (execute-extended-command nil "visual-line-mode") (evil-change 5101 5102 'exclusive nil nil) (switch-to-buffer "software-ideas-other.md") (evil-change 5097 5099 'exclusive nil nil) (switch-to-buffer "software-ideas-other.md") (customize-group "markdown") (execute-extended-command nil "customize-group") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "Custom Example.css") (hl-line-mode 'toggle) (execute-extended-command nil "hl-line-mode") (switch-to-buffer "*Packages*") (org-time-stamp-inactive nil) (evil-replace 4954 4955 'exclusive 62) (evil-change 4902 4935 'inclusive nil nil) (rainbow-mode 'toggle) (execute-extended-command nil "rainbow-mode") (switch-to-buffer "Custom Example.css") (switch-to-buffer "Custom Example.css") (bookmark-jump "em") (switch-to-buffer "software-ideas-other.md") (apropos-documentation '("bookmarks") nil) (number-to-register nil 6) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "Seth Quotes.md") (describe-function 'ibuffer-list-buffers) (switch-to-buffer "*Help*") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Packages*") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Customize Group: Ido*") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Group: Ido*") (switch-to-buffer "software-ideas-other.md") (evil-shift-left 61 205 nil) (switch-to-buffer "scratch-emacs.el") (customize-group "ido") (describe-function 'ido-switch-buffer) (unhighlight-regexp "[Bb][Oo][Oo]") (execute-extended-command nil "unhighlight-regexp") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "custom.el") (switch-to-buffer "software-ideas-other.md") (evil-replace 1225 1226 'exclusive 54) (evil-replace 1159 1160 'exclusive 50) (evil-find-char nil 49) (evil-change 1147 1154 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (describe-function 'scroll-bar-drag-position) (describe-function 'scroll-bar-drag-1) (describe-function 'scroll-bar-drag) (describe-function 'scroll-bar-scroll-down) (switch-to-buffer "init.el") (describe-function 'evil-buffer) (describe-key-briefly "\\p" nil 1) (describe-key-briefly "\\b" nil 1) (describe-function 'mode-line-other-buffer) (switch-to-buffer "scratch-emacs.el") (describe-variable 'backup-directory-alist) (describe-variable 'temporary-file-directory) (describe-variable 'evil-default-cursor) (isearch-highlight-regexp) (execute-extended-command nil "isearch-highlight-regexp") (isearch-backward nil 1) (execute-extended-command nil "isearch-backward") (describe-key-briefly "" nil 1) (describe-key-briefly "" nil 1) (switch-to-buffer "software-ideas-other.md") (evil-change 1116 1124 'exclusive nil nil) (evil-change 1088 1096 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (evil-change 957 962 'inclusive nil nil) (evil-change 924 931 'exclusive nil nil) (litable-mode 'toggle) (execute-extended-command nil "litable-mode") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Packages*") (describe-function 'undo-tree-visualizer-toggle-diff) (evil-find-char-to nil 116) (describe-function 'undo-tree-save-history) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*scratch*") (switch-to-buffer "*Packages*") (eldoc-mode 'toggle) (execute-extended-command nil "eldoc-mode") (org-time-stamp-inactive nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (eval-expression '(require 'orgmode) nil) (eval-expression '(require 'org-mode) nil) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (describe-variable 'lexical-binding) (apropos-documentation '("litable") nil) (describe-function 'message) (eval-expression '(require 'dash) nil) (litable-refresh) (execute-extended-command nil "litable-refresh") (evil-find-char nil 114) (switch-to-buffer "*scratch*") (switch-to-buffer "*Packages*") (switch-to-buffer "*Help*") (switch-to-buffer "Custom Example.css") (package-list-packages-no-fetch) (execute-extended-command nil "package-list-packages-no-fetch") (evil-replace 615 616 'exclusive 53) (evil-delete 536 537 'line nil nil) (evil-delete 536 538 'line nil nil) (evil-delete 536 556 'line nil nil) (evil-delete 536 540 'line nil nil) (evil-shift-left 560 566 nil) (evil-delete 8449 8451 'line nil nil) (evil-delete 8356 8358 'line nil nil) (evil-delete 8453 8460 'line nil nil) (evil-delete 8339 8341 'line nil nil) (evil-delete 8466 8467 'line nil nil) (switch-to-buffer "Custom Example.css") (evil-delete 8336 8369 'inclusive nil nil) (evil-delete 8497 8500 'inclusive nil nil) (evil-change 8370 8373 'exclusive nil nil) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "Custom Example.css") (evil-delete 8332 8371 'line nil nil) (evil-delete 8496 8504 'line nil nil) (evil-change 5934 5942 'exclusive nil nil) (evil-change 151 155 'exclusive nil nil) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*scratch*") (evil-replace 1123 1124 'exclusive 52) (evil-change 1102 1103 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (undo-tree-visualizer-toggle-timestamps) (execute-extended-command nil "undo-tree-visualizer-toggle-timestamps") (evil-shift-left 430 481 nil) (evil-shift-left 481 524 nil) (switch-to-buffer "*Occur*") (kill-buffer " *undo-tree*") (undo-tree-visualize) (execute-extended-command nil "undo-tree-visualize") (undo-tree-visualize) (evil-delete 523 540 'inclusive nil nil)
;;;  (imenu '("stuff.goes.here" . #<marker at 589 in *scratch*>))
 (execute-extended-command nil "imenu")
;;;  (imenu '("arf.mode" . #<marker at 416 in *scratch*>))
 (emacs-lisp-mode) (execute-extended-command nil "emacs-lisp-mode") (imenu-add-to-menubar "Arf") (execute-extended-command nil "imenu-add-to-menubar") (imenu-add-menubar-index) (execute-extended-command nil "imenu-add-menubar-index") (describe-variable 'emacs-lisp-mode-hook) (describe-function 'imenu-elisp-sections) (describe-variable 'imenu-generic-expression) (occur ";;;; .+" nil) (execute-extended-command nil "occur") (occur ";;;;" nil) (imenu nil)
;;;  (imenu '("blreg" . #<marker at 430 in *scratch*>))

;;;  (imenu '("freud" . #<marker at 610 in *scratch*>))

;;;  (imenu '("imenu-elisp-sections" . #<marker in no buffer>))

;;;  (imenu '("imenu-elisp-sections" . #<marker in no buffer>))
 (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Option: Smooth Scroll Margin*") (apropos-documentation '("imenu") nil) (switch-to-buffer "software-ideas-other.md") (imenu-add-to-menubar "arf") (switch-to-buffer "custom.el") (switch-to-buffer "init.el") (kill-buffer "core") (switch-to-buffer "core") (describe-function 'imenu--split-menu) (describe-function 'imenu) (apropos-command '("erc") nil) (kill-buffer "*info*") (switch-to-buffer "software-ideas-other.md") (evil-change 1041 1050 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (customize-face '(hl-line)) (execute-extended-command nil "customize-face") (customize-option-other-window 'hl-line-face) (execute-extended-command nil "customize-option-other-window") (evil-delete 5667 5674 'inclusive nil nil) (evil-change 5351 5358 'inclusive nil nil) (kill-buffer "*info*") (switch-to-buffer "software-ideas-other.md") (command-history) (execute-extended-command nil "command-history") (menu-bar-left-scroll-bar) (execute-extended-command nil "menu-bar-left-scroll-bar") (apropos-command '("left") nil) (scroll-bar-mode 'toggle) (execute-extended-command nil "scroll-bar-mode") (describe-function 'scroll-bar-mode) (evil-replace 1008 1009 'exclusive 56) (evil-change 993 1000 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (describe-key-briefly "" nil 1) (describe-key-briefly [67108909] nil 1) (describe-key-briefly [67108907] nil 1) (describe-key "" 1 nil) (switch-to-buffer "*Customize Apropos*") (mouse-wheel-mode 'toggle) (execute-extended-command nil "mouse-wheel-mode") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Customize Group: Mouse*") (describe-variable 'mouse-wheel-mode) (switch-to-buffer "software-ideas-other.md") (evil-change 965 971 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (evil-record-macro 113) (switch-to-buffer "app") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "themes") (switch-to-buffer "software-ideas-other.md") (customize-themes) (execute-extended-command nil "customize-themes") (describe-variable 'custom-theme-directory) (dired "/Users/anand/Dropbox/work/") (describe-variable 'data-directory) (switch-to-buffer "software-ideas-other.md") (evil-shift-right 4805 4809 nil) (evil-goto-mark 96) (evil-change 4769 4775 'exclusive nil nil) (pwd) (execute-extended-command nil "pwd") (describe-key "-" 1 nil) (eval-expression '(setq smooth-scroll-margin 13) nil) (eval-expression '(setq smooth-scroll-margin 27) nil) (line-number-mode 'toggle) (execute-extended-command nil "line-number-mode") (column-number-mode 'toggle) (execute-extended-command nil "column-number-mode") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "custom.el") (describe-variable 'smooth-scroll-margin) (evil-find-char nil 40) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Customize Option: Scroll Preserve Screen Position*") (switch-to-buffer "*Customize Option: Smooth Scroll Margin*") (customize-face '(show-paren-match)) (find-file "/Users/anand/.emacs.d/whiteboard2-theme.el") (customize-face-other-window '(region)) (execute-extended-command nil "customize-face-other-window") (customize-face-other-window '(show-paren-match)) (execute-extended-command nil "customize-group-other-window") (switch-to-buffer "software-ideas-other.md") (evil-change 2086 2088 'exclusive nil nil) (evil-find-char nil 96) (evil-delete 4385 4402 'inclusive nil nil) (org-timestamp-up-day 1) (execute-extended-command nil "org-timestamp-up-day") (org-timestamp-up 1) (execute-extended-command nil "org-timestamp-up") (describe-function 'org-timestamp-up) (describe-function 'org-time<) (describe-function 'org-time-stamp-format) (org-time-stamp-inactive nil) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Help*") (switch-to-buffer "software-ideas-other.md") (customize-group "org-time") (switch-to-buffer "*Customize Group: Time Stamp*") (org-time-stamp nil) (execute-extended-command nil "org-time-stamp") (evil-delete 4340 4356 'inclusive nil nil) (switch-to-buffer "software-ideas-other.md") (customize-group "time-stamp") (evil-find-char-to nil 97) (org-time-stamp nil) (org-time-stamp nil) (apropos-command '("time-stamp") nil) (apropos-command '("timestamp") nil) (apropos-command '("date-stamp") nil) (apropos-command '("datestamp") nil) (describe-function 'time-stamp) (describe-function 'date-to-day) (evil-delete 293 345 'line nil nil) (evil-delete 4464 4465 'line nil nil) (evil-replace 4434 4435 'exclusive 10) (bookmark-jump "php") (evil-delete 2560 2565 'inclusive nil nil) (evil-shift-left 2501 2564 nil) (evil-shift-left 2377 2505 nil) (evil-shift-left 2348 2381 nil) (evil-shift-left 2348 2385 nil) (evil-shift-right 2348 2381 nil) (evil-shift-right 2509 2568 nil) (evil-shift-left 2509 2572 nil) (evil-shift-right 2381 2505 nil) (evil-shift-left 2381 2509 nil) (evil-shift-left 2348 2383 nil) (evil-delete 1963 1986 'line nil nil) (evil-delete 2095 2105 'line nil nil) (evil-shift-right 2143 2156 nil) (evil-shift-right 2143 2152 nil) (evil-delete 2124 2135 'line nil nil) (switch-to-buffer "software-ideas-other.md") (evil-change 9283 9286 'exclusive nil nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "list.md") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "list.md") (evil-delete 589 590 'line nil nil) (switch-to-buffer "software-ideas-other.md") (apropos-command '("bookmark") nil) (switch-to-buffer "software-ideas-other.md") (describe-variable 'default-frame-alist) (evil-shift-right 4378 4465 nil) (evil-shift-left 4378 4465 nil) (evil-delete 3719 3806 'line nil nil) (evil-change 4345 4352 'exclusive nil nil) (evil-replace 4303 4304 'exclusive 39) (switch-to-buffer "*Customize Option: Smooth Scroll Margin*") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Packages*") (switch-to-buffer "custom.el") (switch-to-buffer "software-ideas-other.md") (describe-variable 'scroll-preserve-screen-position) (switch-to-buffer "*Customize Option: Scroll Preserve Screen Position*") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (switch-to-buffer "*Customize Group: Windows*") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Group: Windows*") (switch-to-buffer "*Customize Option: Smooth Scroll Margin*") (switch-to-buffer "*Customize Option: Scroll Conservatively*") (switch-to-buffer "init.el") (describe-variable 'scroll-conservatively) (switch-to-buffer "*Customize Option: Smooth Scroll Margin*") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "init.el") (evil-replace 1335 1336 'exclusive 51) (evil-change 1320 1322 'exclusive nil nil) (switch-to-buffer "custom.el") (switch-to-buffer "software-ideas-other.md") (evil-replace 3362 3363 'exclusive 50) (switch-to-buffer "custom.el") (switch-to-buffer "init.el") (evil-replace 8914 8915 'exclusive 50) (switch-to-buffer "init.el") (load-theme 'whiteboard2 nil nil) (execute-extended-command nil "load-theme") (switch-to-buffer "*Customize Face: Show Paren Match*") (switch-to-buffer "init.el") (switch-to-buffer "*Help*") (describe-theme 'whiteboard) (execute-extended-command nil "describe-theme") (switch-to-buffer "init.el") (load-theme 'whiteboard nil nil) (switch-to-buffer "init.el") (switch-to-buffer "*Customize Face: Show Paren Match*") (kill-buffer "*Custom Theme*") (switch-to-buffer "*Help*") (switch-to-buffer "*Customize Face: Show Paren Match*") (switch-to-buffer "solarized-light2-theme.el") (switch-to-buffer "*Command History*") (describe-function 'load-theme) (switch-to-buffer "init.el") (switch-to-buffer "list.md") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*Command History*") (switch-to-buffer "software-ideas-other.md") (evil-set-marker 101) (evil-find-char-to nil 104) (evil-change 951 953 'exclusive nil nil) (evil-replace 932 933 'exclusive 53) (evil-change 921 928 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (evil-delete 1435 1436 'line nil nil) (evil-delete 1354 1355 'line nil nil) (evil-replace 682 683 'exclusive 45) (evil-replace 559 560 'exclusive 45) (evil-shift-right 551 670 nil) (evil-delete 965 966 'line nil nil) (evil-delete 951 952 'line nil nil) (evil-delete 830 831 'line nil nil) (evil-delete 654 724 'line nil nil) (evil-delete 323 347 'line nil nil) (describe-variable 'face-new-frame-defaults) (describe-variable 'face-attribute-name-alist) (evil-shift-left 979 994 nil) (evil-shift-left 968 981 nil) (evil-shift-left 938 970 nil) (evil-shift-left 861 942 nil) (evil-shift-right 861 938 nil) (evil-shift-left 861 940 nil) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "list.md") (switch-to-buffer "init.el") (evil-change 227 232 'exclusive nil nil) (evil-change 232 233 'inclusive nil nil) (evil-shift-left 192 264 nil) (evil-shift-left 192 268 nil) (evil-shift-left 192 272 nil) (evil-shift-left 192 274 nil) (switch-to-buffer "*scratch*") (indent-region (region-beginning) (region-end) nil) (execute-extended-command nil "indent-region") (indent-region (region-beginning) (region-end) nil) (indent-region (region-beginning) (region-end) nil) (indent-region (region-beginning) (region-end) nil) (untabify (region-beginning) (region-end)) (execute-extended-command nil "untabify") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Option: Indent Tabs Mode*") (switch-to-buffer "*Help*") (describe-variable 'indent-tabs-mode) (describe-variable 'tab-always-indent) (evil-change 4320 4325 'exclusive nil nil) (evil-delete 4194 4273 'line nil nil) (evil-delete 4273 4352 'line nil nil) (describe-variable 'tab-width) (switch-to-buffer "init.el") (switch-to-buffer "software-ideas-other.md") (evil-delete 28 29 'line nil nil) (switch-to-buffer "software-ideas-other.md") (find-file "/Users/anand/Dropbox/work/org-mode/list.md") (kill-buffer "esh-groups.el") (find-file "/Users/anand/Dropbox/work/fasd.sh") (evil-delete 5915 5924 'inclusive nil nil) (evil-delete 5914 5924 'inclusive nil nil) (evil-delete 5902 5914 'inclusive nil nil) (evil-delete 5892 5897 'inclusive nil nil) (describe-variable 'evil-visual-line) (evil-replace 5291 5292 'exclusive 91) (evil-delete 2743 2748 'inclusive nil nil) (evil-delete 2720 2724 'inclusive nil nil) (evil-delete 2698 2725 'line nil nil) (evil-delete 2681 2685 'inclusive nil nil) (evil-delete 2677 2686 'line nil nil) (switch-to-buffer "software-ideas-other.md") (ispell) (execute-extended-command nil "ispell") (evil-change 807 813 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (evil-change 2352 2358 'line nil nil) (switch-to-buffer "software-ideas-other.md") (evil-change 4302 4308 'exclusive nil nil) (evil-change 4218 4224 'exclusive nil nil) (evil-change 4262 4266 'exclusive nil nil) (describe-function 'evil-scroll-page-down) (evil-change 3964 3967 'exclusive nil nil) (describe-function 'evil-visual-line) (evil-replace 3960 3961 'exclusive 118) (switch-to-buffer "init.el") (switch-to-buffer "software-ideas-other.md") (evil-delete 191 253 'line nil nil) (evil-delete 191 200 'line nil nil) (switch-to-buffer "*scratch*") (switch-to-buffer "custom.el") (describe-function 'set-face-attribute) (kill-buffer "*Help*") (switch-to-buffer "custom.el") (describe-function 'custom-set-faces) (describe-variable 'window-system-initialization-alist) (describe-variable 'frame-initial-frame-alist) (switch-to-buffer "*Customize Apropos*") (customize-group "") (kill-buffer "a.txt") (rot13-region (region-beginning) (region-end)) (execute-extended-command nil "rot13-region") (find-file "/Users/anand/Documents/a.txt") (switch-to-buffer "software-ideas-other.md") (evil-change 793 794 'exclusive nil nil) (evil-replace 794 795 'exclusive 55) (evil-replace 774 775 'exclusive 51) (evil-change 762 770 'exclusive nil nil) (switch-to-buffer "kevin-chat.txt") (evil-delete 4282 4379 'line nil nil) (evil-replace 4163 4164 'exclusive 62) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "kevin-chat.txt") (switch-to-buffer "software-ideas-other.md") (kill-buffer "httpd.conf") (kill-buffer "info.php") (kill-buffer "php52.rb") (switch-to-buffer "php52.rb") (find-file "/Users/anand/Sites/info.php") (find-file "/etc/apache2/httpd.conf") (kill-buffer "anand.conf") (find-file "/etc/apache2/users/anand.conf") (find-file "/Users/anand/Downloads/php52.rb") (evil-delete 1377 1378 'line nil nil) (find-file "/Users/anand/Dropbox/work/kevin-chat.txt") (evil-change 895 898 'exclusive nil nil) (evil-replace 928 929 'exclusive 45) (evil-replace 928 929 'exclusive 48) (evil-find-char nil 100) (evil-delete 2447 2448 'line nil nil) (evil-goto-mark 39) (evil-goto-mark-line 96) (evil-goto-mark-line 39) (describe-variable 'auto-save-visited-file-name) (describe-function 'auto-save-mode) (evil-delete 151 162 'line nil nil) (switch-to-buffer "software-ideas-other.md") (evil-change 638 647 'exclusive nil nil) (switch-to-buffer "Seth Quotes.md") (describe-function 'command-apropos) (describe-key-briefly "d" nil 1) (describe-key-briefly "v" nil 1) (describe-key-briefly "a" nil 1) (execute-extended-command nil "apropos-library") (apropos-documentation '("json") nil) (describe-key-briefly "h" nil 1) (describe-key "\210" 1 nil) (describe-key "h" 1 nil) (evil-change 1604 1609 'exclusive nil nil) (switch-to-buffer "Custom Example.css") (switch-to-buffer "Seth Quotes.md") (switch-to-buffer "software-ideas-other.md") (evil-replace 1266 1267 'exclusive 56) (evil-replace 1266 1267 'exclusive 51) (evil-find-char nil 53) (evil-delete 1273 1295 'line nil nil) (evil-delete 1273 1293 'line nil nil) (evil-delete 1281 1305 'line nil nil) (evil-find-char nil 59) (evil-delete 1460 1486 'line nil nil) (evil-delete 1316 1342 'line nil nil) (evil-delete 1296 1302 'line nil nil) (kill-buffer "*Messages*") (find-file "/Users/anand/Dropbox/work/sq.html") (evil-delete 1295 1316 'line nil nil) (switch-to-buffer "Custom Example.css") (kill-buffer "indent.el.gz") (kill-buffer "github.css") (evil-delete 1839 1840 'line nil nil) (evil-delete 1514 1515 'line nil nil) (evil-delete 1514 1520 'line nil nil) (evil-delete 1039 1053 'line nil nil) (evil-shift-right 201 219 nil) (evil-delete 141 142 'line nil nil) (evil-delete 68 69 'line nil nil) (evil-replace 1229 1230 'exclusive 48) (evil-replace 1099 1100 'exclusive 53) (evil-shift-left 1192 1212 nil) (evil-delete 1043 1075 'line nil nil) (evil-replace 1130 1131 'exclusive 48) (evil-delete 916 948 'line nil nil) (comment-region (region-beginning) (region-end) nil) (execute-extended-command nil "comment-region") (comment-region (region-beginning) (region-end) nil) (comment-region (region-beginning) (region-end) nil) (find-file "/Users/anand/Dropbox/work/github.css") (evil-change 444 451 'exclusive nil nil) (evil-shift-right 175 191 nil) (evil-change 234 238 'exclusive nil nil) (describe-variable 'tab-stop-list) (evil-change 4324 4328 'exclusive nil nil) (evil-change 4319 4321 'exclusive nil nil) (switch-to-buffer "init.el") (switch-to-buffer "software-ideas-other.md") (describe-function 'indent-according-to-mode) (describe-key "" 1 nil) (switch-to-buffer "init.el") (load-theme 'solarized-light2 nil nil) (switch-to-buffer "*scratch*") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Customize Face: Cursor*") (switch-to-buffer "*Customize Face: Region*") (kill-buffer "init.el") (eval-expression '(setq tab-width 4) nil) (switch-to-buffer "init.el") (kill-buffer "Seth Quotes.md") (kill-buffer "software-ideas-other.md") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "Seth Quotes.md") (customize-face '(cursor)) (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "init.el") (customize-face '(region)) (describe-theme 'gruber-darker) (customize-face-other-window '(cursor)) (describe-variable 'frame-background-mode) (load-theme 'gruber-darker nil nil) (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Face: Cursor*") (load-theme 'twilight nil nil) (customize-face-other-window nil) (switch-to-buffer "*scratch*") (switch-to-buffer "custom.el") (customize-face-other-window '(paren-face-match)) (switch-to-buffer "*Customize Face: Paren Face Match*") (switch-to-buffer "custom.el") (customize-face '(paren-face-match)) (switch-to-buffer "custom.el") (find-file "/Users/anand/.emacs.d/custom.el") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Face: Show Paren Match*") (switch-to-buffer "init.el") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*scratch*") (switch-to-buffer "*scratch*") (describe-theme 'solarized-light2) (switch-to-buffer "everwatch2.rb") (switch-to-buffer "everwatch2.rb") (switch-to-buffer "*scratch*") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "emacs-todo.org") (describe-variable 'custom-theme-load-path) (switch-to-buffer "*scratch*") (switch-to-buffer "custom.el") (switch-to-buffer "*scratch*") (load-theme 'solarized-light nil nil) (custom-theme-visit-theme 'solarized-light) (custom-theme-merge-theme 'solarized-light) (describe-theme 'solarized-light) (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Faces*") (customize-group "paren-showing-faces") (switch-to-buffer "custom.el") (evil-replace 999 1000 'exclusive 49) (evil-replace 3027 3028 'exclusive 51) (evil-find-char nil 50) (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Faces*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Customize Faces*") (switch-to-buffer "custom.el") (customize-face nil) (switch-to-buffer "*scratch*") (switch-to-buffer "custom.el") (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "*Custom Theme*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Customize Face: Default*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "*Custom Theme*") (switch-to-buffer "*Customize Face: Default*") (switch-to-buffer "*Custom Theme*") (customize-face '(default)) (switch-to-buffer "*Custom Theme*") (switch-to-buffer "*Customize Group: Basic Faces*") (switch-to-buffer "*Custom Theme*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Custom Theme*") (switch-to-buffer "*Customize Group: Basic Faces*") (switch-to-buffer "*Custom Theme*") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "*Custom Theme*") (untabify (region-beginning) (region-end)) (tabify (region-beginning) (region-end)) (execute-extended-command nil "tabify") (switch-to-buffer "everwatch2.rb") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (custom-describe-theme) (execute-extended-command nil "custom-describe-theme") (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (evil-replace 255 256 'exclusive 51) (switch-to-buffer "*scratch*") (switch-to-buffer "*Command History*") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "custom.el") (customize-group "paren-showing") (switch-to-buffer "custom.el") (switch-to-buffer "custom.el") (load-theme 'light-blue nil nil) (load-theme 'tsdh-light nil nil) (load-theme 'soothe nil nil) (execute-extended-command nil "") (load-theme 'wheatgrass nil nil) (describe-function 'set-face-attributes-from-resources) (switch-to-buffer "custom.el") (describe-variable 'custom-face-all) (describe-function 'custom-set-default) (apropos-documentation '("faces") nil) (switch-to-buffer "*Customize Group: Emacs*") (describe-variable 'frame-initial-frame) (switch-to-buffer "*Customize Group: Emacs*") (switch-to-buffer "*Customize Group: Ns*") (switch-to-buffer "*Customize Group: Environment*") (switch-to-buffer "*Customize Group: Faces*") (Info-goto-node "Faces" nil) (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Group: Faces*") (customize-group "faces") (describe-function 'web-mode) (switch-to-buffer "custom.el") (describe-variable 'custom-safe-themes) (switch-to-buffer "custom.el") (switch-to-buffer "init.el") (load-theme 'twilight-bright nil nil) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (switch-to-buffer ".bashrc") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (evil-change 1428 1434 'exclusive nil nil) (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (describe-variable 'evil-emacs-state-map) (describe-function 'evil-scroll-line-down) (execute-extended-command nil "align-regexp") (switch-to-buffer "*Command History*") (switch-to-buffer "*scratch*") (evil-delete 1472 1512 'line nil nil) (evil-replace 2518 2519 'exclusive 52) (switch-to-buffer "custom.el") (switch-to-buffer "*scratch*") (switch-to-buffer "*Command History*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Command History*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Command History*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Command History*") (switch-to-buffer "*scratch*") (switch-to-buffer "Seth Quotes.md") (switch-to-buffer "emacs-todo.org") (evil-delete 4702 4703 'line nil nil) (evil-goto-mark-line 97) (evil-set-marker 97) (evil-delete 6755 6756 'line nil nil) (comment-region (region-beginning) (region-end) nil) (comment-region (region-beginning) (region-end) nil) (describe-function 'comment-region) (describe-key "\334" 1 nil) (describe-key "" 1 nil) (describe-key "\\z" 1 nil) (describe-key "4o" 1 nil) (describe-key "k" 1 nil) (describe-key "d" 1 nil) (eval-expression '(kill-buffer (window-buffer (next-window))) nil) (describe-key "" 1 nil) (switch-to-buffer "init.el") (evil-change 3932 3935 'exclusive nil nil) (evil-change 3905 3909 'exclusive nil nil) (switch-to-buffer "init.el") (describe-key "" 1 nil) (describe-key "" 1 nil) (kill-buffer ".inputrc") (find-file "/Users/anand/.inputrc") (kill-buffer ".bashrc") (switch-to-buffer ".bashrc") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/notes-old.org") (kill-buffer "new-notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "*info*") (calc-precision 12) (calc-precision 4) (Info-follow-reference "4" nil) (Info-follow-reference "3" nil) (calc-radix 36) (calc-radix 60) (calc-radix 16) (calc-radix 10) (calc-precision 12) (calc-precision 30) (kill-buffer "*Calculator*") (Info-follow-reference "1" nil) (Info-follow-reference "2" nil) (kill-buffer "*Calc Edit*") (kill-buffer "*Customize Group: Isearch*") (kill-buffer "*Customize Group: Lazy Highlight*") (customize-group-other-window "isearch") (switch-to-buffer "software-ideas-other.md") (eval-expression '(buffer-live-p (get-buffer "software-ideas-other.mdx")) nil) (eval-expression '(buffer-live-p (get-buffer "software-ideas-other.md")) nil) (eval-expression '(buffer-live-p (get-buffer "*Backtrace*")) nil) (eval-expression '(buffer-live-p (get-buffer "*Help*")) nil) (eval-expression '(buffer-live-p (get-buffer '*Help*)) nil) (eval-expression '(buffer-live-p (get-buffer *Help*)) nil) (eval-expression '(buffer-live-p '*Help*) nil) (eval-expression '(message buffer-name) nil) (switch-to-buffer "*Help*") (eval-expression '(message 'buffer-name) nil) (eval-expression 'buffer-name nil) (eval-expression '(buffer-live-p 'software-ideas-other\.md) nil) (describe-function 'buffer-live-p) (evil-shift-left 4108 4172 nil) (switch-to-buffer "init.el") (eval-expression '(define-key isearch-mode-map [(control h)] 'isearch-mode-help) nil) (describe-key "\356" 1 nil) (unhighlight-regexp "pick") (highlight-regexp "pick" 'hi-yellow) (kill-buffer "*Customize Group: Markdown*") (switch-to-buffer "software-ideas-other.md") (describe-function 'markdown-indent-line) (customize-group-other-window "markdown") (switch-to-buffer "software-ideas-other.md") (describe-key "\355" 1 nil) (revert-buffer t) (execute-extended-command nil "revert-buffer") (switch-to-buffer "software-ideas-other.md") (find-file "/Users/anand/Dropbox/work/node-coffee/ng-stuff.js") (kill-buffer ".bashrc") (kill-buffer "*ansi-term*") (ansi-term "/bin/bash") (execute-extended-command nil "ansi-term") (kill-buffer "*ansi-term*") (switch-to-buffer "*eshell*") (switch-to-buffer ".bashrc") (switch-to-buffer "*scratch*") (describe-key "" 1 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "*eshell*") (kill-buffer "*Customize Option: Indent Tabs Mode*") (switch-to-buffer "*Customize Option: Indent Tabs Mode*") (align-current) (execute-extended-command nil "align-current") (align-regexp 49 130 "\\(\\s-*\\)\".\"" 1 1 nil) (align-regexp 49 145 "\\(\\s-*\\)\".+\"" 1 1 nil) (align-regexp 64 129 "\\(\\s-*\\)\".+\"" 1 1 nil) (align-regexp 49 128 "\\(\\s-*\\)\".+\"" 1 1 nil) (align-regexp 49 146 "\\(\\s-*\\)\".+\"" 1 1 nil) (align-regexp 87 103 "\\(\\s-*\\)\".+\"" 1 1 nil) (align-regexp 49 119 "\\(\\s-*\\)\".+\"" 1 1 nil) (describe-function 'align-regexp) (describe-key "\234" 1 nil) (switch-to-buffer "*scratch*") (kill-buffer "*Customize Option: Tab Width*") (kill-buffer "*Tab Stops*") (edit-tab-stops) (execute-extended-command nil "edit-tab-stops") (eval-expression '(setq tab-width 2) nil) (switch-to-buffer "*Tab Stops*") (apropos-documentation '("stops") nil) (describe-function 'occur) (evil-delete 49 76 'line nil nil) (indent-to 16) (execute-extended-command nil "indent-to") (indent-to 20) (untabify (region-beginning) (region-end)) (untabify (region-beginning) (region-end)) (apropos-documentation '("tabs") nil) (reveal-mode 'toggle) (execute-extended-command nil "reveal-mode") (visible-mode 'toggle) (execute-extended-command nil "visible-mode") (apropos-documentation '("invisible") nil) (apropos-command '("tabs") nil) (indent-region (region-beginning) (region-end) nil) (align-regexp 14 295 "\\(\\s-*\\)\".+\"" 1 1 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (kill-buffer "esh-mode.el.gz") (switch-to-buffer "*eshell*") (describe-function 'defcustom) (describe-key "" 1 nil) (eshell nil) (execute-extended-command nil "eshell") (switch-to-buffer "everwatch2.rb") (switch-to-buffer "~") (switch-to-buffer "*scratch*") (kill-buffer "*Customize Option: Eshell Kill Processes On Exit*") (switch-to-buffer "*eshell*") (eshell nil) (eshell nil) (eshell nil) (describe-variable 'eshell-kill-processes-on-exit) (eval-expression '(require 'eshell) nil) (evil-delete 192 196 'line nil nil) (evil-delete 198 203 'line nil nil) (evil-delete 205 215 'line nil nil) (evil-delete 197 199 'line nil nil) (evil-delete 198 204 'line nil nil) (evil-delete 205 210 'line nil nil) (switch-to-buffer "*scratch*") (evil-goto-mark-line 65) (describe-variable 'buffer-file-name) (switch-to-buffer "init.el") (switch-to-buffer "everwatch2.rb") (evil-set-marker 65) (switch-to-buffer "init.el") (kill-buffer "*eshell*") (eshell-quit-process) (execute-extended-command nil "eshell-quit-process") (eshell-kill-process) (execute-extended-command nil "eshell-kill-process") (eval-expression '(eshell-kill-hook nil) nil) (kill-buffer "*Backtrace*") (eval-expression 'eshell-resume-command nil) (describe-variable 'eshell-kill-hook) (describe-variable 'eshell-exit-hook) (kill-buffer "*Process List*") (eshell-send-eof-to-process) (execute-extended-command nil "eshell-send-eof-to-process") (eshell nil) (kill-buffer "*eshell*") (read-only-mode 'toggle) (execute-extended-command nil "read-only-mode") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (kill-buffer "alias") (switch-to-buffer "alias") (kill-buffer "*eshell*") (evil-local-mode 'toggle) (execute-extended-command nil "evil-local-mode") (kill-buffer "*eshell*") (menu-bar-mode 'toggle) (execute-extended-command nil "menu-bar-mode") (switch-to-buffer "*eshell*") (switch-to-buffer "init.el") (kill-buffer ".emacs.d") (eshell nil) (kill-buffer "work") (kill-buffer ".emacs.d") (eshell nil) (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/eshell/alias") (evil-replace 3319 3320 'exclusive 102) (evil-replace 3292 3293 'exclusive 102) (evil-set-marker 98) (evil-delete 3017 3087 'line nil nil) (evil-change 3493 3494 'exclusive nil nil) (kill-buffer "*Customize Group: Paren Showing*") (kill-buffer "*Customize Option: Show Paren Style*") (kill-buffer "*Customize Group: Paren Showing Faces*") (kill-buffer "*Customize Option: Evil Leader/In All States*") (switch-to-buffer "*Customize Option: Evil Leader/In All States*") (evil-shift-right 3309 3347 nil) (evil-shift-right 3309 3345 nil) (evil-shift-right 3309 3343 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "*Help*") (describe-variable 'evil-leader/in-all-states) (switch-to-buffer "*Help*") (evil-replace 516 517 'exclusive 116) (switch-to-buffer "*scratch*") (switch-to-buffer "*Help*") (evil-replace 543 544 'exclusive 92) (evil-replace 541 542 'exclusive 67) (switch-to-buffer "init.el") (describe-function 'define-key) (switch-to-buffer "*Help*") (evil-replace 516 517 'exclusive 48) (evil-replace 516 517 'exclusive 102) (describe-key [67108911] 1 nil) (switch-to-buffer "init.el") (describe-key "u" 1 nil) (evil-shift-right 3637 3663 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Option: Show Paren Style*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Option: Show Paren Style*") (switch-to-buffer "*Customize Group: Paren Showing Faces*") (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (describe-variable 'show-paren-mode) (describe-variable 'show-paren-style) (evil-delete 484 497 'line nil nil) (evil-replace 438 439 'exclusive 121) (evil-replace 387 388 'exclusive 107) (describe-key "" 1 nil) (evil-replace 336 337 'exclusive 100) (evil-find-char nil 101) (describe-key "" 1 nil) (evil-change 260 266 'exclusive nil nil) (kill-buffer "*info*") (evil-change 209 215 'exclusive nil nil) (switch-to-buffer "*scratch*") (markdown-mode) (execute-extended-command nil "markdown-mode") (clipboard-yank) (execute-extended-command nil "clipboard-yank") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/Seth Quotes.md") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "*scratch*") (key-chord-describe) (execute-extended-command nil "key-chord-describe") (describe-variable 'key-chord-one-key-delay) (describe-variable 'key-chord-two-keys-delay) (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (evil-delete 3432 3503 'line nil nil) (evil-shift-right 3361 3430 nil) (evil-shift-right 3361 3428 nil) (evil-shift-right 3361 3426 nil) (evil-delete 3361 3362 'line nil nil) (evil-shift-right 3336 3359 nil) (evil-shift-right 3336 3357 nil) (evil-shift-right 3336 3355 nil) (switch-to-buffer "init.el") (evil-shift-left 212 279 nil) (evil-shift-left 212 281 nil) (evil-shift-left 212 283 nil) (switch-to-buffer "*scratch*") (eval-expression '(setq key-chord-two-keys-delay 0.5) nil) (kill-buffer "*Customize Group: Evil Leader*") (customize-group-other-window "evil-leader") (customize-group-other-window "evil") (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (find-file "~/.emacs.d/init.el" t) (evil-delete 1739 1792 'inclusive nil nil) (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (evil-shift-right 3363 3432 nil) (evil-shift-right 3363 3430 nil) (evil-shift-right 3363 3428 nil) (describe-variable 'evil-intercept-esc) (describe-key [escape] 1 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (evil-delete 426 432 'exclusive nil nil) (evil-change 426 431 'exclusive nil nil) (evil-change 398 404 'inclusive nil nil) (evil-delete 446 464 'line nil nil) (describe-key "gu" 1 nil) (evil-delete 3121 3122 'line nil nil) (evil-shift-left 3356 3366 nil) (evil-shift-right 3149 3174 nil) (evil-shift-right 3149 3172 nil) (evil-shift-right 3149 3170 nil) (evil-shift-right 3149 3169 nil) (evil-shift-right 3121 3126 nil) (evil-shift-right 3122 3143 nil) (execute-extended-command nil "evil-leader/set-key") (evil-change 360 364 'exclusive nil nil) (evil-replace 356 357 'exclusive 112) (describe-key "" 1 nil) (switch-to-buffer "init.el") (describe-key "o" 1 nil) (describe-key "" 1 nil) (describe-key "4b" 1 nil) (switch-to-buffer "init.el") (evil-delete 192 197 'line nil nil) (evil-delete 192 216 'line nil nil) (switch-to-buffer "*scratch*") (switch-to-buffer "everwatch2.rb") (evil-replace 3236 3237 'exclusive 115) (describe-key "" 1 nil) (evil-shift-left 3050 3074 nil) (evil-shift-right 3050 3072 nil) (evil-shift-right 3050 3070 nil) (evil-shift-right 3050 3068 nil) (find-file "/Users/anand/.emacs.d/init.el") (kill-buffer "init.el") (find-file "/Users/anand/Dropbox/work/src/.emacs.d/init.el") (switch-to-buffer "*scratch*") (switch-to-buffer "bb-boilerplate.html") (describe-key "b" 1 nil) (describe-function 'switch-to-buffer) (switch-to-buffer "*scratch*") (describe-key "" 1 nil) (find-file "/Users/anand/Dropbox/work/node-coffee/bb-playground/bb-boilerplate.html") (describe-function 'ido-find-file-in-dir) (switch-to-buffer "*scratch*") (switch-to-buffer "everwatch2.rb") (describe-variable 'buffer-name-history) (switch-to-buffer "*scratch*") (switch-to-buffer "everwatch2.rb") (eval-expression '(evil-leader/set-key "e" 'find-file) nil) (switch-to-buffer "*scratch*") (eval-expression '(evil-leader/set-key "e" 'file-file) nil) (describe-variable 'evil-leader/leader) (kill-buffer "*Customize Group: Evil Leader*") (eval-expression '(require 'evil-leader) nil) (package-install 'evil-leader) (execute-extended-command nil "package-install") (kill-buffer "*Customize Group: Evil Cjk*") (switch-to-buffer "*scratch*") (kill-buffer "*WoMan 1 ack*") (woman nil nil) (execute-extended-command nil "woman") (evil-find-char nil 119) (evil-find-char nil 111) (switch-to-buffer "*Customize Group: Evil*") (customize-group "evil") (evil-delete 893 917 'line nil nil) (describe-variable 'evil-insert-state-map) (switch-to-buffer "*scratch*") (evil-mode 'toggle) (execute-extended-command nil "evil-mode") (eval-expression '(key-chord-define evil-insert-state-map "jj" 'evil-normal-state) nil) (eval-expression '(require 'key-chord) nil) (switch-to-buffer "*Help*") (eval-expression '(key-chord-define-global evil-insert-state-map "jj" 'evil-normal-state) nil) (describe-function 'key-chord-describe) (describe-function 'key-chord-define) (package-install 'key-chord) (evil-shift-left 6392 6433 nil) (evil-shift-left 6392 6435 nil) (evil-shift-right 6392 6433 nil) (evil-delete 6392 6433 'line nil nil) (eval-expression '(or 'nil -1) nil) (eval-expression '(or 0 -1) nil) (eval-expression '(or 1 -1) nil) (switch-to-buffer "evil-core.el") (switch-to-buffer "software-ideas-other.md") (apropos-documentation '("chord") nil) (apropos-command '("chord") nil) (evil-change 6392 6432 'inclusive nil nil) (evil-change 6395 6431 'inclusive nil nil) (describe-function 'evil-scroll-line-to-center) (describe-key "" 1 nil) (describe-function 'scroll-down-line) (describe-function 'scroll-up-line) (switch-to-buffer "evil-core.el") (describe-key [prior] 1 nil) (describe-key [next] 1 nil) (describe-variable 'evil-mode-map-alist) (Info-search "evil") (describe-key "/" 1 nil) (apropos-documentation '("evil") nil) (apropos-command '("evil") nil) (execute-extended-command nil "markdown-mode-menu") (switch-to-buffer "software-ideas-other.md") (switch-to-buffer "everwatch2.rb") (describe-function 'undo-tree-visualize) (evil-change 1774 1779 'exclusive nil nil) (switch-to-buffer "everwatch2.rb") (package-install 'evil) (kill-buffer "blerg.md") (write-file "/Users/anand/Dropbox/work/software-ideas-other.md") (switch-to-buffer "everwatch2.rb") (kill-buffer "*Customize Option: Indent Tabs Mode*") (switch-to-buffer "blerg.md") (describe-variable 'spaces-strings) (find-file "/Users/anand/Dropbox/work/blerg.md") (switch-to-buffer "readme.md") (kill-buffer "README.md") (switch-to-buffer "README.md") (switch-to-buffer "everwatch2.rb") (manual-entry "textutil") (execute-extended-command nil "manual-entry") (switch-to-buffer "Seth Quotes.md") (switch-to-buffer "everwatch.rb") (find-file "/Users/anand/Dropbox/work/Watchers/everwatch2.rb") (switch-to-buffer "everwatch.rb") (switch-to-buffer "*Messages*") (switch-to-buffer "Seth Quotes.md") (switch-to-buffer "readme.md") (find-file "/Users/anand/Dropbox/work/Seth Quotes.md") (kill-buffer "Seth Quotes.txt") (find-file "/Users/anand/Dropbox/work/Seth Quotes.txt") (find-file "/Users/anand/Dropbox/oldprojects/readme.md") (kill-buffer "README.md") (find-file "/Users/anand/Dropbox/work/src/.emacs.d/README.md") (switch-to-buffer "cover-letter-3.txt") (write-file "/Users/anand/Dropbox/work/cover-letter-hayneedle.txt") (ispell-buffer) (execute-extended-command nil "ispell-buffer") (find-file "/Users/anand/Dropbox/work/cover-letter-phenomblue.txt") (find-file "/Users/anand/Dropbox/work/cover-letter-3.txt") (find-file "/Users/anand/Dropbox/work/cover-letter.txt") (find-file "/Users/anand/Dropbox/work/cover-letter-mindmixer.txt") (global-visual-line-mode 'toggle) (execute-extended-command nil "global-visual-line-mode") (find-file "/Users/anand/Dropbox/work/who-i-am.md") (find-file "/Users/anand/Dropbox/work/new-resume.txt") (apropos-documentation '("background-mode") nil) (describe-function 'frame-set-background-mode) (kill-buffer "*Apropos*") (apropos-documentation '("background") nil) (apropos-documentation '("frame-set-background-mode") nil) (kill-buffer "*Customize Option: Frame Background Mode*") (dired "/Users/anand/Dropbox/work/node-coffee/bb-playground/") (apropos-command '("background-mode") nil) (find-file "/Users/anand/Dropbox/work/node-coffee/bb-playground/bb-boilerplate.html") (find-file "/Users/anand/Dropbox/work/who-i-am.md") (switch-to-buffer "*scratch*") (apropos-command '("theme") nil) (switch-to-buffer "new-resume.txt") (kill-buffer "*Customize Group: Markdown*") (markdown-open) (execute-extended-command nil "markdown-open") (markdown-preview) (execute-extended-command nil "markdown-preview") (shell-command "open -a Marked" nil nil) (find-file "/Users/anand/Dropbox/work/who-i-am.md") (package-install 'markdown-mode) (switch-to-buffer "readme.md") (switch-to-buffer "hard.js") (switch-to-buffer "bb-boilerplate.html") (kill-buffer "new-resume.txt") (switch-to-buffer "new-resume.txt") (switch-to-buffer "hard.js") (javascript-mode) (execute-extended-command nil "javascript-mode") (js2-mode) (execute-extended-command nil "js2-mode") (switch-to-buffer "q1.js") (switch-to-buffer "hard.js") (switch-to-buffer "q1.js") (switch-to-buffer "bb-boilerplate.html") (switch-to-buffer "q1.js") (switch-to-buffer "bb-boilerplate.html") (font-lock-mode 'toggle) (execute-extended-command nil "font-lock-mode") (switch-to-buffer "q1.js") (switch-to-buffer "bb-boilerplate.html") (find-file "/Users/anand/Dropbox/oldprojects/q1.js") (find-file "/Users/anand/Dropbox/oldprojects/hard.js") (kill-buffer "hard.js") (find-file "/Users/anand/Dropbox/oldprojects/hard.js") (switch-to-buffer "readme.md") (describe-key "40" 1 nil) (describe-function 'dir-locals-set-directory-class) (switch-to-buffer "readme.md") (switch-to-buffer "status.txt") (apropos-command '("undo") nil) (dired "/Volumes/Backup of AnandsMBP/Backups.backupdb/AnandsMBP/Latest/Macintosh HD/Users/anand/work/smartcampus/smartcampus_app_sw/smart_campus_server/app/") (find-file "/Users/anand/Dropbox/oldprojects/status.txt") (apropos-command '("case") nil) (apropos-command '("upper") nil) (apropos-command '("uppercase") nil) (switch-to-buffer "oldprojects") (find-file "/Users/anand/Dropbox/oldprojects/readme.md") (find-file "/Users/anand/Dropbox/oldprojects/") (highlight-phrase "[Gg]it" 'hi-yellow) (execute-extended-command nil "highlight-phrase") (hi-lock-mode 'toggle) (execute-extended-command nil "hi-lock-mode") (find-file "/Users/anand/Dropbox/dotfiles-mbp/tcsh-history") (switch-to-buffer "bb-playground") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-playground/bb-boilerplate.html") (switch-to-buffer "work") (kill-buffer "*RE-Builder*") (regexp-builder) (execute-extended-command nil "regexp-builder") (apropos-command '("regex") nil) (switch-to-buffer "*scratch*") (switch-to-buffer "new-resume.txt") (switch-to-buffer "cover-letter-mindmixer.txt") (switch-to-buffer "new-resume.txt") (switch-to-buffer "cover-letter-3.txt") (switch-to-buffer "cover-letter-mindmixer.txt") (switch-to-buffer "work") (find-file "/Users/anand/Dropbox/work/cover-letter-mindmixer.txt") (switch-to-buffer "work") (describe-function 'select-window) (dired "/Users/anand/Dropbox/work/") (find-file "/Users/anand/Dropbox/work/safari.css") (switch-to-buffer "*Packages*") (ispell-word nil nil nil t) (execute-extended-command nil "ispell-word") (switch-to-buffer "test.coffee") (switch-to-buffer "*Packages*") (dired "/Users/anand/Dropbox/work/node-coffee/bb-tasks/") (switch-to-buffer "*Packages*") (describe-variable 'browse-url-browser-function) (switch-to-buffer "login") (describe-function 'isearch--state-case-fold-search) (switch-to-buffer "*eshell*") (switch-to-buffer "init.el") (describe-function 'locate-dominating-file) (package-list-packages nil) (switch-to-buffer "login") (switch-to-buffer ".bashrc") (eshell nil) (switch-to-buffer "login") (switch-to-buffer "alias") (describe-variable 'eshell-rc-script) (describe-variable 'eshell-login-script) (eshell-insert-buffer-name "*Customize Option: Eshell Prompt Regexp*") (switch-to-buffer "*Customize Option: Eshell Visual Commands*") (switch-to-buffer "*eshell*") (switch-to-buffer "*Customize Option: Eshell Prompt Function*") (switch-to-buffer "*Help*") (describe-variable 'eshell-prompt-function) (find-file "/Users/anand/.bashrc") (switch-to-buffer "*eshell*") (describe-variable 'eshell-visual-commands) (describe-variable 'eshell-path-env) (eshell nil) (apropos-command '("eshell") nil) (apropos-command '("alias") nil) (kill-buffer "*Finder*") (switch-to-buffer "*eshell*") (kill-buffer "em-alias.el.gz") (kill-buffer "*Customize Option: Eshell Variable Aliases List*") (describe-variable 'eshell-aliases-file) (describe-variable 'eshell-variable-aliases-list) (apropos-command '("eshell-alias") nil) (apropos-command '("unalias") nil) (switch-to-buffer "*eshell*") (switch-to-buffer "*Messages*") (apropos-documentation '("symlink") nil) (apropos-command '("symlink") nil) (apropos-command '("symlinks") nil) (switch-to-buffer "*eshell*") (eshell nil) (switch-to-buffer "main.js") (switch-to-buffer "*Backtrace*" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (kill-buffer "*Mes") (switch-to-buffer-other-window "*Mes") (switch-to-buffer "*eshell*") (describe-function 'autoload) (describe-function 'eval-after-load) (switch-to-buffer "init.el") (switch-to-buffer "main.js") (switch-to-buffer "init.el") (switch-to-buffer "*eshell*") (switch-to-buffer "*Help*") (switch-to-buffer "*eshell*") (switch-to-buffer "*Customize Group: Eshell*") (describe-variable 'initial-environment) (eval-expression '(getenv "PATH") nil) (apropos-command '("eshell" "path") nil) (switch-to-buffer "*Customize Group: Eshell*") (customize-group-other-window "eshell") (switch-to-buffer "main.js") (describe-variable 'exec-path) (switch-to-buffer "*eshell*") (eval-expression '(require 'js2-mode) nil) (find-file "/Users/anand/Dropbox/work/node-coffee/simplechat/main.js") (kill-buffer "the-company-building-and-growing.json") (find-file "/Users/anand/Downloads/the-company-building-and-growing.json") (describe-key "f" 1 nil) (switch-to-buffer "*eshell*") (dired-create-directory "/Users/anand/Dropbox/work/node-coffee/simplechat") (switch-to-buffer "work") (execute-extended-command nil "ff") (switch-to-buffer "scratch2.el") (switch-to-buffer "init.el") (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (switch-to-buffer "scratch2.el") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (switch-to-buffer "scratch2.el") (describe-function 'show-paren-mode) (describe-function 'highlight-changes-visible-mode) (switch-to-buffer "*Command History*") (switch-to-buffer "*eshell*") (switch-to-buffer "scratch2.el") (switch-to-buffer "*scratch*") (find-file "/Users/anand/Dropbox/work/scratch2.el") (switch-to-buffer "*scratch*") (apropos-command '("eshell" "history") nil) (kill-buffer "memmeter.rb") (eshell-list-history) (execute-extended-command nil "eshell-list-history") (eshell nil) (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (apropos-documentation '("theme") nil) (switch-to-buffer "*eshell*") (switch-to-buffer "*Help*") (switch-to-buffer "scratch2.el") (kill-buffer "*Shell Command Output*") (kill-buffer "gnotify.sh") (switch-to-buffer "gnotify.sh") (describe-key [C-backspace] 1 nil) (switch-to-buffer "*eshell*") (describe-key-briefly "" nil 1) (describe-key "" 1 nil) (describe-key "" 1 nil) (describe-key "" 1 nil) (describe-key "	" 1 nil) (switch-to-buffer "scratch2.el") (list-directory "/Users/anand/Dropbox/work/") (describe-key "" 1 nil) (describe-key "d" 1 nil) (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (kill-buffer "deconcentration-software-Letter.pdf") (switch-to-buffer "*eshell*") (switch-to-buffer "scratch2.el") (describe-function 'expand-file-name) (describe-key "k" 1 nil) (switch-to-buffer "bb-tasks") (switch-to-buffer "scratch2.el") (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (describe-key "
" 1 nil) (switch-to-buffer "*eshell*") (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (el-get-update "el-get") (execute-extended-command nil "el-get-update") (kill-buffer "*el-get packages*") (el-get-list-packages) (execute-extended-command nil "el-get-list-packages") (switch-to-buffer "*Messages*") (describe-key "" 1 nil) (switch-to-buffer "scratch2.el") (switch-to-buffer "*Packages*") (el-get-describe "redo+") (execute-extended-command nil "el-get-describe") (el-get-describe "alpha-window") (el-get-describe "a-menu") (eval-expression '(el-get 'sync) nil) (eval-expression '(load "el-get") nil) (switch-to-buffer "scratch2.el") (switch-to-buffer "init.el") (switch-to-buffer "scratch2.el") (switch-to-buffer "init.el") (describe-variable 'load-path) (el-get-self-update) (execute-extended-command nil "el-get-self-update") (eval-expression '(require 'el-get) nil) (switch-to-buffer "scratch2.el") (unload-feature 'el-get nil) (execute-extended-command nil "unload-feature") (el-get-version) (execute-extended-command nil "el-get-version") (switch-to-buffer "scratch2.el") (describe-function 'isearch-occur) (switch-to-buffer "init.el") (switch-to-buffer "scratch2.el") (switch-to-buffer "*Packages*") (describe-variable 'isearch-mode-map) (switch-to-buffer "scratch2.el") (switch-to-buffer "init.el") (occur "line" nil) (highlight-phrase "[Aa]rf" 'hi-yellow) (highlight-changes-visible-mode 'toggle) (execute-extended-command nil "highlight-changes-visible-mode") (kill-buffer "gnotify.sh") (switch-to-buffer "*Help*") (switch-to-buffer "scratch2.el") (find-file "/Users/anand/.config/pianobar/gnotify.sh") (kill-buffer "316__debugging_with_xcode_4_and_lldb.pdf") (find-file "/Users/anand/Downloads/316__debugging_with_xcode_4_and_lldb.pdf") (switch-to-buffer "scratch2.el") (customize-group-other-window "ns") (describe-function 'getenv) (switch-to-buffer "scratch2.el") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Option: Exec Path*") (switch-to-buffer "custom.el") (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (switch-to-buffer "scratch2.el") (switch-to-buffer "*eshell*") (switch-to-buffer "*Packages*") (switch-to-buffer "*eshell*") (kill-buffer "a.coffee") (switch-to-buffer "*eshell*") (switch-to-buffer "*Packages*") (switch-to-buffer "package.json") (coffee-compile-buffer) (execute-extended-command '(4) "coffee-compile-buffer") (execute-extended-command nil "coffee-compile-buffer") (describe-key "	" 1 nil) (kill-buffer "*Tab Stops*") (describe-function 'indent-relative) (describe-function 'indent-for-tab-command) (describe-key "\362" 1 nil) (switch-to-buffer "test.coffee") (customize-group "coffee") (switch-to-buffer "test.coffee") (version nil) (execute-extended-command nil "version") (describe-variable 'coffee-command) (kill-buffer "*CoffeeREPL*") (switch-to-buffer "*CoffeeREPL*") (describe-function 'coffee-send-buffer) (kill-buffer "*CoffeeREPL*") (switch-to-buffer "test.coffee") (kill-buffer "*Disabled Command*") (kill-buffer "*Completions*") (kill-buffer "test.js") (kill-buffer "*Help*") (kill-buffer "test.coffee") (switch-to-buffer "test.coffee") (switch-to-buffer "*eshell*") (describe-variable 'eshell-ls-use-colors) (switch-to-buffer "*eshell*") (switch-to-buffer "test.js") (switch-to-buffer "test") (switch-to-buffer "test.js") (kill-buffer "*Backtrace*") (switch-to-buffer "*eshell*") (switch-to-buffer "bb-tasks") (kill-buffer "test.js") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/test.js") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/app.test.js") (switch-to-buffer "bb-tasks") (switch-to-buffer "*eshell*") (switch-to-buffer "bb-tasks") (switch-to-buffer "app.test.js") (switch-to-buffer "*eshell*") (switch-to-buffer "package.json") (switch-to-buffer "grunt.js<2>") (switch-to-buffer "*eshell*") (kill-buffer "npm-debug.log") (switch-to-buffer "*eshell*") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/grunt.js") (switch-to-buffer "*eshell*") (switch-to-buffer "grunt") (switch-to-buffer "*eshell*") (switch-to-buffer "bb-tasks") (kill-buffer "npm-debug.log") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/require-config.js") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/grunt.js") (switch-to-buffer "server.js") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/app.test.js") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/setup.js") (shell-command "pwd" nil nil) (switch-to-buffer "index.html") (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/app/js/app.js") (switch-to-buffer "*eshell*") (eshell nil) (find-file "/Users/anand/Dropbox/work/node-coffee/bb-tasks/package.json") (dired-create-directory "/Users/anand/Dropbox/work/node-coffee/bb-tasks") (switch-to-buffer "org-mode") (switch-to-buffer "emacs-todo.org") (shell-command "uptime " nil nil) (apropos-command '("frames") nil) (switch-to-buffer "scratch2.el") (describe-function 'ido-mode) (describe-function 'dired-find-alternate-file) (describe-function 'put) (time-stamp) (execute-extended-command nil "time-stamp") (switch-to-buffer "init.el") (describe-function 'linum-mode) (apropos-command '("linum") nil) (apropos-command '("trough") nil) (apropos-command '("margin") nil) (switch-to-buffer "scratch2.el") (write-file "/Users/anand/Dropbox/work/scratch2.el") (kill-buffer "*Customize Group: Apropos*") (switch-to-buffer "*Customize Group: Apropos*") (kill-buffer "*Customize Option: Hl Line Face*") (switch-to-buffer "*Customize Option: Hl Line Face*") (kill-buffer "*Customize Group: Hl Line*") (switch-to-buffer "*Customize Group: Hl Line*") (kill-buffer "*Customize Face: Default*") (switch-to-buffer "*Customize Face: Default*") (kill-buffer "*Customize Group: Frames*") (switch-to-buffer "*Customize Group: Frames*") (describe-key "n" 1 nil) (insert-file "/Users/anand/Dropbox/work/scratch.el") (insert-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "custom.el") (switch-to-buffer "org-mode") (switch-to-buffer "*Customize Group: Hl Line*") (switch-to-buffer "emacs-todo.org") (describe-variable 'hl-line-face) (describe-function 'hl-line-highlight) (speedbar nil) (execute-extended-command nil "speedbar") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Packages*") (customize-group "apropos") (describe-function 'apropos-value) (describe-function 'rx-to-string) (goto-last-change nil) (execute-extended-command nil "goto-last-change") (describe-function 'goto-last-change) (describe-key "\230" 1 nil) (pp-eval-expression '(set-face-attribute 'default nil :font "DejaVu Sans Mono-13")) (execute-extended-command nil "pp-eval-expression") (switch-to-buffer "*Packages*") (set-cursor-color "#92c48f") (execute-extended-command nil "set-cursor-color") (switch-to-buffer "*Help*") (eval-expression '(set-cursor-color) nil) (describe-function 'set-cursor-color) (describe-variable 'cursor-type) (switch-to-buffer "*Help*") (switch-to-buffer "*ert*") (zone) (execute-extended-command nil "zone") (describe-key "\377" 1 nil) (describe-key "\353" 1 nil) (kill-buffer "*Apropos*") (apropos-value "emacs.d" nil) (execute-extended-command nil "apropos-value") (apropos-library "faces") (apropos-library "frame") (apropos-value '("frame") nil) (apropos-documentation '("frame") nil) (execute-extended-command nil "apropos-documentation") (apropos '("frames") nil) (execute-extended-command nil "apropos") (execute-extended-command nil "apropos-command") (apropos-variable '("frame") nil) (execute-extended-command nil "apropos-variable") (ert 'foo nil) (execute-extended-command nil "ert") (switch-to-buffer "*scratch*") (describe-function 'ert-deftest) (switch-to-buffer "custom.el") (customize-group-other-window "frames") (switch-to-buffer "custom.el") (apropos-command '("frame") nil) (describe-variable 'frame-initial-geometry-arguments) (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Face: Default*") (switch-to-buffer "odd.coffee") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "odd.coffee") (eval-expression '(set-face-attribute 'default nil :font "DejaVu Sans Mono-12") nil) (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (switch-to-buffer "custom.el") (switch-to-buffer "odd.coffee") (switch-to-buffer "org-mode") (switch-to-buffer "notes.org") (switch-to-buffer "init.el") (switch-to-buffer "notes.org") (switch-to-buffer "*scratch*") (describe-function 'set-frame-font) (kill-buffer "menu-bar.el.gz") (kill-buffer "mouse.el.gz") (describe-function 'mouse-select-font) (describe-function 'menu-set-font) (browse-url "https://www.simperium.com/overview/" nil) (execute-extended-command nil "browse-url") (switch-to-buffer "notes.org") (kill-buffer "webjump.el.gz") (kill-buffer "net") (describe-function 'menu-bar-mode) (describe-function 'webjump) (string-rectangle (region-beginning) (region-end) ";;") (switch-to-buffer "init.el") (switch-to-buffer "org-mode") (switch-to-buffer "*Packages*") (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (kill-buffer "*Customize Option: Ido Setup Hook*") (switch-to-buffer "*Customize Option: Ido Setup Hook*") (switch-to-buffer "org-mode") (switch-to-buffer "init.el") (describe-key "\352" 1 nil) (switch-to-buffer "*Messages*") (describe-function 'file-directory-p) (switch-to-buffer "*scratch*") (switch-to-buffer "*Command History*") (switch-to-buffer "*scratch*") (kill-buffer "*Apropos*") (switch-to-buffer "*Command History*") (describe-function 'ido-save-history) (eval-expression '(require 'hahahaha nil t) nil) (switch-to-buffer "*Command History*") (apropos-command '("history") nil) (apropos-command '("eval") nil) (newline-and-indent) (execute-extended-command nil "newline-and-indent") (eval-expression '(join-line -1) nil) (join-line nil) (execute-extended-command nil "join-line") (join-line nil) (join-line nil) (join-line nil) (switch-to-buffer "*scratch*") (describe-function 'join-line) (switch-to-buffer "org-mode") (switch-to-buffer "init.el") (describe-variable 'ido-setup-hook) (kill-buffer "*Backtrace*") (eval-expression '(require 'hahahaha) nil) (describe-function 'require) (iy-go-to-char 1 105) (iy-go-to-char 1 110) (switch-to-buffer "*Packages*") (switch-to-buffer "init.el") (iy-go-to-char 1 116) (iy-go-to-char 1 116) (iy-go-to-char 1 106) (iy-go-to-char 1 102) (describe-function 'iy-go-to-char) (switch-to-buffer "*scratch*") (kill-buffer "*info*") (kill-buffer "tarpit.pdf") (doc-view-mode) (execute-extended-command nil "doc-view-mode") (dired-do-shell-command "open -a Skim" nil '("A New Approach to the Functional Design of a Digital Computer.pdf")) (dired-do-shell-command "open -a Skim" nil '("Rapture of the Nerds.pdf")) (dired-do-shell-command "open -a Skim" nil '("tarpit.pdf")) (dired-smart-shell-command "open -a Skim" nil nil) (switch-to-buffer "pdfs") (doc-view-first-page) (execute-extended-command nil "doc-view-first-page") (switch-to-buffer "pdfs") (info-apropos "pdf") (execute-extended-command nil "info-apropos") (apropos-command '("pdf") nil) (dired "/Users/anand/Dropbox/pdfs/") (kill-buffer "*Directory*") (list-directory "/Users/anand/Dropbox/pdfs/") (switch-to-buffer "*scratch*") (execute-extended-command nil "dired") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (switch-to-buffer "init.el") (kill-buffer "smooth-scrolling.el") (kill-buffer "*Customize Option: Smooth Scroll Strict Margins*") (describe-variable 'smooth-scroll-strict-margins) (describe-function 'smooth-scroll-lines-from-window-top) (switch-to-buffer "init.el") (switch-to-buffer "*Command History*") (switch-to-buffer "init.el") (switch-to-buffer "notes.org") (kill-buffer "Pictures") (find-file "/Users/anand/Pictures/") (kill-buffer "hilltop-tree.jpg") (find-file "/Users/anand/Pictures/hilltop-tree.jpg") (describe-key "" 1 nil) (kill-buffer "*Customize Option: Custom Safe Themes*") (switch-to-buffer "*Customize Option: Custom Safe Themes*") (kill-buffer "*Customize Option: Show Paren Style*") (switch-to-buffer "*Customize Option: Show Paren Style*") (kill-buffer "*Customize Group: Js2 Mode*") (switch-to-buffer "*Customize Group: Js2 Mode*") (kill-buffer "*Customize Option: Menu Bar Mode*") (switch-to-buffer "*Customize Option: Menu Bar Mode*") (kill-buffer "*Customize Option: Vc Follow Symlinks*") (switch-to-buffer "*Customize Option: Vc Follow Symlinks*") (kill-buffer "*Customize Group: Recentf*") (switch-to-buffer "*Customize Group: Recentf*") (kill-buffer "*Customize Option: Ido Enable Last Directory History*") (switch-to-buffer "*Customize Option: Ido Enable Last Directory History*") (kill-buffer "*Customize Group: Ido*") (switch-to-buffer "*Customize Group: Ido*") (kill-buffer "*Customize Group: Save Place*") (switch-to-buffer "*Customize Group: Save Place*") (kill-buffer "*Customize Apropos*") (switch-to-buffer "*Customize Apropos*") (kill-buffer "*Customize Option: Frame Background Mode*") (switch-to-buffer "org-mode") (switch-to-buffer "*Customize Option: Frame Background Mode*") (kill-buffer "*Customize Group: Dired Faces*") (kill-buffer "*Customize Group: Dired X*") (kill-buffer "*Customize Group: Dired Keys*") (kill-buffer "*Customize Group: Dired*") (switch-to-buffer "*Customize Group: Dired*") (customize-group-other-window "dired") (describe-function 'hl-line-mode) (apropos-command '("line-mode") nil) (describe-function 'line-number-mode) (switch-to-buffer "org-mode") (rot13-region (region-beginning) (region-end)) (switch-to-buffer "notes.org") (switch-to-buffer "*Packages*") (describe-variable 'mouse-avoidance-mode) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (eval-expression '(setq indent-tabs-mode nil) nil) (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (describe-function 'ido-dired) (dired-do-kill-lines nil) (execute-extended-command nil "dired-do-kill-lines") (dired-maybe-insert-subdir "/Users/anand/Dropbox/work/org-mode/org-7.9-3-ga986d3/" "--color=auto --group-directories-first -alGgphtuR") (dired-undo) (execute-extended-command nil "dired-undo") (dired-maybe-insert-subdir "/Users/anand/Dropbox/work/org-mode/org-7.9-3-ga986d3/doc/" "--color=auto --group-directories-first -alGgphtuR") (dired "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (dired "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "org-mode") (dired-reset-subdir-switches) (execute-extended-command nil "dired-reset-subdir-switches") (dired-do-redisplay nil 1) (execute-extended-command nil "dired-do-redisplay") (dired-do-redisplay nil 1) (describe-function 'dired-maybe-insert-subdir) (describe-function 'dired-clean-directory) (dired-build-subdir-alist) (execute-extended-command nil "dired-build-subdir-alist") (smooth-scroll-lines-from-window-top) (execute-extended-command nil "smooth-scroll-lines-from-window-top") (switch-to-buffer "org-mode") (apropos-command '("repeat") nil) (string-rectangle (region-beginning) (region-end) "!=") (string-rectangle (region-beginning) (region-end) " ") (string-rectangle (region-beginning) (region-end) "  ") (string-rectangle (region-beginning) (region-end) "odd") (string-rectangle (region-beginning) (region-end) ".0;") (string-rectangle (region-beginning) (region-end) ".0") (string-rectangle (region-beginning) (region-end) "blerg.") (string-rectangle (region-beginning) (region-end) "blerg") (switch-to-buffer "odd.coffee") (kill-buffer "README.md") (describe-key "#" 1 nil) (describe-key [67108899] 1 nil) (switch-to-buffer "README.md") (switch-to-buffer "odd.coffee") (server-start nil) (execute-extended-command nil "server-start") (describe-function 'server-start) (apropos-command '("server") nil) (describe-variable 'mac-command-modifier) (switch-to-buffer "odd.coffee") (eval-expression '(require 'smooth-scrolling) nil) (switch-to-buffer "*Packages*") (eval-expression '(setq truncate-lines nil) nil) (eval-expression '(setq truncate-lines t) nil) (eval-expression '(set truncate-lines t) nil) (describe-variable 'truncate-lines) (clipboard-yank) (clipboard-yank) (switch-to-buffer "init.el") (eval-expression '(prefer-coding-system 'utf-8) nil) (eval-expression 'prefer nil) (switch-to-buffer "gnotify.sh") (switch-to-buffer "emacs-todo.org") (indent-region (region-beginning) (region-end) nil) (switch-to-buffer "init.el") (switch-to-buffer "org-mode") (switch-to-buffer "init.el") (switch-to-buffer "org-mode") (dired-omit-mode 'toggle) (execute-extended-command nil "dired-omit-mode") (switch-to-buffer "org-mode") (customize-group "dired") (switch-to-buffer "org-mode") (info-apropos "dired-omit-mode") (apropos-command '("omit") nil) (switch-to-buffer "*Packages*") (ido-mode nil) (execute-extended-command nil "ido-mode") (ido-mode nil) (ido-mode nil) (ido-mode nil) (switch-to-buffer "init.el") (info-apropos "background-mode") (switch-to-buffer "custom.el") (switch-to-buffer "init.el") (switch-to-buffer "odd.coffee") (switch-to-buffer "show.js") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "odd.coffee") (switch-to-buffer "*Packages*") (customize-group "save-place") (switch-to-buffer "*Packages*") (describe-variable 'ido-last-directory-list) (switch-to-buffer "init.el") (describe-function 'recentf-mode) (apropos-command '("recentf") nil) (switch-to-buffer "init.el") (customize-variable-other-window 'vc-follow-symlinks) (execute-extended-command nil "customize-variable-other-window") (customize-variable-other-window 'menu-bar-mode) (describe-variable 'menu-bar-mode) (dired "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "emacs-todo.org") (info-apropos "defadvice") (apropos-command '("defadvice") nil) (apropos-documentation '("try-vscroll") nil) (switch-to-buffer "emacs-todo.org") (info-apropos "try-vscroll") (describe-variable 0) (describe-function 'kill-line) (apropos-documentation '("after") nil) (switch-to-buffer "emacs-todo.org") (apropos-command '("after") nil) (describe-function 'outline-back-to-heading) (describe-function 'org-back-to-heading) (eval-expression 'major-mode nil) (eval-expression '(equal-major-mode 'org-mode) nil) (kill-buffer "gnotify.sh") (find-file "/Users/anand/.config/pianobar/gnotify.sh") (switch-to-buffer "emacs-todo.org") (apropos-command '("cookie") nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (switch-to-buffer "*Packages*") (describe-function 'dolist) (switch-to-buffer "*scratch*") (describe-function 'directory-files) (describe-variable 'directory-files-no-dot-files-regexp) (describe-variable 'user-emacs-directory) (eval-expression '(concat "huckleberry" (expand-file-name "arf" user-emacs-directory)) nil) (eval-expression '(concat "huckleberry" expand-file-name "arf" user-emacs-directory) nil) (describe-function 'concat) (eval-expression '(expand-file-name "arf" user-emacs-directory) nil) (switch-to-buffer "coffee-mode.el") (switch-to-buffer "*Packages*") (apropos-command '("js2coffee") nil) (coffee-js2coffee-replace-region (region-beginning) (region-end)) (execute-extended-command nil "coffee-js2coffee-replace-region") (switch-to-buffer "show.js") (switch-to-buffer "odd.coffee") (describe-function 'coffee-js2coffee-replace-region) (kill-buffer "*CoffeeREPL*") (coffee-send-region (region-beginning) (region-end)) (execute-extended-command nil "coffee-send-region") (coffee-send-region (region-beginning) (region-end)) (coffee-repl) (execute-extended-command nil "coffee-repl") (coffee-version) (execute-extended-command nil "coffee-version") (execute-extended-command nil "coffee-mode-menu") (coffee-imenu-create-index) (execute-extended-command nil "coffee-imenu-create-index") (coffee-indent-line) (execute-extended-command nil "coffee-indent-line") (switch-to-buffer "odd.coffee") (apropos-command '("coffee") nil) (kill-buffer "*CoffeeREPL*") (apropos-command '("repl") nil) (coffee-js2coffee-replace-region (region-beginning) (region-end)) (apropos-command '("js2") nil) (apropos-command '("javascript") nil) (js2-mode-hide-comments) (execute-extended-command nil "js2-mode-hide-comments") (js2-mode-hide-functions) (execute-extended-command nil "js2-mode-hide-functions") (apropos-documentation '("javascript") nil) (apropos-documentation '("js2-mode") nil) (apropos-documentation '("ido") nil) (switch-to-buffer "show.js") (load-theme 'cyberpunk nil nil) (load-theme 'solarized-dark nil nil) (coffee-mode) (execute-extended-command nil "coffee-mode") (find-file "/Users/anand/Dropbox/work/node-coffee/odd.coffee") (switch-to-buffer "show.js") (js2-mode-customize) (execute-extended-command nil "js2-mode-customize") (eval-expression '(autoload 'js2-mode "js2-mode" nil t) nil) (find-file "/Users/anand/Dropbox/work/node-coffee/show.js") (switch-to-buffer "*Packages*") (kill-buffer "#hello.coffee#") (kill-buffer "hello.coffee") (kill-buffer "*Ediff Control Panel*") (ediff-quit nil) (execute-extended-command nil "ediff-quit") (ediff "/Users/anand/Dropbox/work/node-coffee/hello.coffee" "/Users/anand/Dropbox/work/node-coffee/#hello.coffee#") (execute-extended-command nil "ediff") (execute-extended-command nil "ediff3") (switch-to-buffer "hello.coffee") (switch-to-buffer "*Help*") (show-paren-mode 'toggle) (execute-extended-command nil "show-paren-mode") (apropos-command '("paren") nil) (describe-function 'paredit-mode) (describe-function 'rainbow-delimiters-mode) (switch-to-buffer "init.el") (customize-variable-other-window 'custom-safe-themes) (switch-to-buffer "custom.el") (switch-to-buffer "init.el") (load-theme '## nil nil) (package-list-packages nil) (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (describe-key "m" 1 nil) (describe-key "x" 1 nil) (customize-group-other-window "ido") (switch-to-buffer "dash-at-point.el") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (describe-function 'unload-feature) (dash-at-point) (execute-extended-command nil "dash-at-point") (switch-to-buffer "*Packages*") (switch-to-buffer "dash-at-point.el") (find-file "/Users/anand/Dropbox/work/node-coffee/hello.coffee") (describe-key "\273" 1 nil) (apropos-command '("dwin") nil) (find-file "/Users/anand/.emacs.d/my-stuff/dash-at-point.el") (eval-expression '(car (thing-at-point 'symbol)) nil) (eval-expression '(thing-at-point 'symbol) nil) (eval-expression '(message arf) nil) (eval-expression '(message 'arf) nil) (eval-expression '(thing-at-point 'arf) nil) (describe-function 'thing-at-point) (switch-to-buffer "*Packages*") (describe-function 'ido-everywhere) (describe-variable 'ido-enable-flex-matching) (info-emacs-manual) (execute-extended-command nil "info-emacs-manual") (kill-buffer "HELLO") (switch-to-buffer "HELLO") (apropos-command '("ido") nil) (info-apropos "ido") (switch-to-buffer "*scratch*") (customize-group "ns") (switch-to-buffer "*Customize Group: Avoid*") (info-apropos "ns-show-prefs") (apropos-command '("ns-show-prefs") nil) (switch-to-buffer "*Customize Group: Avoid*") (switch-to-buffer "*scratch*") (mouse-avoidance-mode 'exile) (execute-extended-command nil "mouse-avoidance-mode") (mouse-avoidance-mode 'banish) (describe-function 'mouse-avoidance-mode) (switch-to-buffer "*scratch*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Ns*") (switch-to-buffer "*Help*") (switch-to-buffer "*Help*") (switch-to-buffer "*scratch*") (goto-line 1 nil) (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Ns*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Help*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Help*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Group: Ns*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Packages*") (switch-to-buffer "*Customize Group: Ns*") (apropos-command '("occur") nil) (switch-to-buffer "*Packages*") (customize-group "keyboard") (info-apropos "hyper-key") (switch-to-buffer "*Apropos*") (info-apropos "hyper-key") (info-apropos "hyper") (switch-to-buffer "*Packages*") (apropos-command '("hyper-key") nil) (apropos-command '("hyperkey") nil) (apropos-command '("hyper") nil) (describe-key "h" 1 nil) (switch-to-buffer "*info*") (info-apropos "hyper") (package-list-packages nil) (customize-group "frames") (switch-to-buffer "*scratch*") (customize-group "package") (centered-cursor-mode 'toggle) (switch-to-buffer "emacs-todo.org") (dired-do-shell-command "open -a Skim" nil '("node_slides.pdf")) (switch-to-buffer "autotelicum-Smooth-CoffeeScript-5261e2e") (switch-to-buffer "ahoy.js") (switch-to-buffer "ahoy.coffee") (switch-to-buffer "ahoy.js") (switch-to-buffer "ahoy.coffee") (find-file "/Users/anand/Dropbox/work/twilio-playground/erp.coffee") (switch-to-buffer "ahoy.coffee") (switch-to-buffer "ahoy.js") (switch-to-buffer "ahoy.coffee") (switch-to-buffer "ahoy.js") (switch-to-buffer "ahoy.coffee") (write-file "/Users/anand/Dropbox/work/twilio-playground/ahoy.js") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/twilio-playground/ahoy.coffee") (switch-to-buffer "prelude.coffee") (dired-do-shell-command "open -a Skim" nil '("Smooth CoffeeScript.pdf")) (switch-to-buffer "prelude") (apropos-command '("pwd") nil) (indent-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-yank) (clipboard-yank) (toggle-read-only nil) (clipboard-yank) (dired "/Users/anand/Downloads/autotelicum-Smooth-CoffeeScript-5261e2e/src/prelude/") (dired "/Users/anand/Dropbox/work/") (switch-to-buffer "*GNU Emacs*") (eshell nil) (kill-buffer "*ansi-term*") (kill-buffer "*CoffeeREPL*") (kill-buffer "*ansi-term*") (switch-to-buffer "*Customize Group: Comint*") (ansi-color-for-comint-mode-on) (ansi-color-for-comint-mode-off) (switch-to-buffer "me.coffee") (apropos-command '("comint") nil) (kill-buffer "*CoffeeREPL*") (kill-buffer "*CoffeeREPL*") (switch-to-buffer "me.coffee") (customize-group "comint") (kill-buffer "*CoffeeREPL*") (describe-function 'shell-copy-environment-variable) (shell-copy-environment-variable "PATH") (getenv "PATH") (apropos-command '("env") nil) (describe-function 'setenv) (shell-command "echo $PATH" nil nil) (switch-to-buffer "me.coffee") (kill-buffer "*Colors*") (list-colors-display) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Packages*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Packages*") (load-theme 'soo nil nil) (switch-to-buffer "emacs-todo.org") (package-list-packages nil) (switch-to-buffer "emacs-todo.org") (dired "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "emacs-todo.org") (kill-buffer "Contents") (dired-do-shell-command "ls -l" nil '("CodeDirectory")) (dired "/Applications/Emacs.app/") (switch-to-buffer "emacs-todo.org") (describe-function 'set-default-font) (execute-extended-command nil "set-default-font") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (describe-function 'rainbow-mode) (winner-mode nil) (describe-function 'visual-line-mode) (switch-to-buffer "emacs-todo.org") (kill-buffer "*CoffeeREPL*") (find-file "/Users/anand/Dropbox/work/node-coffee/me.coffee") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "doc") (switch-to-buffer "scratch.el") (dired-do-shell-command "open -a Skim" nil '("org.pdf")) (find-file "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "emacs-todo.org") (apropos-command '("babel") nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "test") (kill-buffer "cover-letter-3.txt") (kill-buffer "tennis_scorer.rb") (find-file "/Users/anand/Dropbox/work/tennis_scorer.rb") (write-file "~/Dropbox/work/cover-letter-3.txt" t) (find-file "/Users/anand/Dropbox/work/cover-letter.txt") (info-apropos "fileset") (info-apropos "fileset") (info-apropos "fileset") (apropos-command '("fileset") nil) (apropos-command '("filesets") nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "Downloads") (switch-to-buffer "work") (switch-to-buffer "Downloads") (switch-to-buffer "Dropbox") (switch-to-buffer "pdfs") (dired-do-shell-command "ls -lu" nil '("admin.css")) (dired-do-shell-command "ls -l" nil '("admin.css")) (dired-do-shell-command "lotr" nil '("admin.css")) (dired "/Users/anand/Dropbox/pdfs/") (switch-to-buffer "routes.coffee") (dired-do-shell-command "open -a Skim" nil '("emacs.pdf")) (find-file "/Users/anand/Dropbox/pdfs/") (kill-buffer "*Directory*") (list-directory "/Users/anand/Dropbox/pdfs/") (find-file "/Users/anand/Downloads/Dropbox 1.0.20.dmg") (switch-to-buffer "*Help*") (switch-to-buffer "1-HotPie-from-Screencast") (dired-goto-file "/Users/anand/Downloads/") (kill-buffer "MyIOS") (switch-to-buffer "MyIOS") (kill-buffer "index.js") (dired-do-search "a") (dired-do-shell-command "open -a Skim" nil '("Concurrent Programming.pdf")) (dired-do-shell-command "open" nil '("Concurrent Programming.pdf")) (switch-to-buffer "work") (dired "/Users/anand/Dropbox/work/") (list-directory "/Users/anand/Dropbox/work/") (switch-to-buffer " *code-conversion-work*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "org-mode") (load-theme 'gru nil nil) (kill-buffer "arf.html") (switch-to-buffer "arf.html") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "org-mode") (switch-to-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (list-directory "/Users/anand/Dropbox/work/") (kill-buffer "org-") (find-file "/Users/anand/Dropbox/work/org-") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "org-mode") (describe-function 'highlight-regexp) (describe-function 'isearch-highlight-regexp) (describe-function 'isearch-lazy-highlight-search) (describe-function 'isearch-dehighlight) (switch-to-buffer "*Packages*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "arf.html") (switch-to-buffer "*Packages*") (kill-buffer "arf.html.html") (htmlfontify-buffer) (sgml-mode) (switch-to-buffer "arf.html") (switch-to-buffer "*Packages*") (where-is 'sgml-delete-tag nil) (switch-to-buffer "arf.html") (describe-function 'sgml-delete-tag) (describe-key "n" 1 nil) (describe-key "p" 1 nil) (apropos-command '("narrow") nil) (org-mode-restart) (load-theme 'zenburn nil nil) (describe-key "\363o" 1 nil) (switch-to-buffer "*info*") (switch-to-buffer "*Packages*") (switch-to-buffer "*info*") (redraw-display) (switch-to-buffer "org-mode") (redraw-display) (redraw-display) (redraw-display) (redraw-display) (describe-variable 'glyphless-char-display) (info-apropos "elisp") (info-apropos "lexical-binding") (apropos-command '("lexical") nil) (apropos-command '("lexical-binding") nil) (apropos-command '("current" "theme") nil) (switch-to-buffer "org-mode") (kill-buffer "emacs.el") (apropos-command '("frame-font") nil) (describe-function 'defface) (apropos-command '("face") nil) (describe-variable 'kill-read-only-ok) (describe-function 'org-iswitchb) (describe-function 'org-store-link) (switch-to-buffer "emacs.el") (switch-to-buffer "*Packages*") (describe-variable 'ido-everywhere) (kill-buffer "*Help*") (kill-buffer "arf.html~") (kill-buffer "arf.html") (switch-to-buffer "arf.html") (kill-buffer "arf") (switch-to-buffer "arf") (kill-buffer "stylesheet.css~") (kill-buffer "stylesheet.css") (find-file "/Users/anand/Dropbox/work/org-mode/stylesheet.css") (kill-buffer "arf") (kill-buffer "README") (kill-buffer "doc") (kill-buffer "dir") (kill-buffer "org-7.9-3-ga986d3") (kill-buffer "request-assign-future.txt") (switch-to-buffer "org-7.9-3-ga986d3") (find-file "/Users/anand/Dropbox/work/org-mode/") (shell-command "ls --color=auto --group-directories-first -Gp" nil nil) (shell-command "ls" nil nil) (shell-command "lotr" nil nil) (switch-to-buffer "*Occur*") (switch-to-buffer "init.el") (switch-to-buffer "*Occur*") (switch-to-buffer "*Packages*") (iy-go-to-char 1 121) (switch-to-buffer "init.el") (describe-key "\211" 1 nil) (isearch-occur "" nil) (browse-url "arf.html" nil) (info-apropos "browser") (info-apropos "browser") (info-apropos "browse") (info-apropos "browse") (url-view-url) (describe-function 'url-view-url) (html-mode) (switch-to-buffer "arf.html") (customize-group "rainbow") (winner-mode nil) (switch-to-buffer "scratch.el") (kill-buffer "arf.html") (switch-to-buffer "arf.html") (load-theme 'misterioso nil nil) (load-theme 'tsdh-dark nil nil) (load-theme 'adwaita nil nil) (load-theme 'wombat nil nil) (load-theme 'tango-dark nil nil) (load-theme 'manoj-dark nil nil) (describe-function 'recursive-edit-preserving-window-config) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (customize-group "auto-save") (switch-to-buffer "init.el") (winner-mode nil) (switch-to-buffer "emacs-todo.org") (rainbow-delimiters-mode 'toggle) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "arf.html") (switch-to-buffer "scratch.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (describe-key "\257" 1 nil) (hippie-expand nil) (hippie-expand nil) (describe-function 'hippie-expand) (switch-to-buffer "*Customize Group: Mouse*") (winner-mode nil) (switch-to-buffer "emacs-todo.org") (gpm-mouse-mode 'toggle) (switch-to-buffer "*Customize Apropos*") (customize-apropos '("mouse") nil) (apropos-command '("mouse") nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (custom-theme-visit-theme 'cyberpunk) (describe-theme 'cy) (switch-to-buffer "emacs-todo.org") (web-mode) (switch-to-buffer "scratch.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "scratch.el") (describe-variable 'auto-save-file-name-transforms) (info-apropos "visit") (switch-to-buffer "*info*") (switch-to-buffer "*info*") (switch-to-buffer "scratch.el") (info-apropos "visit") (apropos-library "web-mode") (apropos-documentation '("visit") nil) (apropos-command '("visit") nil) (switch-to-buffer "arf.html") (switch-to-buffer "scratch.el") (kill-buffer "arf") (switch-to-buffer "arf") (find-file "/Users/anand/Dropbox/work/org-mode/arf.html") (find-file "/Users/anand/Dropbox/work/org-mode/arf") (kill-buffer "arf.html") (find-file "/Users/anand/Dropbox/work/org-mode/arf.html") (kill-buffer "arf.html") (switch-to-buffer "arf.html") (switch-to-buffer "scratch.el") (find-file "/Users/anand/Dropbox/work/org-mode/arf.html") (kill-buffer "arf.html") (web-mode-prog-mode) (switch-to-buffer "arf.html") (eval-expression '(require 'web-mode) nil) (switch-to-buffer "scratch.el") (find-file "/Users/anand/Dropbox/work/org-mode/arf.html") (kill-buffer "arf.html") (find-file "/Users/anand/Dropbox/work/org-mode/arf.html") (css-mode) (find-file "/Users/anand/Dropbox/work/org-mode/") (ns-toggle-fullscreen) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (describe-variable 'package-alist) (package-list-packages nil) (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (describe-variable 'package-archive-contents) (describe-variable 'package-archives) (winner-mode nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (org-export-as-html-and-open nil) (switch-to-buffer "new-notes.org") (describe-function 'package-initialize) (switch-to-buffer "init.el") (org-export-as-html-and-open nil) (org-insert-property-drawer) (describe-function 'org-insert-property-drawer) (describe-variable 'org-drawers) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (switch-to-buffer "new-notes.org") (switch-to-buffer "emacs-todo.org") (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (find-file "/Users/anand/Dropbox/work/org-mode/stylesheet.css") (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (org-export-as-html-and-open nil) (kill-buffer "*Org HTML Export*") (org-export-as-html-to-buffer nil) (switch-to-buffer "new-notes.org") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (ispell-region (region-beginning) (region-end)) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*scratch*") (switch-to-buffer "stylesheet.css") (switch-to-buffer "*scratch*") (find-file "/Users/anand/Dropbox/work/org-mode/stylesheet.css") (switch-to-buffer "*scratch*") (switch-to-buffer "*Help*") (describe-function 'web-mode-colorize) (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*GNU Emacs*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*GNU Emacs*") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/my-stuff/color-theme-6.6.0/color-theme.el") (color-theme-gruber-darker) (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (switch-to-buffer "custom.el") (describe-variable 'system-type) (describe-key "" 1 nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "custom.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "gnotify.sh") (switch-to-buffer "custom.el") (switch-to-buffer "*Messages*") (switch-to-buffer "*scratch*") (switch-to-buffer "*Customize Option: Default Frame Alist*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Help*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "gnotify.sh") (revert-buffer-with-coding-system 'utf-8-emacs-mac nil) (revert-buffer-with-coding-system 'utf-8-mac nil) (revert-buffer-with-coding-system 'utf-16 nil) (find-file "/Users/anand/.config/pianobar/gnotify.sh") (switch-to-buffer "init.el") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (find-file "/Users/anand/.emacs.d/custom.el") (winner-mode nil) (winner-mode nil) (switch-to-buffer "gnotify.sh") (switch-to-buffer "emacs-todo.org") (customize-group-other-window "font-lock-faces") (describe-font "") (list-fontsets nil) (apropos-command '("font") nil) (apropos-command '("special") nil) (switch-to-buffer "gnotify.sh") (switch-to-buffer "emacs-todo.org") (winner-mode nil) (apropos-command '("utf") nil) (shell-script-mode) (sh-mode) (find-file "/Users/anand/.config/pianobar/gnotify.sh") (kill-buffer "color-theme-library.el") (switch-to-buffer "color-theme-library.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (color-theme-manoj-dark) (eval-expression '(require 'manoj-colors) nil) (eval-expression '(require 'color-theme-manoj) nil) (color-theme-initialize) (switch-to-buffer "*GNU Emacs*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (color-theme-leuven) (eval-expression '(require 'color-theme-leuven) nil) (eval-expression '(require 'color-theme) nil) (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/color-themes/") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (eval-expression '(require 'color-theme-leuven\.el) nil) (find-file "/Users/anand/.emacs.d/color-themes/color-theme-leuven.el") (eval-expression '(windmove-default-keybindings 'ctrl) nil) (windmove-default-keybindings) (describe-function 'windmove-default-keybindings) (customize-group-other-window "windmove") (describe-key [C-up] 1 nil) (describe-key [C-right] 1 nil) (describe-key [M-right] 1 nil) (describe-key-briefly "\257" nil 1) (apropos-command '("windmove") nil) (kill-buffer "hapi.js") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (winner-mode nil) (describe-key "z" 1 nil) (describe-variable 'ido-use-virtual-buffers) (apropos-command '("winner-mode") nil) (describe-key "^" 1 nil) (enlarge-window 10) (enlarge-window 1) (load-theme 'cy nil nil) (switch-to-buffer "emacs-todo.org") (describe-variable 'org-src-fontify-natively) (org-src-fontify-buffer) (org-shiftleft nil) (switch-to-buffer "emacs-todo.org") (color-theme-comidia) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "emacs-todo.org") (global-unset-key "q") (describe-function 'other-window) (other-window 1) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (recover-session) (bookmark-jump "emacs-todo") (switch-to-buffer "cookies") (describe-function 'revert-buffer) (color-theme-charcoal-black) (switch-to-buffer "init.el") (switch-to-buffer "*Help*") (switch-to-buffer "*Occur*") (switch-to-buffer "init.el") (switch-to-buffer "*Help*") (switch-to-buffer "init.el") (switch-to-buffer "*Occur*") (switch-to-buffer "*Help*") (occur "require" nil) (kill-buffer "2C/init.el") (find-tag-regexp "add") (switch-to-buffer "*Help*") (switch-to-buffer "*Apropos*") (switch-to-buffer "init.el") (switch-to-buffer "init.el") (where-is 'center-line nil) (apropos-command '("fullscreen") nil) (apropos '("fullscreen") nil) (apropos '("allmode") nil) (describe-key "\272" 1 nil) (eval-expression '(+ 1 2) nil) (switch-to-buffer "init.el") (kill-buffer "*RE-Builder*") (re-builder) (describe-function 'allout-mode) (switch-to-buffer "*Packages*") (describe-key "" 1 nil) (occur "add-hook" nil) (switch-to-buffer "init.el") (occur "smart" nil) (switch-to-buffer "hapi.js") (describe-function 'center-line) (describe-key "\357" 1 nil) (switch-to-buffer "init.el") (describe-key "\206" 1 nil) (describe-function 'end-of-defun) (describe-function 'beginning-of-defun) (switch-to-buffer "init.el") (goto-line 964 nil) (switch-to-buffer "*Packages*") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (package-list-packages nil) (color-theme-actress) (switch-to-buffer "hapi.js") (describe-key "q" 1 nil) (bookmark-jump "init.el") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (eval-defun nil) (switch-to-buffer "hapi.js") (switch-to-buffer "*scratch*") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (switch-to-buffer "init.el") (package-list-packages nil) (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (switch-to-buffer "init.el") (switch-to-buffer "hapi.js") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (describe-function 'color-theme-initialize) (describe-key "\351" 1 nil) (switch-to-buffer "init.el") (switch-to-buffer "cover-letter2.txt") (switch-to-buffer "cover-letter.txt") (longlines-auto-wrap nil) (describe-function 'longlines-mode) (longlines-mode 'toggle) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (set-fill-column 90) (apropos-command '("column") nil) (switch-to-buffer "cover-letter2.txt") (describe-variable 'word-wrap) (longlines-auto-wrap nil) (longlines-auto-wrap nil) (apropos-command '("wrap") nil) (set-fill-column 75) (set-fill-column 78) (find-file "/Users/anand/Dropbox/work/cover-letter2.txt") (apropos-command '("long" "lines") nil) (apropos-command '("long-lines") nil) (find-file "/Users/anand/Dropbox/work/cover-letter.txt") (describe-function 'jump-to-mark) (switch-to-buffer "*scratch*") (switch-to-buffer "emacs-todo.org") (describe-function 'set-mark-command) (describe-function 'pop-global-mark) (describe-key [67108896] 1 nil) (describe-key "\340" 1 nil) (bookmark-jump "gls") (switch-to-buffer "init.el") (jump-to-register 9 nil) (describe-key "\204" 1 nil) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (describe-key "\225" 1 nil) (describe-key [201326624] 1 nil) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (apropos-command '("swap") nil) (transient-mark-mode 'toggle) (describe-key "t" 1 nil) (describe-function 'transient-mark-mode) (describe-variable 'next-line-add-newlines) (mouse-avoidance-mode '##) (mouse-avoidance-mode 'animate) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/init.el") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el") (kill-buffer "Actor Model of Computation- Scalable Robust Information Systems.pdf") (find-file "/Users/anand/Downloads/Actor Model of Computation- Scalable Robust Information Systems.pdf") (load-theme 'sanityinc-solarized-dark nil nil) (load-theme 'sanityinc-solarized-d nil nil) (switch-to-buffer "org-mode") (switch-to-buffer "*Packages*") (switch-to-buffer "bashrc.sh") (switch-to-buffer "*Packages*") (find-file "/Users/anand/Dropbox/work/org-mode/bashrc.sh") (switch-to-buffer "*Customize Group: The Emacs shell*") (customize-group "doc-view") (kill-buffer "Concurrent Programming.pdf") (find-file "/Users/anand/Dropbox/work/Concurrent Programming.pdf") (switch-to-buffer "*Packages*") (shrink-window 9) (enlarge-window 9) (enlarge-window 1) (enlarge-window 1) (enlarge-window 1) (enlarge-window 1) (shrink-window 1) (shrink-window 1) (switch-to-buffer "*scratch*") (shrink-window 1) (switch-to-buffer "*eshell*") (describe-key "" 1 nil) (eshell-previous-matching-input "lotr" 1) (switch-to-buffer "*eshell*") (apropos-command '("rebind") nil) (switch-to-buffer "*Customize Group: The Emacs shell*") (customize-group "eshell") (eshell-insert-buffer-name "*Help*") (eshell-next-matching-input "erpa" 1) (switch-to-buffer "*scratch*") (switch-to-buffer "*eshell*") (eshell nil) (switch-to-buffer "*Messages*") (find-file "/Users/anand/Dropbox/work/src/leaderboard/leaderboard.css") (switch-to-buffer "*Customize Group: Environment*") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Group: Ns*") (find-file "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el") (switch-to-buffer "init.el") (describe-key " " 1 nil) (switch-to-buffer "*Customize Group: Emacs*") (apropos-command '("customize") nil) (iy-go-to-char 1 101) (switch-to-buffer "init.el") (apropos-command '("alt-modifier") nil) (switch-to-buffer "init.el") (apropos-command '("alt") nil) (apropos-command '("ns-") nil) (apropos-command '("option") nil) (switch-to-buffer "init.el") (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/init.el") (describe-key "\361" 1 nil) (apropos-command '("prefer") nil) (switch-to-buffer "*Customize Group: The Emacs shell*") (switch-to-buffer ".meteor") (man "git-add") (man "git") (shell-command "grep -r -e \"function (key,value)\" .meteor/*" nil nil) (shell-command "grep -r -e \"Session\" .meteor/*" nil nil) (shell-command "grep -r -e \"Session\" ./*" nil nil) (shell-command "grep -r -e \"Session\" ../*" nil nil) (describe-function 'rgrep) (rgrep "\"Session\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"function (key,value)\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"function(key,value)\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (rgrep "\"Session.set\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (lgrep "\"Session.set\"" "* .*" "~/Dropbox/work/src/leaderboard/" nil) (grep "grep -nH -e \"Session.set\" *") (grep "grep -nH -e \"Session.set\" ./") (grep "grep -nH -e \"Session.set\"") (manual-entry "npm") (kill-buffer "*ansi-term*") (switch-to-buffer "*ansi-term*") (switch-to-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (cd "~/Dropbox/work/org-mode/") (kill-buffer ".saves-*") (kill-buffer ".saves-61616-anands-mbp.local~") (find-file "/Users/anand/Dropbox/work/org-mode/bashrc.sh") (switch-to-buffer "*Packages*") (apropos-command '("color") nil) (apropos-command '("syntax") nil) (shell-mode) (find-file "/Users/anand/.bashrc") (switch-to-buffer "*Packages*") (describe-key "b" 1 nil) (describe-bindings) (describe-function 'describe-bindings) (disable-paredit-mode) (switch-to-buffer "*eshell*") (Info-goto-emacs-key-command-node "") (Info-goto-emacs-key-command-node "") (where-is 'grep nil) (apropos-command '("keybinding") nil) (apropos-documentation '("define-key") nil) (apropos-command '("define" "key") nil) (apropos-command '("definekey") nil) (apropos-command '("bind" "key") nil) (apropos-command '("keybinds") nil) (apropos-command '("keybindings") nil) (describe-key-briefly "\347a" nil 1) (describe-key "\347	" 1 nil) (lgrep "server" "* .*" "~/Dropbox/work/org-mode/" nil) (kill-buffer "*Man grep*") (kill-buffer "*grep*") (grep "grep -nH --color -e server hapi.js") (grep "grep -nH -e \"server\" hapi.js") (kill-buffer "*grep*") (switch-to-buffer "*grep*") (grep "grep -nH -e 'arf'") (grep "grep -nH -e \"hapi*\"") (grep "grep -nH -e \"hapi\"") (grep "grep -nH -e hapi*") (grep "grep -nH -e hapi") (grep "grep -nH -e ") (switch-to-buffer "*eshell*") (switch-to-buffer "*Packages*") (switch-to-buffer "hapi.js") (paredit-mode 'toggle) (kill-buffer "emacs.el") (switch-to-buffer "emacs.el") (switch-to-buffer "*eshell*") (delete-char 1 nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (switch-to-buffer "hapi.js") (switch-to-buffer "hapi.js") (switch-to-buffer "emacs-todo.org") (color-theme-solarized-dark) (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (apropos-command '("command") nil) (apropos-command '("commands") nil) (switch-to-buffer "*eshell*") (describe-key "nn" 1 nil) (switch-to-buffer "*eshell*") (kill-buffer "NEWS") (switch-to-buffer "NEWS") (view-emacs-news nil) (eshell-previous-matching-input "ls -p" 1) (eshell-next-matching-input "arf" 1) (switch-to-buffer "*eshell*") (switch-to-buffer "*Customize Group: The Emacs shell*") (describe-variable 'dired-listing-switches) (switch-to-buffer "*eshell*") (eshell nil) (switch-to-buffer "*eshell*") (customize-group-other-window "eshell-alias") (customize-group-other-window "eshell-mode") (switch-to-buffer "*Customize Group: The Emacs shell*") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (load-theme 'ze nil nil) (switch-to-buffer "*eshell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*eshell*") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (eshell nil) (eshell-command) (testx "arf") (testx "arf") (testx "blerg") (testx "arf") (testx) (switch-to-buffer "*eshell*") (switch-to-buffer "*Messages*") (describe-variable 'font-lock-maximum-decoration) (describe-function 'ansi-color-make-color-map) (switch-to-buffer "*eshell*") (describe-variable 'ansi-color-map) (describe-variable 'ansi-color-names-vector) (switch-to-buffer "*eshell*") (kill-buffer "alias") (find-file-at-point) (describe-function 'find-file-at-point) (goto-last-change nil) (switch-to-buffer "hapi.js") (goto-last-change nil) (goto-last-change nil) (switch-to-buffer "emacs-todo.org") (package-list-packages nil) (describe-key "" 1 nil) (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Ansi Colors*") (switch-to-buffer "*shell*") (customize-group "ansi-colors") (ansi-color-for-comint-mode-filter) (switch-to-buffer "*shell*") (switch-to-buffer "*eshell*") (apropos-command '("ty-color-mode") nil) (switch-to-buffer "*eshell*") (eshell-insert-buffer-name "*shell*") (kill-buffer "arf") (switch-to-buffer "*eshell*") (switch-to-buffer "*shell*") (eshell nil) (switch-to-buffer "*shell*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*shell*") (switch-to-buffer "*shell*") (dirs) (switch-to-buffer "*shell*") (switch-to-buffer "*scratch*") (lisp-eval-defun) (switch-to-buffer "*shell*") (switch-to-buffer "*Customize Group: Shell*") (customize-group "shell") (switch-to-buffer "*shell*") (shell nil) (switch-to-buffer "emacs-todo.org") (describe-variable 'explicit-shell-file-name) (kill-buffer "*terminal*") (terminal-emulator "*terminal*" "/bin/bash" nil) (kill-buffer "*Shell Command Output*") (kill-buffer "*Shell Command Output*") (shell-command "ls --color=auto --group-directories-first" nil nil) (kill-buffer "*Shell Command Output*") (kill-buffer ".bash_history") (kill-buffer "*shell*") (kill-buffer "*terminal*") (switch-to-buffer "org-mode") (switch-to-buffer "*Customize Group: Dired*") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "Elevated|SEO.html") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html") (switch-to-buffer "*Customize Group: Dired*") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (find-file "/Users/anand/Dropbox/work/org-mode/") (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (kill-buffer "arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (kill-buffer "org.org") (find-file "/Users/anand/Dropbox/work/org-mode/org.org") (describe-key [f2] 1 nil) (describe-key [f1] 1 nil) (switch-to-buffer "emacs-todo.org") (load-theme 'c nil nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (kill-buffer "*info*") (Info-goto-node "(org)" nil) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "*Apropos*") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (setenv "PATH" "/usr/local/opt/coreutils/libexec/gnubin:/Users/anand/.rbenv/shims:/usr/local/bin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin" t) (setenv "PATH" "(shell-command-to-string \"source $HOME/.bashrc && printf $PATH\")" t) (clipboard-yank) (getenv "LS_COLORS") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (switch-to-buffer "org-mode") (setenv "LS_COLORS" "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:" t) (getenv "") (clipboard-yank) (switch-to-buffer "*Customize Group: Dired*") (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (find-file "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "*Customize Group: Dired*") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "work") (kill-buffer "org-mode") (switch-to-buffer "work") (switch-to-buffer "*Customize Group: Dired*") (find-file "/Users/anand/Dropbox/work/org-mode/") (eval-buffer) (find-file "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el") (apropos-command '("emacs") nil) (apropos-command '("reload") nil) (apropos-command '("restart") nil) (apropos-command '("reset") nil) (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "org-mode") (switch-to-buffer "*Customize Group: Dired*") (describe-function 'dired-do-load) (dired-do-load nil) (switch-to-buffer "org-mode") (kill-buffer "cover-letter2.txt") (check-ispell-version 1) (switch-to-buffer "cover-letter2.txt") (describe-variable 'ispell-program-name) (check-ispell-version 1) (apropos-command '("ispell") nil) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-kill-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/cover-letter2.txt") (kill-buffer "financial1-propsosal.txt") (find-file "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt") (kill-buffer "*info*") (switch-to-buffer "*Help*") (Info-index "visual-line-mode") (switch-to-buffer "emacs-todo.org") (apropos-command '("visual-line-mode") nil) (describe-key "" 1 nil) (switch-to-buffer "emacs-todo.org") (hippie-expand nil) (hippie-expand nil) (hippie-expand nil) (hippie-expand nil) (apropos-command '("hippie") nil) (switch-to-buffer "hapi.js") (find-file "/Users/anand/Dropbox/work/org-mode/") (switch-to-buffer "*Customize Group: Dired*") (clipboard-yank) (clipboard-yank) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Customize Option: Dired Listing Switches*") (find-file "/Users/anand/") (find-file "/Users/anand/Dropbox/work/org-mode/") (kill-buffer "Elevated|SEO.html") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html") (kill-buffer "public") (kill-buffer "work") (kill-buffer "org-mode") (switch-to-buffer "*Customize Option: Dired Listing Switches*") (kill-buffer "org-mode") (clipboard-yank) (switch-to-buffer "arf") (switch-to-buffer "org-mode") (rename-buffer "arf" nil) (switch-to-buffer "*Help*") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/") (bookmark-bmenu-list) (describe-key "rb" 1 nil) (clipboard-yank) (switch-to-buffer "index.html") (switch-to-buffer "hapi.js") (switch-to-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/public/index.html") (apropos-command '("split") nil) (comment-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (comment-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/hapi.js") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "new-notes.org") (switch-to-buffer "responsive-child.css") (switch-to-buffer "notes.org") (switch-to-buffer "Elevated|SEO.org") (switch-to-buffer "notes.org") (eval-buffer) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el") (dired "/Users/anand/Dropbox/work/org-mode/") (clipboard-yank) (kill-buffer "OutlineforAndrewsOnlineMarketingWindow.rtf") (find-file "/Users/anand/Downloads/OutlineforAndrewsOnlineMarketingWindow.rtf") (switch-to-buffer "notes.org") (color-theme-infodoc) (color-theme-high-contrast) (color-theme-simple-1) (color-theme-railscasts) (color-theme-sanityinc-solarized-dark) (switch-to-buffer "Elevated|SEO.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/she-proposal.txt") (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-yank) (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "Elevated|SEO.org") (clipboard-yank) (clipboard-kill-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/elevated/jeff-bio.txt") (switch-to-buffer "Elevated|SEO.org") (switch-to-buffer "responsive.css") (switch-to-buffer "responsive-child.css") (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "responsive.css") (clipboard-yank) (switch-to-buffer "responsive-child.css") (clipboard-kill-region (region-beginning) (region-end)) (clipboard-kill-region (region-beginning) (region-end)) (switch-to-buffer "responsive.css") (switch-to-buffer "responsive-child.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/responsive.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/elevated/responsive-child.css") (find-file "/Users/anand/Downloads/lh_wordpress_blank_theme/style.css") (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.org") (switch-to-buffer "Elevated|SEO.org<2>") (find-file "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt") (clipboard-kill-region (region-beginning) (region-end)) (org-export-as-html-and-open nil) (flyspell-buffer) (apropos-command '("spell") nil) (checkdoc-ispell) (org-occur "lind" nil) (describe-key-briefly "/" nil 1) (org-narrow-to-subtree) (describe-function 'narrow-to-region) (describe-function 'org-outline-level) (describe-key-briefly "" nil 1) (describe-key-briefly "n" nil 1) (describe-variable 'org-startup-indented) (describe-variable 'ns-control-modifier) (describe-variable 'ns-command-modifier) (describe-variable 'ns-option-modifier) (describe-variable 'ns-function-modifier) (recover-file "~/Dropbox/work/org-mode/Elevated|SEO.org") (recover-file "~/Dropbox/work/org-mode/#Elevated|SEO.org#") (clipboard-yank) (clipboard-yank) (switch-to-buffer "Elevated|SEO.org") (dired-other-window "~/Dropbox/work/org-mode/" nil) (describe-key "e" 1 nil) (clipboard-kill-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/proposals.org") (org-reload nil) (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (switch-to-buffer "proposals.org") (switch-to-buffer "notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/proposals.org") (switch-to-buffer "notes.org") (web-mode-indent-line) (switch-to-buffer "index.html") (web-mode-indent-buffer) (switch-to-buffer "elevatedseo.html") (package-list-packages nil) (clipboard-yank) (switch-to-buffer "index.html") (nxml-mode) (comment-region (region-beginning) (region-end) nil) (switch-to-buffer "index.html") (apropos-command '("line") nil) (apropos-command '("numbers") nil) (sgml-tag-help "header") (sgml-tag-help "aside") (sgml-tag-help "div") (sgml-tag-help "body") (switch-to-buffer "Sites") (dired-other-window "~/Sites/" nil) (apropos-command '("dired") nil) (apropos-command '("file") nil) (switch-to-buffer "elevatedseo.html") (switch-to-buffer "index.html") (describe-function 'push-mark) (describe-function 'set-mark) (describe-key-briefly [67108896] nil 1) (switch-to-buffer "TUTORIAL") (switch-to-buffer "elevatedseo.html") (apropos-command '("mark") nil) (switch-to-buffer "TUTORIAL") (switch-to-buffer "*Help*") (replace-string "changed" "altered" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (switch-to-buffer "TUTORIAL") (switch-to-buffer "elevatedseo.html") (describe-key "" 1 nil) (apropos-command '("move") nil) (apropos-command '("jump") nil) (apropos-command '("top") nil) (clipboard-yank) (find-file "/Users/anand/Sites/elevatedseo.html") (clipboard-yank) (clipboard-yank) (apropos-command '("search") nil) (describe-key [67108906] 1 nil) (find-file "/Users/anand/Sites/index.html") (eshell nil) (rot13-region (region-beginning) (region-end)) (switch-to-buffer "notes.org") (describe-key "$" 1 nil) (find-file "/Users/anand/Dropbox/work/animal.rb") (kill-buffer "arf.rb") (find-file "/Users/anand/Dropbox/work/org-mode/arf.rb") (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (indent-region (region-beginning) (region-end) nil) (clipboard-yank) (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "*Help*") (switch-to-buffer "accounts.dat") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/accounts.dat") (describe-key [C-down] 1 nil) (describe-key [S-down] 1 nil) (clipboard-yank) (clipboard-yank) (describe-function 'org-display-outline-path) (describe-function 'find-grep) (rot13-region (region-beginning) (region-end)) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "notes.org") (apropos-documentation '("flex") nil) (apropos-command '("flex") nil) (redraw-display) (occur "defun" nil) (switch-to-buffer "scratch-emacs.el") (describe-function 'mark-defun) (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (switch-to-buffer "notes.org") (switch-to-buffer "init.el") (iy-go-to-char-backward 1 99) (eval-region (region-beginning) (region-end)) (switch-to-buffer "iy-go-to-char.el") (describe-key "," 1 nil) (describe-key ";" 1 nil) (describe-key "f" 1 nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "iy-go-to-char.el") (dired "~/.emacs.d/my-stuff/" nil) (switch-to-buffer "iy-goto-char.el") (iy-go-to-char 1 99) (switch-to-buffer "scratch-emacs.el") (clipboard-yank) (find-file "/Users/anand/.emacs.d/my-stuff/iy-goto-char.el") (describe-function 'goto-char) (describe-key "rj" 1 nil) (describe-key "k" 1 nil) (describe-key "x" 1 nil) (apropos-command '("rectangle") nil) (rot13-region (region-beginning) (region-end)) (string-rectangle (region-beginning) (region-end) "arf") (switch-to-buffer "notes.org") (switch-to-buffer "*nrepl*") (apropos-command '("encrypt") nil) (apropos-command '("sha") nil) (rot13-region (region-beginning) (region-end)) (rot13-region (region-beginning) (region-end)) (apropos-command '("rot13") nil) (redraw-display) (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "*nrepl*") (describe-function 'setq-default) (kill-buffer "electric.el.gz") (customize-group "electricity") (describe-function 'electric-pair-mode) (apropos-command '("electric") nil) (describe-variable 'electric-pair-mode) (describe-key "\360" 1 nil) (switch-to-buffer "scratch-emacs.el") (manual-entry "ls") (apropos-command '("man") nil) (clipboard-yank) (clipboard-yank) (clipboard-yank) (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "init.el") (describe-variable 'nrepl-popup-stacktraces) (eval-expression '(setq nrepl-popup-stacktraces nil) nil) (switch-to-buffer "init.el") (clipboard-yank) (nrepl-jack-in nil) (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*GNU Emacs*") (switch-to-buffer "*Messages*") (package-list-packages nil) (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (locate-library "color-theme" nil nil t) (switch-to-buffer "snippets-notes.clj") (eval-expression '(setq scroll-margin 2) nil) (nrepl-jack-in nil) (find-file "/Users/anand/Dropbox/work/snippets-notes.clj") (clipboard-yank) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Packages*") (customize-variable 'scroll-margin) (eval-buffer) (switch-to-buffer "init.el") (package-list-packages nil) (package-refresh-contents) (describe-function 'package-refresh-contents) (describe-function 'setcdr) (switch-to-buffer "*Help*") (switch-to-buffer "init.el") (describe-variable 'default-directory) (describe-function 'normal-top-level-add-to-load-path) (switch-to-buffer "conways-game-of-life.clj") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/conways-game-of-life.clj") (kill-buffer "*ielm*") (switch-to-buffer "scratch-emacs.el") (ielm) (clipboard-yank) (redraw-display) (zap-to-char 1 116) (eval-expression '(setq scroll-margin 5) nil) (describe-variable 'scroll-margin) (redraw-display) (indent-rigidly (region-beginning) (region-end) 1) (indent-for-tab-command nil) (find-file "/Users/anand/.emacs.d/init.el") (kill-buffer ".clj_completions-long-list") (find-file "/Users/anand/.clj_completions-long-list") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (describe-function 'delete-window) (describe-key "1" 1 nil) (switch-to-buffer "emacs-todo.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (align-regexp 115 115 "\\(\\s-*\\)" 1 1 nil) (spook) (switch-to-buffer "emacs-todo.org") (bookmark-jump "notes.org") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (find-file "/Users/anand/.emacs.d/custom.el") (find-file "/Users/anand/.emacs.d/init.el") (customize-variable 'bookmark-save-flag) (customize-variable 'bookmark-default-file) (bookmark-jump "org-refile-last-stored") (describe-key "rm" 1 nil) (describe-key "r " 1 nil) (jump-to-register 97 nil) (switch-to-buffer "emacs-todo.org") (point-to-register 97 nil) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (vc-dir "/Users/anand/Dropbox/work/org-mode/" nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (describe-key "" 1 nil) (describe-key [C-M-down] 1 nil) (describe-function 'process-status) (w3m-browse-url "http://duckduckgo.com" nil) (eval-expression '(autoload 'w3m-browse-url "w3m" "arf" t) nil) (eval-expression '(autoload 'w3m-load) nil) (switch-to-buffer "init.el") (switch-to-buffer "new-notes.org") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "new-notes.org") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "new-notes.org") (switch-to-buffer "custom.el") (customize-variable 'org-default-notes-file) (find-file "/Users/anand/.emacs.d/custom.el") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (switch-to-buffer "*Customize Option: Org Capture Templates*") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "new-notes.org") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Customize Option: Org Capture Templates*") (find-file "/Users/anand/Dropbox/work/org-mode/new-notes.org") (find-file "/Users/anand/Dropbox/work/scratch-emacs.el") (switch-to-buffer "*Customize Option: Org Capture Templates*") (find-file "/Users/anand/Dropbox/work/org-mode/notes.org") (switch-to-buffer "emacs-todo.org") (clipboard-yank) (find-file "/Users/anand/.emacs.d/init.el") (describe-key "c" 1 nil) (switch-to-buffer "emacs-todo.org") (describe-function 'org-capture) (describe-variable 'org-version) (describe-variable 'org-default-notes-file) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/init.el") (info-lookup-symbol "C-h" 'help-mode) (describe-input-method nil) (switch-to-buffer "*Help*") (ns-popup-color-panel) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (find-file "/Users/anand/.emacs.d/init.el") (describe-function 'org-ctrl-c-star) (describe-key "*" 1 nil) (describe-key [228] 1 nil) (describe-key [160] 1 nil) (switch-to-buffer "emacs-todo.org") (describe-key-briefly "" nil 1) (switch-to-buffer "emacs-todo.org") (Info-goto-emacs-key-command-node "") (describe-key "a" 1 nil) (describe-variable 'org-mode-map) (describe-variable 'mode-specific-map) (describe-function 'ESC-prefix) (describe-function 'Control-X-prefix) (apropos-command '("keymap") nil) (describe-function 'define-prefix-command) (describe-variable 'org-agenda-keymap) (describe-key "" 1 nil) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (describe-variable 'ctl-x-map) (describe-function 'global-set-key) (describe-variable 'global-map) (apropos-command '("key-map") nil) (describe-function 'define-key-after) (customize-group "org") (redraw-display) (find-file "/Users/anand/.emacs.d/init.el") (global-centered-cursor-mode 'toggle) (eval-expression '(require 'centered-cursor-mode) nil) (find-file "/Users/anand/.emacs.d/init.el") (eval-buffer) (find-file "/Users/anand/.emacs.d/init.el" t) (find-file "/Users/anand/.emacs.d/custom.el") (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (switch-to-buffer "*Messages*") (eval-buffer) (indent-region (region-beginning) (region-end) nil) (clipboard-yank) (clipboard-yank) (describe-function 'add-hook) (describe-variable 'after-init-hook) (switch-to-buffer "init.el") (find-file "/Users/anand/.emacs.d/custom.el") (describe-variable 'initial-frame-alist) (describe-function 'frame-notice-user-settings) (describe-variable 'frame-notice-user-settings) (describe-function 'ns-initialize-window-system) (customize-variable 'package-load-list) (find-file "/Users/anand/.emacs.d/init.el") (switch-to-buffer "*Messages*") (find-file "/Users/anand/.emacs.d/init.el") (eval-expression '(require 'color-theme-actress) nil) (switch-to-buffer "*Messages*") (find-file "~/.emacs.d/custom.el" t) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "custom.el") (switch-to-buffer "emacs-todo.org") (customize-variable 'default-frame-alist) (customize-apropos '("cursor-color") nil) (customize-apropos-faces "background-color") (customize-apropos '("background-color") nil) (switch-to-buffer "custom.el") (customize-apropos '("background") nil) (describe-function 'ns-font-name) (describe-key [24 67108907] 1 nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "custom.el") (switch-to-buffer "*Customize Face: Default*") (switch-to-buffer "*Messages*") (switch-to-buffer "*Messages*") (list-faces-display nil) (apropos-command '("height") nil) (apropos-command '("pixels") nil) (apropos-command '("fontsize") nil) (apropos-command '("size") nil) (apropos-command '("(font" "size)") nil) (apropos-command '("font" "size") nil) (switch-to-buffer "*Messages*") (clipboard-yank) (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/automata.org") (org-indent-mode 'toggle) (kill-buffer "stylesheet.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/stylesheet.css") (clipboard-yank) (find-file "/Users/anand/Dropbox/work/org-mode/literate-example.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.org") (switch-to-buffer "*Messages*") (switch-to-buffer "*Customize Group: Auto Save*") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.org") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (switch-to-buffer "*Messages*") (switch-to-buffer "*Customize Group: Auto Save*") (redraw-display) (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.org") (kill-buffer "emacs-todo.html") (find-file "/Users/anand/Dropbox/work/org-mode/emacs-todo.html") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*Messages*") (customize-group-other-window "auto-save") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Messages*") (eval-buffer) (eval-buffer) (eval-expression '(require 'blink-colored-cursor) nil) (eval-expression '(require 'blink-colored-cursorarf) nil) (eval-buffer) (eval-expression '(directory-files my-stuff t) nil) (describe-function 'add-to-list) (eval-expression 'load-path nil) (eval-expression '(add-to-list 'foo 'wrum) nil) (eval-expression '(add-to-list 'foo 'ruf) nil) (eval-expression '(add-to-list foo 'ruf) nil) (eval-expression '(defvar foo '(arf bark)) nil) (eval-expression '(add-to-list '(arf bark) 'ruf) nil) (eval-expression '(list 'arf 'bark) nil) (eval-expression '(add-to-list '(list 'arf 'bark) 'ruf) nil) (eval-expression '(add-to-list (list 'arf 'bark) 'ruf) nil) (describe-key "0" 1 nil) (describe-key "" 1 nil) (kill-buffer "blink-colored-cursor.el") (clipboard-yank) (eval-expression '(directory-files dotfiles-dir t "\\w+") nil) (eval-expression '(directory-files dotfiles-dir t) nil) (eval-expression '(directory-files dotfiles-dir) nil) (eval-expression '(directory-files) nil) (describe-function 'fboundp) (describe-function 'provide) (find-file "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el") (write-region (region-beginning) (region-end) "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el" nil nil nil 1) (describe-function 'write-region) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "*Customize Apropos*") (comment-region (region-beginning) (region-end) nil) (describe-variable 'ring-bell-function) (customize-variable-other-window 'kill-read-only-ok) (eval-expression '(concat dotfiles-dir "my-stuff/") nil) (eval-expression '(expand-file-name "my-stufffsd" dotfiles-dir) nil) (eval-expression '(expand-file-name "my-stuff" dotfiles-dir) nil) (eval-expression '(concat dotfiles-dir "my-stuff") nil) (set-fill-column 0) (set-fill-column 95) (describe-variable 'fill-column) (describe-function 'global-linum-mode) (switch-to-buffer "scratch-emacs.el") (describe-key "" 1 nil) (switch-to-buffer "init.el") (redraw-display) (toggle-word-wrap nil) (redraw-display) (toggle-word-wrap nil) (toggle-word-wrap nil) (toggle-word-wrap nil) (toggle-word-wrap nil) (describe-function 'toggle-word-wrap) (toggle-word-wrap nil) (redraw-display) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (eval-expression '(kbd "C-c q") nil) (eval-expression '(kbd "C-c") nil) (describe-function 'kbd) (switch-to-buffer "init.el") (quit-other-window) (describe-key "" 1 nil) (describe-key "q" 1 nil) (eval-expression '(command-execute "q") nil) (eval-expression '(command-execute) nil) (eval-expression '(insert-char (string-to-char "q") 1) nil) (eval-expression '(string-to-char "q") nil) (eval-expression '(insert-char \`q\` 1) nil) (eval-expression '(insert-char q 1) nil) (eval-expression '(self-insert-command <q>) nil) (eval-expression '(self-insert-command \064) nil) (eval-expression '(self-insert-command "q") nil) (self-insert-command 1) (self-insert-command 1) (self-insert-command 1) (describe-key "q" 1 nil) (eval-expression '(insert-char 'q 1) nil) (eval-expression '(insert-char 'q '1) nil) (eval-expression '(insert-char "q" 1) nil) (eval-expression '(insert-char "q") nil) (describe-function 'insert-char) (eval-expression 'brar nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "scratch-emacs.el") (other-window 1) (other-window 1) (other-window 0) (redraw-display) (switch-to-buffer "init.el") (redraw-display) (w3m-goto-url "http://www.accuweather.com/en/us/omaha-ne/68124/weather-forecast/349291" nil nil) (w3m-browse-url "wunderground.com" nil) (w3m-goto-url "http://www.google.com/search?btnI=I%27m+Feeling+Lucky&ie=UTF-8&oe=UTF-8&q=duckduckgo.com" nil nil) (w3m-goto-url "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" nil nil) (w3m-goto-url "http://wunderground.com" nil nil) (switch-to-buffer "*w3m*") (apropos-command '("scroll") nil) (describe-function 'overwrite-mode) (overwrite-mode 'toggle) (describe-variable 'overwrite-mode) (apropos-command '("overstrike") nil) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (kill-buffer "emacs.el") (apropos-command '("redraw") nil) (apropos-command '("refresh") nil) (switch-to-buffer "*w3m*") (recover-file "/Users/anand/Dropbox/work/org-mode/emacs.el") (switch-to-buffer "notes.org") (switch-to-buffer "init.el") (switch-to-buffer "*Customize Apropos*") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (kill-buffer ".notes") (find-file "/Users/anand/.notes") (switch-to-buffer "emacs-todo.org") (org-remember nil) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (switch-to-buffer "*Packages*") (customize-apropos '("history") nil) (switch-to-buffer "init.el") (switch-to-buffer "*w3m*") (w3m "duckduckgo.com" nil t) (switch-to-buffer "emacs-todo.org") (switch-to-buffer "*Help*") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "init.el") (describe-key [f4] 1 nil) (switch-to-buffer "*Customize Option: Ido Ignore Buffers*") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (eval-expression '(concat dotfiles-dir "arf") nil) (eval-expression 'dotfiles-dir nil) (switch-to-buffer "scratch-emacs.el") (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org") (switch-to-buffer "emacs-todo.org") (color-theme-monokai) (switch-to-buffer "init.el") (switch-to-buffer "emacs-todo.org")))
(setq regexp-history '(";;;; .+" ";;;;" "pick" "git" "line" "arf" "require" "add-hook" "smart" "defun" "clojure"))
(setq w3m-input-url-history '("http://www.accuweather.com/en/us/omaha-ne/68124/weather-forecast/349291" "duckduckgo.com" "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "http://wunderground.com" "http://www.aviationweather.gov/adds/metars/?station_ids=koma&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "http://stackoverflow.com/questions/892378/how-do-i-fix-the-cursor-to-the-middle-of-the-screen-in-emacs-so-that-the-page-m" "http://www.50ply.com/blog/2012/08/13/introducing-impatient-mode/" "http://50ply.com" "http://bing.com" "http://adamspiers.org/computing/elisp/smooth-scrolling.el" "http://www.emacswiki.org/emacs/SiteMap" "http://ukmac.net/2010/12/08/reeder-for-osx-draft-3/" "http://madeatgloria.com/brewery/silvio/reeder" "#" "http://#www.google.com/reader/m/view/" "http://www.google.com/reader" "http://google.com" "http://www.google.com/reader/m/view" "https://m.pinboard.in/u:madgnome/" "http://pinboard.in" "http://lifehacker.com/" "HOME" "Home" "about:" "http://www.emacswiki.org/emacs/download/ring%2b.el" "http://www.emacswiki.org/cgi-bin/wiki/ring+.el" "http://www.google.com/cse?cx=004774160799092323420:6-ff2s0o6yi&q=ring%2B&sa=Search" "http://emacswiki.org" "http://duckduckgo.com/lite" "http://duckduckgo.com" "http://www.emacswiki.org/emacs/Icicles_-_Libraries" "http://www.emacswiki.org/emacs/icicles-install.el"))
(setq face-name-history '("hi-yellow" "hl-line" "show-paren-match" "region" "cursor" "paren-face-match" "default"))
(setq Info-search-history '("evil" "bookm" "ido" "session" "icicles" "ido" "switching" "vip" "prefix" "keymap" "cookie" "w3m" "keymap" "completion" "icicles"))
(setq w3m-bookmark-section-history '("Weather" "Emacs" "a"))
(setq extended-command-history '("customize-unsaved" "emacs-uptime" "org-time-stamp-inactive" "linum-mode" "visual-line-mode" "customize-group" "hl-line-mode" "rainbow-mode" "unhighlight-regexp" "isearch-highlight-regexp" "isearch-backward" "litable-mode" "eldoc-mode" "litable-refresh" "package-list-packages-no-fetch" "undo-tree-visualizer-toggle-timestamps" "undo-tree-visualize" "imenu" "emacs-lisp-mode" "imenu-add-to-menubar" "imenu-add-menubar-index" "occur" "customize-face" "customize-option-other-window" "command-history" "menu-bar-left-scroll-bar" "scroll-bar-mode" "mouse-wheel-mode" "customize-themes" "pwd" "line-number-mode" "column-number-mode" "customize-face-other-window" "customize-group-other-window" "org-timestamp-up-day" "org-timestamp-up" "org-time-stamp" "load-theme" "describe-theme" "indent-region" "untabify" "ispell" "rot13-region" "apropos-library" "comment-region" "tabify" "custom-describe-theme" "package-list-packages" "align-regexp" "revert-buffer" "ansi-term" "align-current" "edit-tab-stops" "indent-to" "reveal-mode" "visible-mode" "eshell" "eshell-quit-process" "eshell-kill-process" "eshell-send-eof-to-process" "read-only-mode" "evil-local-mode" "menu-bar-mode" "markdown-mode" "clipboard-yank" "key-chord-describe" "evil-leader/set-key" "package-install" "woman" "evil-mode" "markdown-mode-menu" "manual-entry" "ispell-buffer" "global-visual-line-mode" "markdown-open" "markdown-preview" "javascript-mode" "js2-mode" "font-lock-mode" "highlight-phrase" "hi-lock-mode" "regexp-builder" "ispell-word" "ff" "eshell-list-history" "el-get-update" "el-get-list-packages" "el-get-describe" "el-get-self-update" "unload-feature" "el-get-version" "highlight-changes-visible-mode" "coffee-compile-buffer" "version" "time-stamp" "speedbar" "goto-last-change" "pp-eval-expression" "set-cursor-color" "zone" "apropos-value" "apropos-documentation" "apropos" "apropos-command" "apropos-variable" "ert" "browse-url" "newline-and-indent" "join-line" "doc-view-mode" "doc-view-first-page" "info-apropos" "dired" "dired-do-kill-lines" "dired-undo" "dired-reset-subdir-switches" "dired-do-redisplay" "dired-build-subdir-alist" "smooth-scroll-lines-from-window-top" "server-start" "dired-omit-mode" "ido-mode" "customize-variable-other-window" "coffee-js2coffee-replace-region" "coffee-send-region" "coffee-repl" "coffee-version" "coffee-mode-menu" "coffee-imenu-create-index" "coffee-indent-line" "js2-mode-hide-comments" "js2-mode-hide-functions" "coffee-mode" "js2-mode-customize" "ediff-quit" "ediff" "ediff3" "show-paren-mode" "dash-at-point" "info-emacs-manual" "mouse-avoidance-mode" "centered-cursor-mode" "clipboard-kill-region" "toggle-read-only" "ansi-color-for-comint-mode-on" "ansi-color-for-comint-mode-off" "shell-copy-environment-variable" "getenv" "list-colors-display" "set-default-font" "winner-mode" "write-file" "htmlfontify-buffer" "sgml-mode" "org-mode-restart" "redraw-display" "isearch-occur" "url-view-url" "html-mode" "rainbow-delimiters-mode" "hippie-expand" "gpm-mouse-mode" "web-mode" "web-mode-prog-mode" "css-mode" "ns-toggle-fullscreen" "org-export-as-html-and-open" "org-insert-property-drawer" "org-export-as-html-to-buffer" "ispell-region" "color-theme-gruber-darker" "revert-buffer-with-coding-system" "describe-font" "list-fontsets" "shell-script-mode" "sh-mode" "color-theme-manoj-dark" "color-theme-initialize" "color-theme-leuven" "windmove-default-keybindings" "enlarge-window" "org-src-fontify-buffer" "org-shiftleft" "color-theme-comidia" "global-unset-key" "other-window" "recover-session" "color-theme-charcoal-black" "re-builder" "color-theme-actress" "eval-defun" "longlines-auto-wrap" "longlines-mode" "global-set-key" "transient-mark-mode" "shrink-window" "man" "shell-command" "rgrep" "lgrep" "grep" "cd" "shell-mode" "describe-bindings" "disable-paredit-mode" "paredit-mode" "delete-char" "color-theme-solarized-dark" "view-emacs-news" "eshell-command" "testx" "find-file-at-point" "ansi-color-for-comint-mode-filter" "dirs" "lisp-eval-defun" "shell" "terminal-emulator" "setenv" "eval-buffer" "dired-do-load" "check-ispell-version" "info-lookup-file" "info-lookup-symbol" "rename-buffer" "bookmark-bmenu-list" "kill-buffer" "narrow-to-region" "color-theme-infodoc" "color-theme-high-contrast" "color-theme-simple-1" "color-theme-railscasts" "color-theme-sanityinc-solarized-dark" "flyspell-buffer" "checkdoc-ispell" "org-narrow-to-subtree" "recover-file" "dired-other-window" "org-reload" "web-mode-indent-line" "web-mode-indent-buffer" "nxml-mode" "replace-string" "tags-search" "ping" "eval-region" "nrepl-jack-in" "locate-library" "customize-variable" "package-refresh-contents" "ielm" "indent-rigidly" "indent-for-tab-command" "spook" "w3m-browse-url" "ns-popup-color-panel" "global-centered-cursor-mode" "customize-apropos" "customize-apropos-faces" "list-faces-display" "org-indent-mode" "write-region" "toggle-word-wrap" "quit-other-window" "self-insert-command" "overwrite-mode" "org-remember" "w3m" "color-theme-monokai" "switch-to-buffer" "metar-report" "weather-report" "color-theme-monokai"))
(setq file-name-history '("/Users/anand/Dropbox/notesy/Typing Tones.txt" "/Users/anand/Dropbox/notesy/Multi-Dimensional Composition.txt" "/Users/anand/Dropbox/work/scratch-emacs.el" "/Users/anand/.emacs.d/whiteboard2-theme.el" "/Users/anand/Dropbox/work/org-mode/list.md" "/usr/local/share/emacs/24.2/lisp/eshell/esh-groups.el" "/Users/anand/Dropbox/work/fasd.sh" "/Users/anand/Documents/a.txt" "/Users/anand/Sites/info.php" "/etc/apache2/httpd.conf" "/etc/apache2/users/anand.conf" "/Users/anand/Downloads/php52.rb" "/Users/anand/Dropbox/work/kevin-chat.txt" "/Users/anand/Dropbox/work/sq.html" "/Users/anand/Dropbox/work/github.css" "/Users/anand/.emacs.d/init.el" "/Users/anand/.emacs.d/custom.el" "/Users/anand/.inputrc" "/Users/anand/Dropbox/work/org-mode/notes.org" "/Users/anand/Dropbox/work/org-mode/notes-old.org" "/Users/anand/Dropbox/work/org-mode/new-notes.org" "/Users/anand/Dropbox/work/org-mode/emacs-todo.org" "/Users/anand/Dropbox/work/node-coffee/ng-stuff.js" "/Users/anand/.emacs.d/eshell/alias" "/Users/anand/Dropbox/work/Seth Quotes.md" "~/.emacs.d/init.el" "/Users/anand/Dropbox/work/src/.emacs.d/init.el" "/Users/anand/Dropbox/work/node-coffee/bb-playground/bb-boilerplate.html" "/Users/anand/Dropbox/work/software-ideas-other.md" "/Users/anand/Dropbox/work/blerg.md" "/Users/anand/Dropbox/work/Watchers/everwatch2.rb" "/Users/anand/Dropbox/work/Watchers/everwatch.rb" "/Users/anand/Dropbox/work/Seth Quotes.txt" "/Users/anand/Dropbox/oldprojects/readme.md" "/Users/anand/Dropbox/work/src/.emacs.d/README.md" "/Users/anand/Dropbox/work/cover-letter-hayneedle.txt" "/Users/anand/Dropbox/work/cover-letter-phenomblue.txt" "/Users/anand/Dropbox/work/cover-letter-3.txt" "/Users/anand/Dropbox/work/cover-letter.txt" "/Users/anand/Dropbox/work/cover-letter-mindmixer.txt" "/Users/anand/Dropbox/work/who-i-am.md" "/Users/anand/Dropbox/work/new-resume.txt" "/Users/anand/Dropbox/oldprojects/q1.js" "/Users/anand/Dropbox/oldprojects/hard.js" "/Users/anand/Dropbox/oldprojects/status.txt" "/Users/anand/Dropbox/oldprojects/" "/Users/anand/Dropbox/dotfiles-mbp/tcsh-history" "/Users/anand/Dropbox/work/safari.css" "/Users/anand/.bashrc" "/Users/anand/Dropbox/work/node-coffee/simplechat/main.js" "/Users/anand/Downloads/the-company-building-and-growing.json" "/Users/anand/Dropbox/work/scratch2.el" "~/Dropbox/pdfs/deconcentration-of-attention.pdf" "/Users/anand/.config/pianobar/gnotify.sh" "/Users/anand/Downloads/316__debugging_with_xcode_4_and_lldb.pdf" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/test.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/app.test.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/grunt.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/require-config.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/test/setup.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/app/js/app.js" "/Users/anand/Dropbox/work/node-coffee/bb-tasks/package.json" "/Users/anand/Dropbox/work/scratch.el" "/Users/anand/Pictures/" "/Users/anand/Pictures/hilltop-tree.jpg" "/var/folders/sn/9ds6jk452vg5hbn3vy9nsm980000gn/T/bash-fc-7350883270" "/var/folders/sn/9ds6jk452vg5hbn3vy9nsm980000gn/T/bash-fc-4087494226" "/var/folders/sn/9ds6jk452vg5hbn3vy9nsm980000gn/T/bash-fc-1365368696" "/Users/anand/Dropbox/work/src/.emacs.d/setup-hippie.el" "/Users/anand/Dropbox/work/node-coffee/odd.coffee" "/Users/anand/Dropbox/work/node-coffee/show.js" "~/Dropbox/work/node-coffee/hello.coffee" "~/Dropbox/work/node-coffee/#hello.coffee#" "/Users/anand/Dropbox/dotfiles/emacs.d/init.el" "/Users/anand/Dropbox/work/node-coffee/hello.coffee" "/Users/anand/.emacs.d/my-stuff/dash-at-point.el" "/Users/anand/Dropbox/work/twilio-playground/erp.coffee" "/Users/anand/Dropbox/work/twilio-playground/ahoy.js" "/Users/anand/Dropbox/work/twilio-playground/ahoy.coffee" "/Users/anand/Dropbox/work/node-coffee/me.coffee" "/Users/anand/Dropbox/work/org-mode/" "/Users/anand/Dropbox/work/tennis_scorer.rb" "~/Dropbox/work/cover-letter-3.txt" "~/Dropbox/work/" "/Users/anand/Dropbox/pdfs/" "/Users/anand/Downloads/Dropbox 1.0.20.dmg" "~/Downloads/" "/Users/anand/Dropbox/work/org-" "/Users/anand/Dropbox/work/org-mode/stylesheet.css" "/Users/anand/Dropbox/work/org-mode/arf.html" "/Users/anand/Dropbox/work/org-mode/arf" "~/Dropbox/work/org-mode/scratch.el" "/Users/anand/Dropbox/dotfiles/emacs.d/custom.el" "/Users/anand/Dropbox/dotfiles/emacs.d/my-stuff/color-theme-6.6.0/color-theme.el" "/Users/anand/.emacs.d/color-themes/" "/Users/anand/.emacs.d/color-themes/color-theme-leuven.el" "/Users/anand/Dropbox/work/org-mode/hapi.js" "/Users/anand/Dropbox/work/cover-letter2.txt" "/Users/anand/Downloads/Actor Model of Computation- Scalable Robust Information Systems.pdf" "/Users/anand/Dropbox/work/org-mode/bashrc.sh" "/Users/anand/Dropbox/work/Concurrent Programming.pdf" "/Users/anand/Dropbox/work/src/leaderboard/leaderboard.js" "/Users/anand/Dropbox/work/src/leaderboard/leaderboard.css" "~/Dropbox/work/src/leaderboard/" "~/Dropbox/work/org-mode/" "/Users/anand/Dropbox/work/org-mode/emacs.el" "~/.emacs.d/eshell/alias" "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.html" "/Users/anand/Dropbox/work/org-mode/arf.rb" "/Users/anand/Dropbox/work/org-mode/org.org" "/Users/anand/Dropbox/work/org-mode/cyberpunk-theme.el" "/Users/anand/Dropbox/work/org-mode/financial1-propsosal.txt" "/Users/anand/" "/Users/anand/Dropbox/work/org-mode/public/index.html" "/Users/anand/Downloads/OutlineforAndrewsOnlineMarketingWindow.rtf" "~/Dropbox/work/elevated/jeff-bio.txt" "~/Dropbox/work/elevated/she-proposal.txt" "/Users/anand/Dropbox/work/elevated/she-proposal.txt" "/Users/anand/Dropbox/work/elevated/jeff-bio.txt" "/Users/anand/Dropbox/work/elevated/responsive.css" "/Users/anand/Dropbox/work/elevated/responsive-child.css" "/Users/anand/Downloads/lh_wordpress_blank_theme/style.css" "/Users/anand/Dropbox/work/org-mode/Elevated|SEO.org" "~/Dropbox/work/org-mode/Elevated|SEO.org" "~/Dropbox/work/org-mode/#Elevated|SEO.org#" "/Users/anand/Dropbox/work/org-mode/proposals.org" "~/Sites/" "/Users/anand/Sites/elevatedseo.html" "/Users/anand/Sites/index.html" "/Users/anand/Dropbox/work/animal.rb" "/Users/anand/Dropbox/work/org-mode/accounts.dat" "~/.emacs.d/my-stuff/iy-go-to-char.el" "~/.emacs.d/my-stuff/" "/Users/anand/.emacs.d/my-stuff/iy-goto-char.el" "/Users/anand/Dropbox/work/snippets-notes.clj" "/Users/anand/Dropbox/work/conways-game-of-life.clj" "/Users/anand/.clj_completions-long-list" "~/.emacs.d/custom.el" "/Users/anand/Dropbox/work/org-mode/automata.org" "/Users/anand/Dropbox/work/org-mode/literate-example.org" "/Users/anand/Dropbox/work/org-mode/emacs-todo.html" "/Users/anand/.emacs.d/my-stuff/blink-colored-cursor.el" "/Users/anand/.notes" "/Users/anand/.emacs.d/metar-report.el" "/Users/anand/Dropbox/work/cursor-chg.el" "/Users/anand/.emacs" "/Users/anand/.emacs" "/Users/anand/Dropbox/work/org-mode/emacs" "/Users/anand/Dropbox/work/org-mode/arf.pl" "/Users/anand/.emacs" "/Users/anand/.lein/plugins/lein-tarsier-0.9.1.jar" "~/.emacs.d/anand/rainbow-delimiters.el" "/Users/anand/.emacs"))
(setq minibuffer-history '("23" "146" "uptime" "markdown" "em" "bookmarks" "ibuffer-list-buffers" "ido" "cust" "ido-switch-buffer" "scroll-bar-drag-position" "scroll-bar-drag-1" "scroll-bar-drag" "scroll-bar-scroll-down" "evil-buffer" "mode-line-other-buffer" "backup-directory-alist" "temporary-file-directory" "evil-default-cursor" "undo-tree-visualizer-toggle-diff" "undo-tree-save-history" "lexical-binding" "litable" "message" "Arf" "emacs-lisp-mode-hook" "imenu-elisp-sections" "imenu-generic-expression" "imenu" "arf" "imenu--split-menu" "erc" "hl-line-face" "left" "scroll-bar-mode" "mouse-wheel-mode" "custom-theme-directory" "data-directory" "-" "smooth-scroll-margin" "org-timestamp-up" "org-time<" "org-time-stamp-format" "org-time" "time-stamp" "timestamp" "date-stamp" "datestamp" "date-to-day" "php" "bookmark" "default-frame-alist" "scroll-preserve-screen-position" "scroll-conservatively" "whiteboard2" "whiteboard" "load-theme" "ilf" "face-new-frame-defaults" "face-attribute-name-alist" "indent-tabs-mode" "tab-always-indent" "tab-width" "evil-visual-line" "evil-scroll-page-down" "set-face-attribute" "custom-set-faces" "window-system-initialization-alist" "frame-initial-frame-alist" "auto-save-visited-file-name" "auto-save-mode" "command-apropos" "json" "tab-stop-list" "indent-according-to-mode" "solarized-light2" "gruber-darker" "frame-background-mode" "twilight" "custom-theme-load-path" "solarized-light" "paren-showing-faces" "paren-showing" "light-blue" "tsdh-light" "soothe" "wheatgrass" "set-face-attributes-from-resources" "custom-face-all" "custom-set-default" "faces" "frame-initial-frame" "Faces" "web-mode" "custom-safe-themes" "twilight-bright" "evil-emacs-state-map" "evil-scroll-line-down" "comment-region" "el:lambda" "12" "4" "9" "16" "36" "60" "40" "10" "20" "1" "30" "17" "2" "3" "14" "11" "13" "5" "-15@ 30' " "9.5" "7" "360@ " "90@ " "90" "6@ 15' " "6@ 15' 14.28\"" "6" "37@ 26' 36.42\"" "isearch" "buffer-live-p" "markdown-indent-line" "/bin/bash" "\".\"" "\".+\"" "align-regexp" "stops" "occur" "tabs" "invisible" "defcustom" "eshell-kill-processes-on-exit" "buffer-file-name" "eshell-kill-hook" "eshell-exit-hook" "evil-leader/in-all-states" "define-key" "show-paren-mode" "show-paren-style" "key-chord-one-key-delay" "key-chord-two-keys-delay" "evil-leader" "evil" "evil-intercept-esc" "switch-to-buffer" "ido-find-file-in-dir" "buffer-name-history" "evil-leader/leader" "evil-insert-state-map" "key-chord-describe" "key-chord-define" "key-chord" "chord" "evil-scroll-line-to-center" "scroll-down-line" "scroll-up-line" "evil-mode-map-alist" "undo-tree-visualize" "spaces-strings" "background-mode" "frame-set-background-mode" "background" "theme" "markdown-mode" "dir-locals-set-directory-class" "undo" "case" "upper" "uppercase" "regex" "select-window" "browse-url-browser-function" "isearch--state-case-fold-search" "locate-dominating-file" "eshell-rc-script" "eshell-login-script" "eshell-prompt-function" "eshell-visual-commands" "eshell-path-env" "eshell" "alias" "eshell-aliases-file" "eshell-variable-aliases-list" "eshell-alias" "unalias" "symlink" "symlinks" "autoload" "eval-after-load" "initial-environment" "eshell path" "exec-path" "highlight-changes-visible-mode" "eshell history" "expand-file-name" "el-get" "redo+" "alpha-window" "a-menu" "load-path" "isearch-occur" "isearch-mode-map" "ns" "getenv" "indent-relative" "indent-for-tab-command" "coffee" "coffee-command" "coffee-send-buffer" "eshell-ls-use-colors" "frames" "ido-mode" "dired-find-alternate-file" "put" "linum-mode" "linum" "trough" "margin" "hl-line-highlight" "apropos" "apropos-value" "rx-to-string" "goto-last-change" "#92c48f" "set-cursor-color" "cursor-type" "emacs.d" "frame" "ert-deftest" "frame-initial-geometry-arguments" "set-frame-font" "mouse-select-font" "menu-set-font" "https://www.simperium.com/overview/" "menu-bar-mode" "webjump" "file-directory-p" "ido-save-history" "history" "eval" "join-line" "ido-setup-hook" "require" "iy-go-to-char" "pdf" "smooth-scroll-strict-margins" "smooth-scroll-lines-from-window-top" "dired" "hl-line-mode" "line-mode" "line-number-mode" "mouse-avoidance-mode" "ido-dired" "--color=auto --group-directories-first -alGgphtuR" "dired-maybe-insert-subdir" "dired-clean-directory" "repeat" "server-start" "server" "mac-command-modifier" "truncate-lines" "dired-omit-mode" "omit" "save-place" "ido-last-directory-list" "recentf-mode" "recentf" "vc-follow-symlinks" "defadvice" "try-vscroll" "kill-line" "after" "outline-back-to-heading" "org-back-to-heading" "cookie" "dolist" "directory-files" "directory-files-no-dot-files-regexp" "user-emacs-directory" "concat" "js2coffee" "coffee-js2coffee-replace-region" "repl" "js2" "javascript" "js2-mode" "cyberpunk" "solarized-dark" "paren" "paredit-mode" "rainbow-delimiters-mode" "el:setq" "unload-feature" "el:defvar" "el:message" "elisp:message" "javascript:console.log" "console.log" "console" "elisp:start-process" "elisp:global-set-key" "dwin" "thing-at-point" "ido-everywhere" "ido-enable-flex-matching" "ns-show-prefs" "exile" "banish" "keyboard" "hyper-key" "hyper" "hyperkey" "package" "pwd" "comint" "shell-copy-environment-variable" "env" "setenv" "soo" "set-default-font" "rainbow-mode" "visual-line-mode" "babel" "fileset" "filesets" "a" "gru" "highlight-regexp" "isearch-highlight-regexp" "isearch-lazy-highlight-search" "isearch-dehighlight" "sgml-delete-tag" "narrow" "zenburn" "glyphless-char-display" "elisp" "lexical" "current theme" "frame-font" "defface" "face" "kill-read-only-ok" "org-iswitchb" "org-store-link" "arf.html" "browser" "browse" "url-view-url" "rainbow" "misterioso" "tsdh-dark" "adwaita" "wombat" "tango-dark" "manoj-dark" "recursive-edit-preserving-window-config" "auto-save" "hippie-expand" "mouse" "cy" "auto-save-file-name-transforms" "visit" "package-alist" "package-archive-contents" "package-archives" "package-initialize" "org-insert-property-drawer" "org-drawers" "web-mode-colorize" "system-type" "font-lock-faces" "font" "special" "utf" "windmove-default-keybindings" "windmove" "ido-use-virtual-buffers" "winner-mode" "org-src-fontify-natively" "other-window" "revert-buffer" "add" "center-line" "fullscreen" "allmode" "allout-mode" "end-of-defun" "beginning-of-defun" "964" "color-theme-initialize" "longlines-mode" "column" "word-wrap" "wrap" "75" "78" "long lines" "long-lines" "jump-to-mark" "set-mark-command" "pop-global-mark" "swap" "transient-mark-mode" "next-line-add-newlines" "animate" "sanityinc-solarized-dark" "sanityinc-solarized-d" "doc-view" "rebind" "customize" "alt-modifier" "alt" "ns-" "option" "prefer" "rgrep" "color" "syntax" "describe-bindings" "grep" "keybinding" "define key" "definekey" "bind key" "keybinds" "keybindings" ";" "command" "commands" "24.2" "dired-listing-switches" "eshell-mode" "ze" "blerg" "font-lock-maximum-decoration" "ansi-color-make-color-map" "ansi-color-map" "ansi-color-names-vector" "find-file-at-point" "ansi-colors" "ty-color-mode" "shell" "explicit-shell-file-name" "c" "(org)" "emacs" "reload" "restart" "reset" "dired-do-load" "meditation" "meditiation" "telematics" "ispell-program-name" "ispell" "hippie" "gls" "split" "Jeff Fox Bio" "simple health exchange proposal" "spell" "Regarding Elevated|SEO" "lind" "narrow-to-region" "org-outline-level" "org-startup-indented" "ns-control-modifier" "ns-command-modifier" "ns-option-modifier" "ns-function-modifier" "line" "numbers" "file" "push-mark" "set-mark" "mark" "move" "jump" "top" "search" "org-display-outline-path" "find-grep" "flex" "mark-defun" "goto-char" "rectangle" "encrypt" "sha" "rot13" "setq-default" "electricity" "electric-pair-mode" "electric" "man" "nrepl-popup-stacktraces" "color-theme" "scroll-margin" "package-refresh-contents" "setcdr" "default-directory" "normal-top-level-add-to-load-path" "delete-window" "emacs-todo" "notes.org" "custom.el" "init.el" "bookmark-save-flag" "bookmark-default-file" "process-status" "http://duckduckgo.com" "org-default-notes-file" "org-capture" "org-version" "org-ctrl-c-star" "org-mode-map" "mode-specific-map" "ESC-prefix" "Control-X-prefix" "keymap" "define-prefix-command" "org-agenda-keymap" "ctl-x-map" "global-set-key" "global-map" "key-map" "define-key-after" "org" "add-hook" "after-init-hook" "initial-frame-alist" "frame-notice-user-settings" "ns-initialize-window-system" "package-load-list" "cursor-color" "background-color" "ns-font-name" "height" "pixels" "fontsize" "size" "(font size)" "font size" "add-to-list" "fboundp" "provide" "write-region" "ring-bell-function" "0" "95" "fill-column" "global-linum-mode" "toggle-word-wrap" "kbd" "insert-char" "weather in omaha" "wunderground.com" "wunderground" "scroll" "overwrite-mode" "overstrike" "redraw" "refresh" "http://www.aviationweather.gov/adds/metars/?station_ids=kmle&std_trans=translated&chk_metars=on&hoursStr=most+recent+only&submitmet=Submit" "KMLE" "klme" "kmle" "indent-to-left-margin" "Omaha, NE" "omaha ne" "omaha" "weather-report" "68114" "load-file" "stringp" "weather" "color-theme-directory" "org-shiftright" "centered-cursor" "auto-window-vscroll" "scroll-error-top-bottom"))
(setq buffer-name-history '("custom.el" "init.el" "Seth Quotes.md" "software-ideas-other.md" "Multi-Dimensional Composition.txt" "Custom Example.css" "*Packages*" "*Help*" "scratch-emacs.el" "*Customize Group: Ido*" "*scratch*" "*Occur*" " *undo-tree*" "*Customize Option: Smooth Scroll Margin*" "core" "*info*" "*Customize Apropos*" "*Customize Group: Mouse*" "app" "themes" "*Customize Option: Scroll Preserve Screen Position*" "*Customize Group: Time Stamp*" "emacs-todo.org" "list.md" "*Customize Group: Windows*" "*Customize Option: Scroll Conservatively*" "*Customize Face: Show Paren Match*" "*Custom Theme*" "*Command History*" "*Customize Option: Indent Tabs Mode*" "esh-groups.el" "a.txt" "kevin-chat.txt" "httpd.conf" "info.php" "php52.rb" "anand.conf" "sq.html" "*Messages*" "indent.el.gz" "github.css" "*Customize Face: Cursor*" "*Customize Face: Region*" "*Customize Face: Paren Face Match*" "everwatch2.rb" "*Customize Faces*" "*Customize Group: Paren Showing Faces*" "*Customize Face: Default*" "*Customize Group: Basic Faces*" "*Customize Group: Emacs*" "*Customize Group: Ns*" "*Customize Group: Environment*" "*Customize Group: Faces*" "notes.org" "notes-old.org" ".inputrc" ".bashrc" "new-notes.org" "*Calculator*" "*Calc Edit*" "*Customize Group: Isearch*" "*Customize Group: Lazy Highlight*" "*Customize Group: Markdown*" "*ansi-term*" "*eshell*" "*Customize Option: Tab Width*" "*Tab Stops*" "esh-mode.el.gz" "~" "*Customize Option: Eshell Kill Processes On Exit*" "*Backtrace*" "*Process List*" "alias" ".emacs.d" "work" "*Customize Group: Paren Showing*" "*Customize Option: Show Paren Style*" "*Customize Option: Evil Leader/In All States*" "*Customize Group: Evil Leader*" "bb-boilerplate.html" "*Customize Group: Evil Cjk*" "*WoMan 1 ack*" "*Customize Group: Evil*" "evil-core.el" "blerg.md" "readme.md" "README.md" "everwatch.rb" "Seth Quotes.txt" "cover-letter-3.txt" "*Apropos*" "*Customize Option: Frame Background Mode*" "hard.js" "new-resume.txt" "q1.js" "status.txt" "oldprojects" "bb-playground" "*RE-Builder*" "cover-letter-mindmixer.txt" "test.coffee" "login" "*Customize Option: Eshell Visual Commands*" "*Customize Option: Eshell Prompt Function*" "*Finder*" "em-alias.el.gz" "*Customize Option: Eshell Variable Aliases List*" "*Mes" "main.js" "*Customize Group: Eshell*" "the-company-building-and-growing.json" "scratch2.el" "memmeter.rb" "*Shell Command Output*" "gnotify.sh" "deconcentration-software-Letter.pdf" "bb-tasks" "*el-get packages*" "316__debugging_with_xcode_4_and_lldb.pdf" "*Customize Option: Exec Path*" "a.coffee" "package.json" "*CoffeeREPL*" "*Disabled Command*" "*Completions*" "test.js" "test" "app.test.js" "grunt.js<2>" "npm-debug.log" "grunt" "server.js" "index.html" "org-mode" "*Customize Group: Apropos*" "*Customize Option: Hl Line Face*" "*Customize Group: Hl Line*" "*Customize Group: Frames*" "*ert*" "odd.coffee" "menu-bar.el.gz" "mouse.el.gz" "webjump.el.gz" "net" "*Customize Option: Ido Setup Hook*" "tarpit.pdf" "pdfs" "*Directory*" "smooth-scrolling.el" "*Customize Option: Smooth Scroll Strict Margins*" "Pictures" "hilltop-tree.jpg" "*Customize Option: Custom Safe Themes*" "*Customize Group: Js2 Mode*" "*Customize Option: Menu Bar Mode*" "*Customize Option: Vc Follow Symlinks*" "*Customize Group: Recentf*" "*Customize Option: Ido Enable Last Directory History*" "*Customize Group: Save Place*" "*Customize Group: Dired Faces*" "*Customize Group: Dired X*" "*Customize Group: Dired Keys*" "*Customize Group: Dired*" "show.js" "coffee-mode.el" "#hello.coffee#" "hello.coffee" "*Ediff Control Panel*" "dash-at-point.el" "HELLO" "*Customize Group: Avoid*" "MORE.STUFF" "autotelicum-Smooth-CoffeeScript-5261e2e" "ahoy.js" "ahoy.coffee" "prelude.coffee" "prelude" "*GNU Emacs*" "*Customize Group: Comint*" "me.coffee" "*Colors*" "Contents" "doc" "tennis_scorer.rb" "Downloads" "Dropbox" "routes.coffee" "1-HotPie-from-Screencast" "MyIOS" "index.js" " *code-conversion-work*" "arf.html" "org-" "arf.html.html" "emacs.el" "arf.html~" "arf" "stylesheet.css~" "stylesheet.css" "README" "dir" "org-7.9-3-ga986d3" "request-assign-future.txt" "scratch.el" "*Org HTML Export*" "*Customize Option: Default Frame Alist*" "color-theme-library.el" "hapi.js" "cookies" "2C/init.el" "cover-letter2.txt" "cover-letter.txt" "Actor Model of Computation- Scalable Robust Information Systems.pdf" "bashrc.sh" "*Customize Group: The Emacs shell*" "Concurrent Programming.pdf" ".meteor" ".saves-*" ".saves-61616-anands-mbp.local~" "*Man grep*" "*grep*" "NEWS" "*shell*" "*Customize Group: Ansi Colors*" "*Customize Group: Shell*" "*terminal*" ".bash_history" "Elevated|SEO.html" "arf.rb" "org.org" "financial1-propsosal.txt" "*Customize Option: Dired Listing Switches*" "public" "responsive-child.css" "Elevated|SEO.org" "OutlineforAndrewsOnlineMarketingWindow.rtf" "responsive.css" "Elevated|SEO.org<2>" "proposals.org" "elevatedseo.html" "Sites" "TUTORIAL" "accounts.dat" "iy-go-to-char.el" "iy-goto-char.el" "*nrepl*" "electric.el.gz" "snippets-notes.clj" "conways-game-of-life.clj" "*ielm*" ".clj_completions-long-list" "*Customize Option: Org Capture Templates*" "*Customize Group: Auto Save*" "emacs-todo.html" "blink-colored-cursor.el" "*w3m*" ".notes" "*Customize Option: Ido Ignore Buffers*" "metar-report.el" "weather.el" "*Color Theme Selection*" "*Custom Themes*"))
(setq yes-or-no-p-history '("yes" "y" "no" "no" "no"))
